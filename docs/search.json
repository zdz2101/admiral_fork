[{"path":"https://pharmaverse.github.io/admiral/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://pharmaverse.github.io/admiral/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution to {admiral}","title":"Contribution to {admiral}","text":"outlines propose change admiral package. detailed info contributing {admiral}, pharmaverse packages, please see development process guide well Developer Guides Articles section {admiral} website","code":""},{"path":"https://pharmaverse.github.io/admiral/CONTRIBUTING.html","id":"basics","dir":"","previous_headings":"","what":"Basics","title":"Contribution to {admiral}","text":"new contribution, user creates issue issue tab GitHub put backlog. issues can range bug identification /fixes, enhancements functions, documentation, tests new features. advise contact us issue created via Slack (don’t access, use link join). can discuss details align expectations familiar admiral philosophy programming strategy. team try review issues within next backlog meeting give initial feedback. Since 100% fully resourced software development team might issues take longer respond depending amount overall issues. Familiarize programming strategy, guidance GitHub usage unit testing. newly created issues reviewed within next backlog meeting creator receive initial feedback via comment. Someone core development team triage new issues assigning appropriate labels (“user request” can easily identify new requests). Issues meant taken users Pharma programming community exclusively admiral team GSK Roche.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/CONTRIBUTING.html","id":"type-1-contribution-with-code","dir":"","previous_headings":"","what":"Type 1 Contribution with Code:","title":"Contribution to {admiral}","text":"First, user creates issue comments existing issue notify ’d like contribute code. Follow development process step--step guide. advise contact admiral core development team directly via Slack submitting code complex functionality.","code":""},{"path":"https://pharmaverse.github.io/admiral/CONTRIBUTING.html","id":"type-2-contribution-without-code","dir":"","previous_headings":"","what":"Type 2 Contribution without Code:","title":"Contribution to {admiral}","text":"User creates issue ideally contacts admiral team member via Slack. admiral core development team contact issue creator soon possible discuss details. See Contribution {admiral} additional details.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiral/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and GlaxoSmithKline LLC  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"main-idea","dir":"Articles","previous_headings":"","what":"Main Idea","title":"Get Started","text":"main idea admiral ADaM dataset built sequence derivations. derivation adds one variables parameters processed dataset. modular approach makes easy adjust code adding, removing, modifying derivations. derivation function call. Consider example following script creates (simple) ADSL dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"load-packages-and-example-datasets","dir":"Articles","previous_headings":"Main Idea","what":"Load Packages and Example Datasets","title":"Get Started","text":"First, load packages example datasets help ADSL creation. dplyr lubridate packages tidyverse packages used heavily throughout script. admiral package also leverages {admiral.test} package example SDTM datasets CDISC Pilot Study.","code":"library(dplyr, warn.conflicts = FALSE) library(lubridate) library(admiral) library(admiral.test)  # Read in SDTM datasets data(\"admiral_dm\") data(\"admiral_ds\") data(\"admiral_ex\")  dm <- convert_blanks_to_na(admiral_dm) ds <- convert_blanks_to_na(admiral_ds) ex <- convert_blanks_to_na(admiral_ex)"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"treatmentvargs","dir":"Articles","previous_headings":"Main Idea","what":"Derive Treatment Variables (TRT0xP, TRT0xA)","title":"Get Started","text":"mapping treatment variables left ADaM programmer. example mapping may :","code":"adsl <- dm %>%   mutate(TRT01P = ARM, TRT01A = ACTARM)"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"trtdatetimegs","dir":"Articles","previous_headings":"Main Idea","what":"Derive/Impute Numeric Treatment Date/Time and Flag Variables (TRTSDTM, TRTEDTM, TRTSTMF, TRTETMF)","title":"Get Started","text":"function derive_vars_dtm() can used convert DTC variables EX numeric datetime variable impute missing components. function call returns original data frame column EXSTDTM, EXENDTM corresponding time imputation flag variables EXSTTMF EXENTMF added end dataframe. Exposure observations incomplete date ignored. impute missing time 23:59:59 using time_imputation = \"last\". required imputation flags determined automatically function. time imputation flags derived time imputed date imputed. Don’t intimidated number arguments! try make arguments self-explanatory, e.g. new_vars_prefix places EXST start --DTM variable time_imputation = \"last\" appends 23:59:59. However, always possible make every argument self-explanatory. click function, derive_vars_dtm(), can bring reference documentation learn argument.","code":"# Derive treatment variables ## Impute time of exposure dates (creates numeric datetime and time imputation flag variables) ex_ext <- ex %>%   derive_vars_dtm(     dtc = EXSTDTC,     new_vars_prefix = \"EXST\"   ) %>%   derive_vars_dtm(     dtc = EXENDTC,     new_vars_prefix = \"EXEN\",     time_imputation = \"last\"   )  ## Derive variables for first/last treatment date and time imputation flags adsl <- adsl %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = !is.na(EXSTDTM),     new_vars = exprs(TRTSDTM = EXSTDTM, TRTSTMF = EXSTTMF),     order = exprs(EXSTDTM, EXSEQ),     mode = \"first\",     by_vars = exprs(STUDYID, USUBJID)   ) %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = !is.na(EXENDTM),     new_vars = exprs(TRTEDTM = EXENDTM, TRTETMF = EXENTMF),     order = exprs(EXENDTM, EXSEQ),     mode = \"last\",     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"trtdategs","dir":"Articles","previous_headings":"Main Idea","what":"Derive Date Variables from Date/Time Variables (TRTSDT, TRTEDT)","title":"Get Started","text":"datetime variables returned can converted dates using derive_vars_dtm_to_dt() function.","code":"adsl <- adsl %>%   derive_vars_dtm_to_dt(source_vars = exprs(TRTSDTM, TRTEDTM))"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"trtdurgs","dir":"Articles","previous_headings":"Main Idea","what":"Derive Treatment Duration (TRTDURD)","title":"Get Started","text":"Now, TRTSDT TRTEDT derived, function derive_var_trtdurd() can used calculate Treatment duration (TRTDURD). Notice lack inputs. function defaults set TRTSDT TRTEDT. Clicking derive_var_trtdurd() bring reference documentation can see default arguments. Amazing! one dplyr function four admiral functions successfully created nine new variables ADSL dataset. Let’s take look newly derived variables. Note: display variables derived. user running code additional adsl variables displayed. can use Choose Columns Display button add variables table.","code":"adsl <- adsl %>%   derive_var_trtdurd()"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Get Started","text":"important functions admiral derivations. Derivations add variables observations input dataset. Existing variables observations input dataset changed. Derivation functions start derive_. first parameter functions expects input dataset. allows us string together derivations using %>% operator. Functions derive dedicated variable start derive_var_ followed variable name, e.g., derive_var_trtdurd() derives TRTDURD variable. Functions can derive multiple variables start derive_vars_ followed variable name, e.g., derive_vars_dtm() can derive TRTSDTM TRTSTMF variables. Functions derive dedicated parameter start derive_param_ followed parameter name, e.g., derive_param_bmi() derives BMI parameter.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"input-and-output","dir":"Articles","previous_headings":"","what":"Input and Output","title":"Get Started","text":"expected input dataset grouped. Otherwise error issued. output dataset ungrouped. observations ordered dedicated way. particular, order observations input dataset may preserved.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"computations","dir":"Articles","previous_headings":"","what":"Computations","title":"Get Started","text":"Computations expect vectors input return vector. Usually computation functions can used %>%. functions can used expressions like convert_dtc_to_dt() derivation FINLABDT example :","code":"# Derive final lab visit date ds_final_lab_visit <- ds %>%   filter(DSDECOD == \"FINAL LAB VISIT\") %>%   transmute(USUBJID, FINLABDT = convert_dtc_to_dt(DSSTDTC))  # Derive treatment variables adsl <- dm %>%   # Merge on final lab visit date   derive_vars_merged(     dataset_add = ds_final_lab_visit,     by_vars = exprs(USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Get Started","text":"parameters expect variable names expressions variable names, symbols expressions must specified rather strings. parameters expect single variable name, name can specified without quotes quotation, e.g. new_var = TEMPBL parameters expect one variable names, list symbols expected, e.g. by_vars = exprs(PARAMCD, AVISIT) parameters expect single expression, expression needs passed “”, e.g. filter = PARAMCD == \"TEMP\" parameters expect one expressions, list expressions expected, e.g. order = exprs(AVISIT, desc(AESEV))","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"handling-of-missing-values","dir":"Articles","previous_headings":"","what":"Handling of Missing Values","title":"Get Started","text":"using haven package read SAS datasets R, SAS-style character missing values, .e. \"\", converted proper R NA values. Rather kept . problematic downstream data processing R handles \"\" just string. Thus, data manipulation performed SAS blanks converted R NAs using admiral’s convert_blanks_to_na() function, e.g. Note logical operator applied NA value always returns NA rather TRUE FALSE. exception .na() returns TRUE input NA. Thus, filter visits \"Baseline\" following condition need used. Also note aggregation functions, like mean() max(), also return NA element input vector missing. avoid behavior one explicitly set na.rm = TRUE. important keep mind using admiral’s aggregation functions derive_summary_records().","code":"dm <- haven::read_sas(\"dm.sas7bdat\") %>%    convert_blanks_to_na() visits <- c(\"Baseline\", NA, \"Screening\", \"Week 1 Day 7\") visits != \"Baseline\" #> [1] FALSE    NA  TRUE  TRUE is.na(visits) #> [1] FALSE  TRUE FALSE FALSE visits != \"Baseline\" | is.na(visits) #> [1] FALSE  TRUE  TRUE  TRUE mean(c(1, NA, 2)) #> [1] NA mean(c(1, NA, 2), na.rm = TRUE) #> [1] 1.5"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Get Started","text":"functions reviewed tested ensure work described documentation. validated yet. Although admiral follows CDISC standards, claim dataset resulting calling admiral functions ADaM compliant. ensured user.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"starting-a-script","dir":"Articles","previous_headings":"","what":"Starting a Script","title":"Get Started","text":"ADaM data structures, overview flow example function calls common steps provided following vignettes: Creating ADSL Creating OCCDS ADaM Creating BDS Finding ADaM admiral also provides template R scripts starting point. can created calling use_ad_template(), e.g., list available templates can obtained list_all_templates():","code":"use_ad_template(   adam_name = \"adsl\",   save_path = \"./ad_adsl.R\" ) list_all_templates() #> Existing ADaM templates in package 'admiral': #> • ADAE #> • ADCM #> • ADEG #> • ADEX #> • ADLB #> • ADLBHY #> • ADMH #> • ADPC #> • ADPP #> • ADSL #> • ADVS"},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Get Started","text":"Support provided via admiral Slack channel.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/admiral.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Get Started","text":"Template scripts Programming Strategy","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADSL","text":"article describes creating ADSL ADaM. Examples currently presented tested using DM, EX , AE, LB DS SDTM domains. However, domains used. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"programming-flow","dir":"Articles","previous_headings":"","what":"Programming Flow","title":"Creating ADSL","text":"Read Data Derive Period, Subperiod, Phase Variables (e.g. APxxSDT, APxxEDT, …) Derive Treatment Variables (TRT0xP, TRT0xA) Derive/Impute Numeric Treatment Date/Time Duration (TRTSDT, TRTEDT, TRTDURD) Disposition Dates (e.g. EOSDT) Disposition Status (e.g. EOSTT) Disposition Reason(s) (e.g. DCSREAS, DCSREASP) Randomization Date (RANDDT) Death Date (DTHDT) Cause Death (DTHCAUS) Duration Relative Death Derive Last Known Date Alive (LSTALVDT) Grouping (e.g. AGEGR1 REGION1) Population Flags (e.g. SAFFL) Derive Variables Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"readdata","dir":"Articles","previous_headings":"Programming Flow","what":"Read in Data","title":"Creating ADSL","text":"start, data frames needed creation ADSL read environment. company specific process. data frames needed may DM, EX, DS, AE, LB. example purpose, CDISC Pilot SDTM datasets—included {admiral.test}—used. DM domain used basis ADSL:","code":"library(admiral) library(dplyr, warn.conflicts = FALSE) library(admiral.test) library(lubridate) library(stringr)  data(\"admiral_dm\") data(\"admiral_ds\") data(\"admiral_ex\") data(\"admiral_ae\") data(\"admiral_lb\")  dm <- convert_blanks_to_na(admiral_dm) ds <- convert_blanks_to_na(admiral_ds) ex <- convert_blanks_to_na(admiral_ex) ae <- convert_blanks_to_na(admiral_ae) lb <- convert_blanks_to_na(admiral_lb) adsl <- dm %>%   select(-DOMAIN)"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"periodvars","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Period, Subperiod, and Phase Variables (e.g. APxxSDT, APxxEDT, …)","title":"Creating ADSL","text":"See “Visit Period Variables” vignette information. variables derived based period reference dataset, may derived later point flow. example, phases like “Treatment Phase” “Follow ” derived based treatment start end date.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"treatmentvar","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Treatment Variables (TRT0xP, TRT0xA)","title":"Creating ADSL","text":"mapping treatment variables left ADaM programmer. example mapping study without periods may : studies periods see “Visit Period Variables” vignette.","code":"adsl <- dm %>%   mutate(TRT01P = ARM, TRT01A = ACTARM)"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"trtdatetime","dir":"Articles","previous_headings":"Programming Flow","what":"Derive/Impute Numeric Treatment Date/Time and Duration (TRTSDTM, TRTEDTM, TRTDURD)","title":"Creating ADSL","text":"function derive_vars_merged() can used derive treatment start end date/times using ex domain. pre-processing step ex required convert variable EXSTDTC EXSTDTC datetime variables impute missing date time components. Conversion imputation done derive_vars_dtm(). Example calls: call returns original data frame column TRTSDTM, TRTSTMF, TRTEDTM, TRTETMF added. Exposure observations incomplete date zero doses non placebo treatments ignored. Missing time parts imputed first last start end date respectively. datetime variables returned can converted dates using derive_vars_dtm_to_dt() function. Now, TRTSDT TRTEDT derived, function derive_var_trtdurd() can used calculate Treatment duration (TRTDURD).","code":"# impute start and end time of exposure to first and last respectively, do not impute date ex_ext <- ex %>%   derive_vars_dtm(     dtc = EXSTDTC,     new_vars_prefix = \"EXST\"   ) %>%   derive_vars_dtm(     dtc = EXENDTC,     new_vars_prefix = \"EXEN\",     time_imputation = \"last\"   )  adsl <- adsl %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = (EXDOSE > 0 |       (EXDOSE == 0 &         str_detect(EXTRT, \"PLACEBO\"))) & !is.na(EXSTDTM),     new_vars = exprs(TRTSDTM = EXSTDTM, TRTSTMF = EXSTTMF),     order = exprs(EXSTDTM, EXSEQ),     mode = \"first\",     by_vars = exprs(STUDYID, USUBJID)   ) %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = (EXDOSE > 0 |       (EXDOSE == 0 &         str_detect(EXTRT, \"PLACEBO\"))) & !is.na(EXENDTM),     new_vars = exprs(TRTEDTM = EXENDTM, TRTETMF = EXENTMF),     order = exprs(EXENDTM, EXSEQ),     mode = \"last\",     by_vars = exprs(STUDYID, USUBJID)   ) adsl <- adsl %>%   derive_vars_dtm_to_dt(source_vars = exprs(TRTSDTM, TRTEDTM)) adsl <- adsl %>%   derive_var_trtdurd()"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"disposition_date","dir":"Articles","previous_headings":"Programming Flow > Derive Disposition Variables","what":"Disposition Dates (e.g. EOSDT)","title":"Creating ADSL","text":"functions derive_vars_dt() derive_vars_merged() can used derive disposition date. First character disposition date (DS.DSSTDTC) converted numeric date (DSSTDT) calling derive_vars_dt(). relevant disposition date selected adjusting filter_add parameter. derive End Study date (EOSDT), call : get : call return input dataset column EOSDT added. function allows user impute partial dates well. imputation needed date imputed first month, set date_imputation = \"FIRST\".","code":"# convert character date to numeric date without imputation ds_ext <- derive_vars_dt(   ds,   dtc = DSSTDTC,   new_vars_prefix = \"DSST\" )  adsl <- adsl %>%   derive_vars_merged(     dataset_add = ds_ext,     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(EOSDT = DSSTDT),     filter_add = DSCAT == \"DISPOSITION EVENT\" & DSDECOD != \"SCREEN FAILURE\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"disposition_status","dir":"Articles","previous_headings":"Programming Flow > Derive Disposition Variables","what":"Disposition Status (e.g. EOSSTT)","title":"Creating ADSL","text":"function derive_var_merged_cat() can used derive disposition status specific timepoint. relevant disposition variable (DS.DSDECOD) selected adjusting filter parameter used derive EOSSTT. derive End Study status (EOSSTT), function expects mapping derivation cat_fun argument. mapping derivation call \"STARTED\" DSDECOD \"SCREEN FAILURE\" \"COMPLETED\" DSDECOD == \"COMPLETED\" \"DISCONTINUED\" DSDECOD \"COMPLETED\" NA \"ONGOING\" otherwise Example function format_eosstt(): customized mapping function format_eosstt() can now passed main function: call return input dataset column EOSSTT added. derivation must changed, user can create /function pass cat_fun argument function (cat_fun = new_mapping) map DSDECOD suitable EOSSTT value.","code":"format_eosstt <- function(x) {   case_when(     x %in% c(\"COMPLETED\") ~ \"COMPLETED\",     x %in% c(\"SCREEN FAILURE\") ~ NA_character_,     !is.na(x) ~ \"DISCONTINUED\",     TRUE ~ \"ONGOING\"   ) } adsl <- adsl %>%   derive_var_merged_cat(     dataset_add = ds,     by_vars = exprs(STUDYID, USUBJID),     filter_add = DSCAT == \"DISPOSITION EVENT\",     new_var = EOSSTT,     source_var = DSDECOD,     cat_fun = format_eosstt,     missing_value = \"ONGOING\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"disposition_reason","dir":"Articles","previous_headings":"Programming Flow > Derive Disposition Variables","what":"Disposition Reason(s) (e.g. DCSREAS, DCSREASP)","title":"Creating ADSL","text":"main reason discontinuation usually stored DSDECOD DSTERM provides additional details regarding subject’s discontinuation (e.g., description \"\"). function derive_vars_merged() can used derive disposition reason (along details, required) specific timepoint. relevant disposition variable(s) (DS.DSDECOD, DS.DSTERM) selected adjusting filter parameter used derive main reason (details). derive End Study reason(s) (DCSREAS DCSREASP), function map DCSREAS DSDECOD, DCSREASP DSTERM DSDECOD \"COMPLETED\", \"SCREEN FAILURE\", NA, NA otherwise call return input dataset column DCSREAS DCSREASP added. derivation must changed, user can define derivation filter_add argument function map DSDECOD DSTERM suitable DCSREAS/DCSREASP value. call maps DCSREAS DCREASP follows: DCSREAS DSDECOD DSDECOD \"COMPLETED\" NA, NA otherwise DCSREASP DSTERM DSDECOD equal , NA otherwise","code":"adsl <- adsl %>%   derive_vars_merged(     dataset_add = ds,     by_vars = exprs(USUBJID),     new_vars = exprs(DCSREAS = DSDECOD, DCSREASP = DSTERM),     filter_add = DSCAT == \"DISPOSITION EVENT\" & DSDECOD %notin% c(\"SCREEN FAILURE\", \"COMPLETED\", NA)   ) adsl <- adsl %>%   derive_vars_merged(     dataset_add = ds,     by_vars = exprs(USUBJID),     new_vars = exprs(DCSREAS = DSDECOD),     filter_add = DSCAT == \"DISPOSITION EVENT\" & DSDECOD %notin% c(\"SCREEN FAILURE\", \"COMPLETED\", NA)   ) %>%   derive_vars_merged(     dataset_add = ds,     by_vars = exprs(USUBJID),     new_vars = exprs(DCSREASP = DSTERM),     filter_add = DSCAT == \"DISPOSITION EVENT\" & DSDECOD %in% \"OTHER\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"randomization_date","dir":"Articles","previous_headings":"Programming Flow > Derive Disposition Variables","what":"Randomization Date (RANDDT)","title":"Creating ADSL","text":"function derive_vars_merged() can used derive randomization date variable. map Randomization Date (RANDDT), call : call return input dataset column RANDDT added.","code":"adsl <- adsl %>%   derive_vars_merged(     dataset_add = ds_ext,     filter_add = DSDECOD == \"RANDOMIZED\",     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(RANDDT = DSSTDT)   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"death_date","dir":"Articles","previous_headings":"Programming Flow > Derive Death Variables","what":"Death Date (DTHDT)","title":"Creating ADSL","text":"function derive_vars_dt() can used derive DTHDT. function allows user impute date well. Example calls: call return input dataset columns DTHDT added , default, associated date imputation flag (DTHDTF) populated controlled terminology outlined ADaM IG date imputations. imputation flag required, user must set argument flag_imputation “none”. imputation needed date imputed first day month/year call : See also Date Time Imputation.","code":"adsl <- adsl %>%   derive_vars_dt(     new_vars_prefix = \"DTH\",     dtc = DTHDTC   ) adsl <- adsl %>%   derive_vars_dt(     new_vars_prefix = \"DTH\",     dtc = DTHDTC,     date_imputation = \"first\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"death_cause","dir":"Articles","previous_headings":"Programming Flow > Derive Death Variables","what":"Cause of Death (DTHCAUS)","title":"Creating ADSL","text":"cause death DTHCAUS can derived using function derive_var_dthcaus(). Since cause death collected/mapped different domains (e.g. DS, AE, DD), important user specifies right source(s) derive cause death . example, date death collected AE form AE Fatal, cause death set preferred term (AEDECOD) Fatal AE, date death collected DS form, cause death set disposition term (DSTERM). achieve , dthcaus_source() objects must specified defined fits study requirement. dthcaus_source() specifications: dataset_name: name dataset search death information, filter: condition define death, date: date death, mode: first last select first/last date death multiple dates collected, dthcaus: variable text used populate DTHCAUS. traceability_vars: whether traceability variables need added (e.g source domain, sequence, variable) example call define sources : sources defined, function derive_var_dthcaus() can used derive DTHCAUS: function also offers option add traceability variables (e.g. DTHDOM store domain date death collected, DTHSEQ store xxSEQ value domain). add , traceability_vars argument must added dthcaus_source() arguments:","code":"src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AESTDTM,   mode = \"first\",   dthcaus = AEDECOD ) src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & grepl(\"DEATH DUE TO\", DSTERM),   date = DSSTDT,   mode = \"first\",   dthcaus = \"Death in DS\" ) ae_ext <- derive_vars_dtm(   ae,   dtc = AESTDTC,   new_vars_prefix = \"AEST\",   highest_imputation = \"M\",   flag_imputation = \"none\" )  adsl <- adsl %>%   derive_var_dthcaus(src_ae, src_ds, source_datasets = list(ae = ae_ext, ds = ds_ext)) src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AESTDTM,   mode = \"first\",   dthcaus = AEDECOD,   traceability_vars = exprs(DTHDOM = \"AE\", DTHSEQ = AESEQ) )  src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & grepl(\"DEATH DUE TO\", DSTERM),   date = DSSTDT,   mode = \"first\",   dthcaus = DSTERM,   traceability_vars = exprs(DTHDOM = \"DS\", DTHSEQ = DSSEQ) ) adsl <- adsl %>%   select(-DTHCAUS) %>% # remove it before deriving it again   derive_var_dthcaus(src_ae, src_ds, source_datasets = list(ae = ae_ext, ds = ds_ext))"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"death_other","dir":"Articles","previous_headings":"Programming Flow > Derive Death Variables","what":"Duration Relative to Death","title":"Creating ADSL","text":"function derive_vars_duration() can used derive duration relative death like Relative Day Death (DTHADY) numbers days last dose death (LDDTHELD). Example calls: Relative Day Death Elapsed Days Last Dose Death","code":"adsl <- adsl %>%   derive_vars_duration(     new_var = DTHADY,     start_date = TRTSDT,     end_date = DTHDT   ) adsl <- adsl %>%   derive_vars_duration(     new_var = LDDTHELD,     start_date = TRTEDT,     end_date = DTHDT,     add_one = FALSE   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"lstalvdt","dir":"Articles","previous_headings":"Programming Flow","what":"Derive the Last Date Known Alive (LSTALVDT)","title":"Creating ADSL","text":"Similarly cause death (DTHCAUS), last known alive date (LSTALVDT) can derived multiples sources user must ensure sources (date_source()) correctly defined. date_source() specifications: dataset_name: name dataset search date information, filter: filter apply datasets, date: date interest, date_imputation: whether impute partial dates, traceability_vars: whether traceability variables need added (e.g source domain, sequence, variable) example : sources defined, function derive_var_extreme_dt() can used derive LSTALVDT: Similarly dthcaus_source(), traceability variables can added specifying traceability_vars argument date_source().","code":"ae_start_date <- date_source(   dataset_name = \"ae\",   date = AESTDT ) ae_end_date <- date_source(   dataset_name = \"ae\",   date = AEENDT ) lb_date <- date_source(   dataset_name = \"lb\",   date = LBDT,   filter = !is.na(LBDT) ) trt_end_date <- date_source(   dataset_name = \"adsl\",   date = TRTEDT ) # impute AE start and end date to first ae_ext <- ae %>%   derive_vars_dt(     dtc = AESTDTC,     new_vars_prefix = \"AEST\",     highest_imputation = \"M\"   ) %>%   derive_vars_dt(     dtc = AEENDTC,     new_vars_prefix = \"AEEN\",     highest_imputation = \"M\"   )  # impute LB date to first lb_ext <- derive_vars_dt(   lb,   dtc = LBDTC,   new_vars_prefix = \"LB\",   highest_imputation = \"M\" )  adsl <- adsl %>%   derive_var_extreme_dt(     new_var = LSTALVDT,     ae_start_date, ae_end_date, lb_date, trt_end_date,     source_datasets = list(ae = ae_ext, adsl = adsl, lb = lb_ext),     mode = \"last\"   ) ae_start_date <- date_source(   dataset_name = \"ae\",   date = AESTDT,   traceability_vars = exprs(LALVDOM = \"AE\", LALVSEQ = AESEQ, LALVVAR = \"AESTDTC\") ) ae_end_date <- date_source(   dataset_name = \"ae\",   date = AEENDT,   traceability_vars = exprs(LALVDOM = \"AE\", LALVSEQ = AESEQ, LALVVAR = \"AEENDTC\") ) lb_date <- date_source(   dataset_name = \"lb\",   date = LBDT,   filter = !is.na(LBDT),   traceability_vars = exprs(LALVDOM = \"LB\", LALVSEQ = LBSEQ, LALVVAR = \"LBDTC\") ) trt_end_date <- date_source(   dataset_name = \"adsl\",   date = TRTEDTM,   traceability_vars = exprs(LALVDOM = \"ADSL\", LALVSEQ = NA_integer_, LALVVAR = \"TRTEDTM\") )  adsl <- adsl %>%   select(-LSTALVDT) %>% # created in the previous call   derive_var_extreme_dt(     new_var = LSTALVDT,     ae_start_date, ae_end_date, lb_date, trt_end_date,     source_datasets = list(ae = ae_ext, adsl = adsl, lb = lb_ext),     mode = \"last\"   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"groupings_ex","dir":"Articles","previous_headings":"Programming Flow > Derive Groupings and Populations","what":"Grouping (e.g. AGEGR1 or REGION1)","title":"Creating ADSL","text":"Numeric categorical variables (AGE, RACE, COUNTRY, etc.) may need grouped perform required analysis. admiral currently functionality assist required groupings. , user often need create /function meet /study requirement. example, AGEGR1 required categorize AGE <18, 18-64 >64, REGION1 required categorize COUNTRY North America, Rest World, user defined functions look like following: functions used mutate() statement derive required grouping variables:","code":"format_agegr1 <- function(var_input) {   case_when(     var_input < 18 ~ \"<18\",     between(var_input, 18, 64) ~ \"18-64\",     var_input > 64 ~ \">64\",     TRUE ~ \"Missing\"   ) }  format_region1 <- function(var_input) {   case_when(     var_input %in% c(\"CAN\", \"USA\") ~ \"North America\",     !is.na(var_input) ~ \"Rest of the World\",     TRUE ~ \"Missing\"   ) } adsl <- adsl %>%   mutate(     AGEGR1 = format_agegr1(AGE),     REGION1 = format_region1(COUNTRY)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"popflag","dir":"Articles","previous_headings":"Programming Flow > Derive Groupings and Populations","what":"Population Flags (e.g. SAFFL)","title":"Creating ADSL","text":"Since populations flags mainly company/study specific dedicated functions provided, cases can easily derived using derive_var_merged_exist_flag. example implementation :","code":"adsl <- adsl %>%   derive_var_merged_exist_flag(     dataset_add = ex,     by_vars = exprs(STUDYID, USUBJID),     new_var = SAFFL,     condition = (EXDOSE > 0 | (EXDOSE == 0 & str_detect(EXTRT, \"PLACEBO\")))   )"},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"other","dir":"Articles","previous_headings":"Programming Flow","what":"Derive Other Variables","title":"Creating ADSL","text":"users can add specific code cover need analysis. following functions helpful many ADSL derivations: derive_vars_merged() - Merge Variables Dataset Input Dataset derive_var_merged_exist_flag() - Merge Existence Flag derive_var_merged_cat() - Merge Categorization Variable derive_var_merged_character() - Merge Character Variable derive_var_merged_summary() - Merge Summary Variable See also Generic Functions.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/adsl.html","id":"attributes","dir":"Articles","previous_headings":"Programming Flow","what":"Add Labels and Attributes","title":"Creating ADSL","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a BDS Exposure ADaM","text":"article describes creating Exposure ADaM using BDS structure. Examples currently presented using underlying EX domain EX domain represents data collected CRF ADEX ADaM output. However, examples can applied situations EC domain used input /ADEC another exposure ADaM created. many different approaches modeling exposure data. vignette gives examples creating PARAMCD AVAL combinations using exposure data. vignette meant guide standard structure exposure analysis datasets. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a BDS Exposure ADaM","text":"Read Data Derive/Impute Numeric Date/Time Analysis Day (ADT, ADTM, ADY, ADTF, ATMF) Compute Duration Record Create 1:1 Mapping Records Create Summary Records Assign PARAMCD, PARAMN, etc. Reference Tables Derive Categorization Variables (AVALCATx) Assign ASEQ Add ADSL variables ASEQ Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a BDS Exposure ADaM","text":"start, data frames needed creation ADEX read environment. company specific process. data frames needed may EX ADSL. example purpose, CDISC Pilot SDTM ADaM datasets—included {admiral.test}—used. step, may useful join ADSL EX domain well. ADSL variables used derivations selected step. rest relevant ADSL variables added later. CDISC pilot EX domain data contain dose adjustment flag planned dose information. demonstration purposes, added data.","code":"library(admiral) library(dplyr, warn.conflicts = FALSE) library(admiral.test) library(lubridate) library(stringr) library(tibble)  data(\"admiral_adsl\") data(\"admiral_ex\")  adsl <- admiral_adsl ex <- convert_blanks_to_na(admiral_ex) adsl_vars <- exprs(TRTSDT, TRTSDTM, TRTEDT, TRTEDTM)  adex <- derive_vars_merged(   ex,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) ) adex <- adex %>%   mutate(     EXADJ = case_when(       USUBJID == \"01-701-1028\" & VISIT %in% c(\"WEEK 2\") ~ \"ADVERSE EVENT\",       USUBJID == \"01-701-1148\" & VISIT %in% c(\"WEEK 2\", \"WEEK 24\") ~ \"MEDICATION ERROR\",       TRUE ~ NA_character_     ),     EXDOSE = case_when(       USUBJID == \"01-701-1028\" & VISIT %in% c(\"WEEK 2\") ~ 0,       USUBJID == \"01-701-1148\" & VISIT %in% c(\"WEEK 2\", \"WEEK 24\") ~ 0,       TRUE ~ EXDOSE     )   ) %>%   mutate(EXPLDOS = if_else(EXTRT == \"PLACEBO\", 0, 54))  distinct(adex, EXTRT, EXPLDOS) #> # A tibble: 2 x 2 #>   EXTRT      EXPLDOS #>   <chr>        <dbl> #> 1 PLACEBO          0 #> 2 XANOMELINE      54 count(adex, EXADJ) #> # A tibble: 1 x 2 #>   EXADJ     n #>   <chr> <int> #> 1 NA       13"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"datetime","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive/Impute Numeric Date/Time and Analysis Day (ADT, ADTM, ADY, ADTF, ATMF)","title":"Creating a BDS Exposure ADaM","text":"function derive_vars_dt() can used derive ADT. function allows user impute date well. Example calls: next examples demonstrates datetime imputation features available derive_vars_dtm() function, time imputed “00:00:00”: example imputes start date first first day month imputes end date last day month. Please see Date Time Imputation additional examples calculating imputing analysis dates. Next, analysis study days can derived:","code":"adex <- derive_vars_dt(adex, new_vars_prefix = \"AST\", dtc = EXSTDTC) adex <- derive_vars_dt(adex, new_vars_prefix = \"AEN\", dtc = EXENDTC) adex <- derive_vars_dtm(   adex,   dtc = EXSTDTC,   highest_imputation = \"M\",   new_vars_prefix = \"AST\" )  adex <- derive_vars_dtm(   adex,   dtc = EXENDTC,   highest_imputation = \"M\",   date_imputation = \"last\",   new_vars_prefix = \"AEN\" ) adex <-   derive_vars_dy(adex,     reference_date = TRTSDT,     source_vars = exprs(ASTDT, AENDT)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"duration","dir":"Articles","previous_headings":"Programming Workflow","what":"Compute duration for a record","title":"Creating a BDS Exposure ADaM","text":"compute duration treatment exposure record, derive_vars_duration() function can used. units calculated duration can also changed. example, duration output years: Please refer derive_vars_duration() documentation detailed information input parameters. may necessary calculate additional intermediate values. example, cumulative doses received cumulative planned doses may calculated : may additional interest turn single record containing dosing summary information set multiple single records, representing single dose interval specified summary record. another approach deriving total dose parameter EXDOSFRQ != . function create_single_dose_dataset() can used expand record containing start date, end date, dosing frequency corresponding set records representing one dose (.e. EXDOSFRQ == \"\").","code":"adex <- adex %>%   derive_vars_duration(     new_var = EXDURD,     start_date = ASTDT,     end_date = AENDT   ) adex <- adex %>%   derive_vars_duration(     new_var = EXDURDY,     out_unit = \"years\",     start_date = ASTDT,     end_date = AENDT   ) adex <- adex %>%   mutate(     DOSEO = EXDOSE * EXDURD,     PDOSEO = EXPLDOS * EXDURD   ) single_dose <- adex %>%   filter(USUBJID == \"01-701-1015\" & EXSTDY == 1) %>%   create_single_dose_dataset(keep_source_vars = exprs(USUBJID, EXDOSE, EXPLDOS, EXDOSFRQ, ASTDT, AENDT))"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"onetoone","dir":"Articles","previous_headings":"Programming Workflow","what":"Create 1:1 mapping records","title":"Creating a BDS Exposure ADaM","text":"first set exposure records create records mapped 1:1 existing collected exposure record SDTM. records, AVAL AVALC calculated using columns exist data summarizing records necessary. records may used input summary records used individually summarization outputs. examples may exposure duration, dose administered, dose adjusted, etc. based one exposure record SDTM. records can derived using simple dplyr::mutate assignments combined:","code":"adex_durd <- adex %>%   mutate(     PARAMCD = \"DURD\",     AVAL = EXDURD   )  adex_dose <- adex %>%   mutate(     PARAMCD = \"DOSE\",     AVAL = DOSEO   )  adex_pldos <- adex %>%   mutate(     PARAMCD = \"PLDOSE\",     AVAL = PDOSEO   )  adex_adj <- adex %>%   mutate(     PARAMCD = \"ADJ\",     AVALC = if_else(!is.na(EXADJ), \"Y\", NA_character_)   )  adex_adjae <- adex %>%   mutate(     PARAMCD = \"ADJAE\",     AVALC = if_else(EXADJ == \"ADVERSE EVENT\", \"Y\", NA_character_)   )  adex <- bind_rows(   adex_durd,   adex_dose,   adex_pldos,   adex_adj,   adex_adjae ) %>%   mutate(PARCAT1 = \"INDIVIDUAL\")  count(adex, PARAMCD) #> # A tibble: 5 x 2 #>   PARAMCD     n #>   <chr>   <int> #> 1 ADJ        13 #> 2 ADJAE      13 #> 3 DOSE       13 #> 4 DURD       13 #> 5 PLDOSE     13"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"summaryrec","dir":"Articles","previous_headings":"Programming Workflow","what":"Create Summary Records","title":"Creating a BDS Exposure ADaM","text":"Exposure commonly analyzed timing interval (e.g. APHASE, APERIOD, AVISIT, etc.). types calculations, derive_param_exposure() function may used. addition creating summarized AVAL, function also compute minimum maximum dates record. example, calculate total dose subject treatment, record PARAMCD == \"TDOSE\" created PARCAT1 set \"OVERALL\" using records ADEX PARAMCD == \"DOSE\" summing AVAL. addition, ASTDT, AENDT created minimum maximum date/times associated by_vars grouping. Note , addition PARAMCD, PARCAT1, AVAL, ASTDT AENDT, variables specified by_vars argument populated new records. Multiple parameters (records) may created one time using call_derivation() function: Dose intensity can calculated using function derive_param_doseint(). planned dose administered dose passed function new record created dose intensity calculation. , variables specified by_vars argument populated new record. default calculation dose intensity : Administered Doses / Planned Doses * 100. Please see derive_param_doseint() documentation see planned doses 0 NA handled.","code":"adex <- derive_param_exposure(   adex,   by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars),   input_code = \"DOSE\",   analysis_var = AVAL,   set_values_to = exprs(PARAMCD = \"TDOSE\", PARCAT1 = \"OVERALL\"),   summary_fun = function(x) sum(x, na.rm = TRUE) ) adex <- adex %>%   call_derivation(     derivation = derive_param_exposure,     variable_params = list(       params(         set_values_to = exprs(PARAMCD = \"TDOSE\", PARCAT1 = \"OVERALL\"),         input_code = \"DOSE\",         analysis_var = AVAL,         summary_fun = function(x) sum(x, na.rm = TRUE)       ),       params(         set_values_to = exprs(PARAMCD = \"TPDOSE\", PARCAT1 = \"OVERALL\"),         input_code = \"PLDOSE\",         analysis_var = AVAL,         summary_fun = function(x) sum(x, na.rm = TRUE)       ),       params(         set_values_to = exprs(PARAMCD = \"TDURD\", PARCAT1 = \"OVERALL\"),         input_code = \"DURD\",         analysis_var = AVAL,         summary_fun = function(x) sum(x, na.rm = TRUE)       ),       params(         set_values_to = exprs(PARAMCD = \"TADJ\", PARCAT1 = \"OVERALL\"),         input_code = \"ADJ\",         analysis_var = AVALC,         summary_fun = function(x) if_else(sum(!is.na(x)) > 0, \"Y\", NA_character_)       ),       params(         set_values_to = exprs(PARAMCD = \"TADJAE\", PARCAT1 = \"OVERALL\"),         input_code = \"ADJAE\",         analysis_var = AVALC,         summary_fun = function(x) if_else(sum(!is.na(x)) > 0, \"Y\", NA_character_)       )     ),     by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars)   )  count(adex, PARAMCD, PARCAT1) #> # A tibble: 10 x 3 #>    PARAMCD PARCAT1        n #>    <chr>   <chr>      <int> #>  1 ADJ     INDIVIDUAL    13 #>  2 ADJAE   INDIVIDUAL    13 #>  3 DOSE    INDIVIDUAL    13 #>  4 DURD    INDIVIDUAL    13 #>  5 PLDOSE  INDIVIDUAL    13 #>  6 TADJ    OVERALL        6 #>  7 TADJAE  OVERALL        6 #>  8 TDOSE   OVERALL        6 #>  9 TDURD   OVERALL        6 #> 10 TPDOSE  OVERALL        6 adex <- adex %>%   derive_param_doseint(     by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars),     set_values_to = exprs(PARAMCD = \"TNDOSINT\"),     tadm_code = \"TDOSE\",     tpadm_code = \"TPDOSE\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"paramcd","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign PARAMCD, PARAMN, etc. from Reference tables","title":"Creating a BDS Exposure ADaM","text":"assign parameter level values PARAM, PARAMN, PARCAT1, etc., lookup can created join source data. example, creating ADEX, lookup based ADaM PARAMCD value may created: Please note, example additional columns may needed join depending lookup/metadata table.","code":"adex <- derive_vars_merged(   adex,   dataset_add = param_lookup,   by_vars = exprs(PARAMCD) )  count(adex, PARAMCD, PARAM, PARAMN) #> # A tibble: 11 x 4 #>    PARAMCD  PARAM                                                   PARAMN     n #>    <chr>    <chr>                                                    <dbl> <int> #>  1 ADJ      Dose adjusted during constant dosing interval                4    13 #>  2 ADJAE    Dose adjusted  due to AE during constant dosing interv…      5    13 #>  3 DOSE     Dose administered during constant dosing interval (mg)       2    13 #>  4 DURD     Study drug duration during constant dosing interval (d…      1    13 #>  5 PLDOSE   Planned dose during constant dosing interval (mg)            3    13 #>  6 TADJ     Dose adjusted during study                                  10     6 #>  7 TADJAE   Dose adjusted during study due to AE                        11     6 #>  8 TDOSE    Total dose administered (mg)                                 7     6 #>  9 TDURD    Overall duration (days)                                      6     6 #> 10 TNDOSINT Overall dose intensity (%)                                  12     6 #> 11 TPDOSE   Total planned dose (mg)                                      9     6"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"cat","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Categorization Variables (AVALCATx)","title":"Creating a BDS Exposure ADaM","text":"admiral currently generic function aid assigning AVALCATx/ AVALCAxN values. simple example values may assigned using dplyr::mutate function:","code":"adex <- adex %>%   mutate(     AVALCAT1 = case_when(       PARAMCD %in% c(\"TDURD\") & AVAL < 30 ~ \"< 30 days\",       PARAMCD %in% c(\"TDURD\") & AVAL >= 30 & AVAL < 90 ~ \">= 30 and < 90 days\",       PARAMCD %in% c(\"TDURD\") & AVAL >= 90 ~ \">=90 days\",       PARAMCD %in% c(\"TDOSE\", \"TPDOSE\") & AVAL < 1000 ~ \"< 1000 mg\",       PARAMCD %in% c(\"TDOSE\", \"TPDOSE\") & AVAL >= 1000 ~ \">= 1000 mg\",       TRUE ~ NA_character_     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign ASEQ","title":"Creating a BDS Exposure ADaM","text":"admiral function derive_var_obs_number() can used derive ASEQ. example call :","code":"adex <- derive_var_obs_number(   adex,   new_var = ASEQ,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(PARCAT1, ASTDT, VISIT, VISITNUM, EXSEQ, PARAMN),   check_type = \"error\" )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add the ADSL variables","title":"Creating a BDS Exposure ADaM","text":"needed, ADSL variables can now added:","code":"adex <- adex %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_exposure.html","id":"attributes","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Labels and Attributes","title":"Creating a BDS Exposure ADaM","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a BDS Finding ADaM","text":"article describes creating BDS finding ADaM. Examples currently presented tested context ADVS. However, examples applied BDS Finding ADaMs ADEG, ADLB, etc. single result captured SDTM Finding domain single date /time. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a BDS Finding ADaM","text":"Read Data Derive/Impute Numeric Date/Time Analysis Day (ADT, ADTM, ADY, ADTF, ATMF) Assign PARAMCD, PARAM, PARAMN, PARCAT1 Derive Results (AVAL, AVALC) Derive Additional Parameters (e.g. BSA, BMI, MAP ADVS) Derive Timing Variables (e.g. APHASE, AVISIT, APERIOD) Timing Flag Variables (e.g. ONTRTFL) Assign Reference Range Indicator (ANRIND) Derive Baseline (BASETYPE, ABLFL, BASE, BASEC, BNRIND) Derive Change Baseline (CHG, PCHG) Derive Shift (e.g.SHIFT1) Derive Analysis Ratio (e.g. R2BASE) Derive Analysis Flags (e.g. ANL01FL) Assign Treatment (TRTA, TRTP) Assign ASEQ Derive Categorization Variables (AVALCATx) Add ADSL variables Derive New Rows Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a BDS Finding ADaM","text":"start, data frames needed creation ADVS read environment. company specific process. data frames needed may VS ADSL. example purpose, CDISC Pilot SDTM ADaM datasets—included {admiral.test}—used. step, may useful join ADSL VS domain. ADSL variables used derivations selected step. rest relevant ADSL variables added later.","code":"library(admiral) library(dplyr, warn.conflicts = FALSE) library(admiral.test) library(lubridate) library(stringr) library(tibble)  data(\"admiral_adsl\") data(\"admiral_vs\")  adsl <- admiral_adsl vs <- convert_blanks_to_na(admiral_vs) adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P)  advs <- derive_vars_merged(   vs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"datetime","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive/Impute Numeric Date/Time and Analysis Day (ADT, ADTM, ADY, ADTF, ATMF)","title":"Creating a BDS Finding ADaM","text":"function derive_vars_dt() can used derive ADT. function allows user impute date well. Example calls: imputation needed date imputed first month, call : Similarly, ADTM may created using function derive_vars_dtm(). Imputation may done date time components ADTM. default, variable ADTF derive_vars_dt() ADTF ATMF derive_vars_dtm() created populated controlled terminology outlined ADaM IG date imputations. See also Date Time Imputation. ADT derived, function derive_vars_dy() can used derive ADY. example assumes ADT TRTSDT exist data frame.","code":"advs <- derive_vars_dt(advs, new_vars_prefix = \"A\", dtc = VSDTC) advs <- derive_vars_dt(   advs,   new_vars_prefix = \"A\",   dtc = VSDTC,   highest_imputation = \"M\" ) # CDISC Pilot data does not contain times and the output of the derivation # ADTM is not presented. advs <- derive_vars_dtm(   advs,   new_vars_prefix = \"A\",   dtc = VSDTC,   highest_imputation = \"M\" ) advs <-   derive_vars_dy(advs, reference_date = TRTSDT, source_vars = exprs(ADT))"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"paramcd","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign PARAMCD, PARAM, PARAMN, PARCAT1","title":"Creating a BDS Finding ADaM","text":"assign parameter level values PARAMCD, PARAM, PARAMN, PARCAT1, etc., lookup can created join source data. example, creating ADVS, lookup based SDTM --TESTCD value may created: lookup may now joined source data: stage, PARAMCD required perform derivations. Additional derived parameters may added, PARAMCD joined datasets point. variables related PARAMCD (e.g. PARAM, PARAMCAT1, …) added PARAMCD derived. Please note, may necessary include variables join. example, perhaps PARAMCD based VSTESTCD VSPOS, may necessary expand lookup create separate look PARAMCD. one lookup table, e.g., company parameter mappings project parameter mappings, available, consolidate_metadata() can used consolidate single lookup table.","code":"advs <- derive_vars_merged_lookup(   advs,   dataset_add = param_lookup,   new_vars = exprs(PARAMCD),   by_vars = exprs(VSTESTCD) ) #> All `VSTESTCD` are mapped."},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Results (AVAL, AVALC)","title":"Creating a BDS Finding ADaM","text":"mapping AVAL AVALC left ADaM programmer. example mapping may :","code":"advs <- mutate(   advs,   AVAL = VSSTRESN,   AVALC = VSSTRESC )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"derive_param","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Additional Parameters (e.g. BSA, BMI or MAP for ADVS)","title":"Creating a BDS Finding ADaM","text":"Optionally derive new parameters creating PARAMCD AVAL. Note variables specified by_vars argument populated newly created records. relevant functions derive_param_map, derive_param_bsa, derive_param_bmi, derive_param_qtc. example creating Mean Arterial Pressure ADVS, see also Example 3 section Derive New Rows alternative way creating new parameters. Likewise, function call , create parameter Body Surface Area Body Mass Index ADVS domain. Similarly, ADEG, parameters QTCBF QTCBS QTCL can created function call. See example PARAMCD = QTCF. Similarly, ADLB, function derive_param_wbc_abs() can used create new parameter lab differentials converted absolute values. See example : PARAMCD derived added dataset, information look-table (PARAM, PARAMCAT1,…) added.","code":"advs <- derive_param_map(   advs,   by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),   set_values_to = exprs(PARAMCD = \"MAP\"),   get_unit_expr = VSSTRESU,   filter = VSSTAT != \"NOT DONE\" | is.na(VSSTAT) ) advs <- derive_param_bsa(   advs,   by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),   method = \"Mosteller\",   set_values_to = exprs(PARAMCD = \"BSA\"),   get_unit_expr = VSSTRESU,   filter = VSSTAT != \"NOT DONE\" | is.na(VSSTAT) )  advs <- derive_param_bmi(   advs,   by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),   set_values_to = exprs(PARAMCD = \"BMI\"),   get_unit_expr = VSSTRESU,   filter = VSSTAT != \"NOT DONE\" | is.na(VSSTAT) ) adeg <- tibble::tribble(   ~USUBJID, ~EGSTRESU, ~PARAMCD, ~AVAL, ~VISIT,   \"P01\", \"msec\", \"QT\", 350, \"CYCLE 1 DAY 1\",   \"P01\", \"msec\", \"QT\", 370, \"CYCLE 2 DAY 1\",   \"P01\", \"msec\", \"RR\", 842, \"CYCLE 1 DAY 1\",   \"P01\", \"msec\", \"RR\", 710, \"CYCLE 2 DAY 1\" )  adeg <- derive_param_qtc(   adeg,   by_vars = exprs(USUBJID, VISIT),   method = \"Fridericia\",   set_values_to = exprs(PARAMCD = \"QTCFR\"),   get_unit_expr = EGSTRESU ) adlb <- tibble::tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~PARAM, ~VISIT,   \"P01\", \"WBC\", 33, \"Leukocyte Count (10^9/L)\", \"CYCLE 1 DAY 1\",   \"P01\", \"WBC\", 38, \"Leukocyte Count (10^9/L)\", \"CYCLE 2 DAY 1\",   \"P01\", \"LYMLE\", 0.90, \"Lymphocytes (fraction of 1)\", \"CYCLE 1 DAY 1\",   \"P01\", \"LYMLE\", 0.70, \"Lymphocytes (fraction of 1)\", \"CYCLE 2 DAY 1\" )  derive_param_wbc_abs(   dataset = adlb,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(     PARAMCD = \"LYMPH\",     PARAM = \"Lymphocytes Abs (10^9/L)\",     DTYPE = \"CALCULATION\"   ),   get_unit_expr = extract_unit(PARAM),   wbc_code = \"WBC\",   diff_code = \"LYMLE\",   diff_type = \"fraction\" ) # Derive PARAM and PARAMN advs <- derive_vars_merged(   advs,   dataset_add = select(param_lookup, -VSTESTCD),   by_vars = exprs(PARAMCD) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"timing","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Timing Variables (e.g. APHASE, AVISIT, APERIOD)","title":"Creating a BDS Finding ADaM","text":"Categorical timing variables protocol analysis dependent. simple example. assigning visits based time windows deriving periods, subperiods, phase variables see “Visit Period Variables” vignette.","code":"advs <- advs %>%   mutate(     AVISIT = case_when(       str_detect(VISIT, \"SCREEN\") ~ NA_character_,       str_detect(VISIT, \"UNSCHED\") ~ NA_character_,       str_detect(VISIT, \"RETRIEVAL\") ~ NA_character_,       str_detect(VISIT, \"AMBUL\") ~ NA_character_,       !is.na(VISIT) ~ str_to_title(VISIT)     ),     AVISITN = as.numeric(case_when(       VISIT == \"BASELINE\" ~ \"0\",       str_detect(VISIT, \"WEEK\") ~ str_trim(str_replace(VISIT, \"WEEK\", \"\"))     )),     ATPT = VSTPT,     ATPTN = VSTPTNUM   )  count(advs, VISITNUM, VISIT, AVISITN, AVISIT) #> # A tibble: 15 x 5 #>    VISITNUM VISIT               AVISITN AVISIT       n #>       <dbl> <chr>                 <dbl> <chr>    <int> #>  1      1   SCREENING 1              NA NA         102 #>  2      2   SCREENING 2              NA NA          78 #>  3      3   BASELINE                  0 Baseline    84 #>  4      3.5 AMBUL ECG PLACEMENT      NA NA          65 #>  5      4   WEEK 2                    2 Week 2      84 #>  6      5   WEEK 4                    4 Week 4      70 #>  7      6   AMBUL ECG REMOVAL        NA NA          52 #>  8      7   WEEK 6                    6 Week 6      42 #>  9      8   WEEK 8                    8 Week 8      42 #> 10      9   WEEK 12                  12 Week 12     42 #> 11     10   WEEK 16                  16 Week 16     42 #> 12     11   WEEK 20                  20 Week 20     28 #> 13     12   WEEK 24                  24 Week 24     28 #> 14     13   WEEK 26                  26 Week 26     28 #> 15    201   RETRIEVAL                NA NA          26  count(advs, VSTPTNUM, VSTPT, ATPTN, ATPT) #> # A tibble: 4 x 5 #>   VSTPTNUM VSTPT                        ATPTN ATPT                             n #>      <dbl> <chr>                        <dbl> <chr>                        <int> #> 1      815 AFTER LYING DOWN FOR 5 MINU…   815 AFTER LYING DOWN FOR 5 MINU…   232 #> 2      816 AFTER STANDING FOR 1 MINUTE    816 AFTER STANDING FOR 1 MINUTE    232 #> 3      817 AFTER STANDING FOR 3 MINUTES   817 AFTER STANDING FOR 3 MINUTES   232 #> 4       NA NA                              NA NA                             117"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"timingflag","dir":"Articles","previous_headings":"Programming Workflow","what":"Timing Flag Variables (e.g. ONTRTFL)","title":"Creating a BDS Finding ADaM","text":"analyses, may necessary flag observation -treatment. admiral function derive_var_ontrtfl() can used. example, -treatment defined observation treatment start treatment end, flag may derived : function returns original data frame column ONTRTFL added. Additionally, function functionality handle window ref_end_date. example, -treatment defined treatment start treatment end plus 60 days, call : addition, function allow filter pre-treatment observations occurred start date. example, observations VSTPT == PRE considered -treatment observation date falls treatment start end date, user may specify using filter_pre_timepoint parameter: Lastly, function allow create -treatment flag based analysis needs. example, variable ONTR01FL needed, showing -treatment flag Period 01, need set new var = ONTR01FL. addition, Period 01 Start Date Period 01 End Date, need ref_start_date = AP01SDT ref_end_date = AP01EDT.","code":"advs <- derive_var_ontrtfl(   advs,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT ) advs <- derive_var_ontrtfl(   advs,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT,   ref_end_window = 60 ) advs <- derive_var_ontrtfl(   advs,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT,   filter_pre_timepoint = ATPT == \"AFTER LYING DOWN FOR 5 MINUTES\" ) advs <- derive_var_ontrtfl(   advs,   new_var = ONTR01FL,   start_date = ASTDT,   end_date = AENDT,   ref_start_date = AP01SDT,   ref_end_date = AP01EDT,   span_period = \"Y\" )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"referencerange","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign Reference Range Indicator (ANRIND)","title":"Creating a BDS Finding ADaM","text":"admiral function derive_var_anrind() may used derive reference range indicator ANRIND. function requires reference range boundaries exist data frame (ANRLO, ANRHI) also accommodates additional boundaries A1LO A1HI. function called :","code":"advs <- derive_var_anrind(advs)"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"baseline","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Baseline (BASETYPE, ABLFL, BASE, BASEC, BNRIND)","title":"Creating a BDS Finding ADaM","text":"BASETYPE derived using function derive_var_basetype(). parameter basetypes function requires named list expression detailing BASETYPE assigned. Note, record falls multiple expressions within basetypes expression, row produced BASETYPE. important derive BASETYPE first can utilized subsequent derivations. important data frame contains multiple values BASETYPE. Next, analysis baseline flag ABLFL can derived using admiral function derive_var_extreme_flag(). example, baseline defined last non-missing AVAL prior TRTSDT, function call ABLFL : Note: Additional examples derive_var_extreme_flag() function can found . Lastly, BASE, BASEC BNRIND columns can derived using admiral function derive_var_base(). Example calls :","code":"advs <- derive_var_basetype(   dataset = advs,   basetypes = rlang::exprs(     \"LAST: AFTER LYING DOWN FOR 5 MINUTES\" = ATPTN == 815,     \"LAST: AFTER STANDING FOR 1 MINUTE\" = ATPTN == 816,     \"LAST: AFTER STANDING FOR 3 MINUTES\" = ATPTN == 817,     \"LAST\" = is.na(ATPTN)   ) )  count(advs, ATPT, ATPTN, BASETYPE) #> # A tibble: 4 x 4 #>   ATPT                           ATPTN BASETYPE                                n #>   <chr>                          <dbl> <chr>                               <int> #> 1 AFTER LYING DOWN FOR 5 MINUTES   815 LAST: AFTER LYING DOWN FOR 5 MINUT…   232 #> 2 AFTER STANDING FOR 1 MINUTE      816 LAST: AFTER STANDING FOR 1 MINUTE     232 #> 3 AFTER STANDING FOR 3 MINUTES     817 LAST: AFTER STANDING FOR 3 MINUTES    232 #> 4 NA                                NA LAST                                  117 advs <- restrict_derivation(   advs,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(STUDYID, USUBJID, BASETYPE, PARAMCD),     order = exprs(ADT, ATPTN, VISITNUM),     new_var = ABLFL,     mode = \"last\"   ),   filter = (!is.na(AVAL) & ADT <= TRTSDT & !is.na(BASETYPE)) ) advs <- derive_var_base(   advs,   by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),   source_var = AVAL,   new_var = BASE )  advs <- derive_var_base(   advs,   by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),   source_var = AVALC,   new_var = BASEC )  advs <- derive_var_base(   advs,   by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),   source_var = ANRIND,   new_var = BNRIND )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"bchange","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Change from Baseline (CHG, PCHG)","title":"Creating a BDS Finding ADaM","text":"Change percent change baseline can derived using admiral functions derive_var_chg() derive_var_pchg(). functions expect AVAL BASE exist data frame. CHG simply AVAL - BASE PCHG (AVAL - BASE) / absolute value (BASE) * 100. Examples calls : variables derived records, e.g., post-baseline records , restrict_derivation() can used.","code":"advs <- derive_var_chg(advs)  advs <- derive_var_pchg(advs)"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"shift","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Shift (e.g. SHIFT1)","title":"Creating a BDS Finding ADaM","text":"Shift variables can derived using admiral function derive_var_shift(). function derives character shift variable concatenating shift values based user-defined pairing, e.g., shift baseline reference range BNRIND analysis reference range ANRIND. Examples calls : variables derived records, e.g., post-baseline records , restrict_derivation() can used.","code":"advs <- derive_var_shift(advs,   new_var = SHIFT1,   from_var = BNRIND,   to_var = ANRIND )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"analysisratio","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Ratio (R2BASE)","title":"Creating a BDS Finding ADaM","text":"Analysis ratio variables can derived using admiral function derive_var_analysis_ratio(). function derives ratio variable based user-specified pair. example, Ratio Baseline calculated AVAL / BASE function appends new variable R2BASE dataset. Examples calls : variables derived records, e.g., post-baseline records , restrict_derivation() can used.","code":"advs <- derive_var_analysis_ratio(advs,   numer_var = AVAL,   denom_var = BASE )  advs <- derive_var_analysis_ratio(advs,   numer_var = AVAL,   denom_var = ANRLO,   new_var = R01ANRLO )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"analysisrec","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Flags (e.g. ANL01FL)","title":"Creating a BDS Finding ADaM","text":"finding ADaMs, analysis flag derived identify appropriate observation(s) use particular analysis subject multiple observations within particular timing period. situation, analysis flag (e.g. ANLxxFL) may used choose appropriate record analysis. flag may derived using admiral function derive_var_extreme_flag(). example, assume like choose latest highest value USUBJID, PARAMCD, AVISIT, ATPT. Another common example flagging worst value subject, parameter, visit. example, assume 3 PARAMCD values (SYSBP, DIABP, RESP). also assume high worst SYSBP DIABP low worst RESP.","code":"advs <- restrict_derivation(   advs,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(STUDYID, USUBJID, BASETYPE, PARAMCD, AVISIT),     order = exprs(ADT, ATPTN, AVAL),     new_var = ANL01FL,     mode = \"last\"   ),   filter = !is.na(AVISITN) ) advs <- slice_derivation(   advs,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(STUDYID, USUBJID, BASETYPE, PARAMCD, AVISIT),     order = exprs(ADT, ATPTN),     new_var = WORSTFL,     mode = \"first\"   ),   derivation_slice(     filter = PARAMCD %in% c(\"SYSBP\", \"DIABP\") & (!is.na(AVISIT) & !is.na(AVAL))   ),   derivation_slice(     filter = PARAMCD %in% \"PULSE\" & (!is.na(AVISIT) & !is.na(AVAL)),     args = params(mode = \"last\")   ) ) %>%   arrange(STUDYID, USUBJID, BASETYPE, PARAMCD, AVISIT)"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"treatment","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign Treatment (TRTA, TRTP)","title":"Creating a BDS Finding ADaM","text":"TRTA TRTP must match least one value character treatment variables ADSL (e.g., TRTxxA/TRTxxP, TRTSEQA/TRTSEQP, TRxxAGy/TRxxPGy). example simple implementation study without periods : studies periods see “Visit Period Variables” vignette.","code":"advs <- mutate(advs, TRTP = TRT01P, TRTA = TRT01A)  count(advs, TRTP, TRTA, TRT01P, TRT01A) #> # A tibble: 2 x 5 #>   TRTP               TRTA              TRT01P            TRT01A                n #>   <chr>              <chr>             <chr>             <chr>             <int> #> 1 Placebo            Placebo           Placebo           Placebo             588 #> 2 Xanomeline Low Do… Xanomeline Low D… Xanomeline Low D… Xanomeline Low D…   225"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign ASEQ","title":"Creating a BDS Finding ADaM","text":"admiral function derive_var_obs_number() can used derive ASEQ. example call :","code":"advs <- derive_var_obs_number(   advs,   new_var = ASEQ,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(PARAMCD, ADT, AVISITN, VISITNUM, ATPTN),   check_type = \"error\" )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"cat","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Categorization Variables (AVALCATx)","title":"Creating a BDS Finding ADaM","text":"Admiral currently generic function aid assigning AVALCATx/ AVALCAxN values. simple example values may assigned:","code":"avalcat_lookup <- tibble::tribble(   ~PARAMCD, ~AVALCA1N, ~AVALCAT1,   \"HEIGHT\", 1, \">140 cm\",   \"HEIGHT\", 2, \"<= 140 cm\" )  format_avalcat1n <- function(param, aval) {   case_when(     param == \"HEIGHT\" & aval > 140 ~ 1,     param == \"HEIGHT\" & aval <= 140 ~ 2   ) }  advs <- advs %>%   mutate(AVALCA1N = format_avalcat1n(param = PARAMCD, aval = AVAL)) %>%   derive_vars_merged(     avalcat_lookup,     by = exprs(PARAMCD, AVALCA1N)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL variables","title":"Creating a BDS Finding ADaM","text":"needed, ADSL variables can now added. List ADSL variables already merged held vector adsl_vars","code":"advs <- advs %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"additional","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive New Rows","title":"Creating a BDS Finding ADaM","text":"deriving new rows data frame, essential programmer takes time insert derivation correct location code. location vary depending previous computations retained new record computations must done new records.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"example-1-creating-a-new-record","dir":"Articles","previous_headings":"Programming Workflow > Derive New Rows","what":"Example 1 (Creating a New Record):","title":"Creating a BDS Finding ADaM","text":"add new record based selection certain criterion (e.g. minimum, maximum) derive_extreme_records() can used. new records include variables selected records.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"adding-a-new-record-for-the-last-value","dir":"Articles","previous_headings":"Programming Workflow > Derive New Rows > Example 1 (Creating a New Record):","what":"Adding a New Record for the Last Value","title":"Creating a BDS Finding ADaM","text":"subject Vital Signs parameter, add record holding last valid observation end treatment. Set AVISIT \"End Treatment\" assign unique AVISITN value.","code":"advs_ex1 <- advs %>%   derive_extreme_records(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     order = exprs(ADT, AVISITN, ATPTN, AVAL),     mode = \"last\",     filter = (4 < AVISITN & AVISITN <= 12 & ANL01FL == \"Y\"),     set_values_to = exprs(       AVISIT = \"End of Treatment\",       AVISITN = 99,       DTYPE = \"LOV\"     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"adding-a-new-record-for-the-minimum-value","dir":"Articles","previous_headings":"Programming Workflow > Derive New Rows > Example 1 (Creating a New Record):","what":"Adding a New Record for the Minimum Value","title":"Creating a BDS Finding ADaM","text":"subject Vital Signs parameter, add record holding minimum value end treatment. minimum attained multiple observations first one selected. Set AVISIT \"Minimum Treatment\" assign unique AVISITN value.","code":"advs_ex1 <- advs %>%   derive_extreme_records(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     order = exprs(AVAL, ADT, AVISITN, ATPTN),     mode = \"first\",     filter = (4 < AVISITN & AVISITN <= 12 & ANL01FL == \"Y\" & !is.na(AVAL)),     set_values_to = exprs(       AVISIT = \"Minimum on Treatment\",       AVISITN = 98,       DTYPE = \"MINIMUM\"     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"example-2-deriving-a-summary-record","dir":"Articles","previous_headings":"Programming Workflow > Derive New Rows","what":"Example 2 (Deriving a Summary Record)","title":"Creating a BDS Finding ADaM","text":"adding new records based aggregating records derive_summary_records() can used. new records variables specified by_vars, analysis_var, set_values_to populated. subject, Vital Signs parameter, visit, date add record holding average value observations date. Set DTYPE AVERAGE.","code":"advs_ex2 <- derive_summary_records(   advs,   by_vars = exprs(STUDYID, USUBJID, PARAMCD, VISITNUM, ADT),   analysis_var = AVAL,   summary_fun = mean,   set_values_to = exprs(DTYPE = \"AVERAGE\") )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"example-3-deriving-a-new-paramcd","dir":"Articles","previous_headings":"Programming Workflow > Derive New Rows","what":"Example 3 (Deriving a New PARAMCD)","title":"Creating a BDS Finding ADaM","text":"Use function derive_param_computed() create new PARAMCD. Note variables specified by_vars argument populated newly created records. example creating Mean Arterial Pressure (PARAMCD = MAP2) alternative formula.","code":"advs_ex3 <- derive_param_computed(   advs,   by_vars = exprs(USUBJID, VISIT, ATPT),   parameters = c(\"SYSBP\", \"DIABP\"),   analysis_value = (AVAL.SYSBP - AVAL.DIABP) / 3 + AVAL.DIABP,   set_values_to = exprs(     PARAMCD = \"MAP2\",     PARAM = \"Mean Arterial Pressure 2 (mmHg)\"   ) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_finding.html","id":"attributes","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Labels and Attributes","title":"Creating a BDS Finding ADaM","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a BDS Time-to-Event ADaM","text":"article describes creating BDS time--event ADaM. main part programming time--event dataset definition events censoring times. admiral supports single events like death composite events like disease progression death. one source dataset can used definition event censoring times. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating a BDS Time-to-Event ADaM","text":"examples vignette require following packages.","code":"library(admiral) library(dplyr, warn.conflicts = FALSE) library(admiral.test)"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a BDS Time-to-Event ADaM","text":"Read Data Derive Parameters (CNSR, ADT, STARTDT) Derive Analysis Value (AVAL) Derive Analysis Sequence Number (ASEQ) Add ADSL Variables Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a BDS Time-to-Event ADaM","text":"start, datasets needed creation time--event dataset read environment. company specific process. example purpose, ADSL dataset—included admiral—SDTM datasets {admiral.test} used. following code creates minimally viable ADAE dataset used throughout following examples.","code":"data(\"admiral_ae\") data(\"admiral_adsl\")  ae <- convert_blanks_to_na(admiral_ae) adsl <- admiral_adsl adae <- ae %>%   left_join(adsl, by = c(\"STUDYID\", \"USUBJID\")) %>%   derive_vars_dt(     new_vars_prefix = \"AST\",     dtc = AESTDTC,     highest_imputation = \"M\"   ) %>%   derive_vars_dt(     new_vars_prefix = \"AEN\",     dtc = AEENDTC,     highest_imputation = \"M\",     date_imputation = \"last\"   ) %>%   mutate(TRTEMFL = if_else(ASTDT >= TRTSDT &     AENDT <= TRTEDT + days(30), \"Y\", NA_character_))"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"parameters","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters (CNSR, ADT, STARTDT)","title":"Creating a BDS Time-to-Event ADaM","text":"derive parameter dependent variables like CNSR, ADT, STARTDT, EVNTDESC, SRCDOM, PARAMCD, … derive_param_tte() function can used. adds one parameter input dataset one observation per subject. Usually called several times. subject determined event occurred. affirmative analysis date ADT set earliest event date. event occurred, analysis date set latest censoring date. events censorings defined event_source() censor_source() class respectively. defines observations (filter parameter) source dataset (dataset_name parameter) potential events censorings, value CNSR variable (censor parameter), variable provides date (date parameter). date can provided date (--DT variable) datetime (--DTM variable). CDISC strongly recommends CNSR = 0 events positive integers censorings. admiral enforces recommendation. Therefore censor parameter available censor_source() . defaulted 1. dataset_name parameter expects character value used identifier. actual data used derivation parameter provided via source_datasets parameter derive_param_tte(). expects named list datasets. names correspond identifiers specified dataset_name parameter. allows define events censoring independent data.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"pre-defined-time-to-event-source-objects","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Pre-Defined Time-to-Event Source Objects","title":"Creating a BDS Time-to-Event ADaM","text":"table shows pre-defined tte_source objects cover common use cases. pre-defined objects can passed directly derive_param_tte() create new time--event parameter.","code":"adtte <- derive_param_tte(   dataset_adsl = adsl,   start_date = TRTSDT,   event_conditions = list(ae_ser_event),   censor_conditions = list(lastalive_censor),   source_datasets = list(adsl = adsl, adae = adae),   set_values_to = exprs(PARAMCD = \"TTAESER\", PARAM = \"Time to First Serious AE\") )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"single-event","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Single Event","title":"Creating a BDS Time-to-Event ADaM","text":"example, overall survival time defined treatment start death. Patients alive lost follow-censored last alive date. following call defines death event based ADSL variables. corresponding censoring based last known alive date can defined following call. definitions can passed derive_param_tte() create new time--event parameter. Note practice efficacy parameters might use randomization date time event origin date.","code":"death <- event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT ) lstalv <- censor_source(   dataset_name = \"adsl\",   date = LSTALVDT ) adtte <- derive_param_tte(   dataset_adsl = adsl,   source_datasets = list(adsl = adsl),   start_date = TRTSDT,   event_conditions = list(death),   censor_conditions = list(lstalv),   set_values_to = exprs(PARAMCD = \"OS\", PARAM = \"Overall Survival\") )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"add-additional-information-for-events-and-censoring-evntdesc-srcvar","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Add Additional Information for Events and Censoring (EVNTDESC, SRCVAR, …)","title":"Creating a BDS Time-to-Event ADaM","text":"add additional information like event censoring description (EVNTDESC) source variable (SRCVAR) set_values_to parameter can specified event/censoring definition.","code":"# define death event # death <- event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT,   set_values_to = exprs(     EVNTDESC = \"DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) )  # define censoring at last known alive date # lstalv <- censor_source(   dataset_name = \"adsl\",   date = LSTALVDT,   set_values_to = exprs(     EVNTDESC = \"LAST KNOWN ALIVE DATE\",     SRCDOM = \"ADSL\",     SRCVAR = \"LSTALVDT\"   ) )  # derive time-to-event parameter # adtte <- derive_param_tte(   dataset_adsl = adsl,   source_datasets = list(adsl = adsl),   event_conditions = list(death),   censor_conditions = list(lstalv),   set_values_to = exprs(PARAMCD = \"OS\", PARAM = \"Overall Survival\") )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"handling-subjects-without-assessment","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Handling Subjects Without Assessment","title":"Creating a BDS Time-to-Event ADaM","text":"subject event record meeting censoring rule, included output dataset. order record subject output dataset, another censoring_source() object created specify patients censored. Therefore start censoring defined achieve subjects without data adrs censored start date. ADaM IG requires computed date must accompanied imputation flags. Thus, function detects --DTF /--TMF variable corresponding start_date STARTDTF STARTTMF set automatically values variables. date variable one event censoring source datasets imputed, imputation flag can specified set_values_to parameter event_source() censor_source() (see definition start censoring ). CDISC pilot contain RS dataset, following example progression free survival uses manually created datasets. event progression free survival occurs progression disease observed subject dies. Therefore two event_source() objects defined: pd progression disease death death. subjects may experience events. case first one selected derive_param_tte(). Subjects without event must censored last tumor assessment. censoring lastvisit object defined tumor assessments. Please note necessary select last one exclude assessments resulted progression disease. handled within derive_param_tte(). Patients without tumor assessment censored start date. Therefore start object defined treatment start date censoring date. necessary exclude patient tumor assessment definition start derive_param_tte() selects last date across censor_source() objects censoring date.","code":"View(adsl) View(adrs) # progressive disease event # pd <- event_source(   dataset_name = \"adrs\",   filter = AVALC == \"PD\",   date = ADT,   set_values_to = exprs(     EVNTDESC = \"PD\",     SRCDOM = \"ADRS\",     SRCVAR = \"ADT\",     SRCSEQ = ASEQ   ) )  # death event # death <- event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT,   set_values_to = exprs(     EVNTDESC = \"DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) ) # last tumor assessment censoring (CNSR = 1 by default) # lastvisit <- censor_source(   dataset_name = \"adrs\",   date = ADT,   set_values_to = exprs(     EVNTDESC = \"LAST TUMOR ASSESSMENT\",     SRCDOM = \"ADRS\",     SRCVAR = \"ADT\"   ) ) # start date censoring (for patients without tumor assessment) (CNSR = 2) # start <- censor_source(   dataset_name = \"adsl\",   date = TRTSDT,   censor = 2,   set_values_to = exprs(     EVNTDESC = \"TREATMENT START\",     SRCDOM = \"ADSL\",     SRCVAR = \"TRTSDT\",     ADTF = TRTSDTF   ) )  # derive time-to-event parameter # adtte <- derive_param_tte(   dataset_adsl = adsl,   source_datasets = list(adsl = adsl, adrs = adrs),   start_date = TRTSDT,   event_conditions = list(pd, death),   censor_conditions = list(lastvisit, start),   set_values_to = exprs(PARAMCD = \"PFS\", PARAM = \"Progression Free Survival\") )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"deriving-a-series-of-time-to-event-parameters","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Deriving a Series of Time-to-Event Parameters","title":"Creating a BDS Time-to-Event ADaM","text":"several similar time--event parameters need derived call_derivation() function useful. following example parameters time first AE, time first serious AE, time first related AE derived. censoring three. definition event differs.","code":"# define censoring # observation_end <- censor_source(   dataset_name = \"adsl\",   date = EOSDT,   censor = 1,   set_values_to = exprs(     EVNTDESC = \"END OF STUDY\",     SRCDOM = \"ADSL\",     SRCVAR = \"EOSDT\"   ) )  # define time to first AE # tt_ae <- event_source(   dataset_name = \"ae\",   date = ASTDT,   set_values_to = exprs(     EVNTDESC = \"ADVERSE EVENT\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\"   ) )  # define time to first serious AE # tt_ser_ae <- event_source(   dataset_name = \"ae\",   filter = AESER == \"Y\",   date = ASTDT,   set_values_to = exprs(     EVNTDESC = \"SERIOUS ADVERSE EVENT\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\"   ) )  # define time to first related AE # tt_rel_ae <- event_source(   dataset_name = \"ae\",   filter = AEREL %in% c(\"PROBABLE\", \"POSSIBLE\", \"REMOTE\"),   date = ASTDT,   set_values_to = exprs(     EVNTDESC = \"RELATED ADVERSE EVENT\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\"   ) )  # derive all three time to event parameters # adaette <- call_derivation(   derivation = derive_param_tte,   variable_params = list(     params(       event_conditions = list(tt_ae),       set_values_to = exprs(PARAMCD = \"TTAE\")     ),     params(       event_conditions = list(tt_ser_ae),       set_values_to = exprs(PARAMCD = \"TTSERAE\")     ),     params(       event_conditions = list(tt_rel_ae),       set_values_to = exprs(PARAMCD = \"TTRELAE\")     )   ),   dataset_adsl = adsl,   source_datasets = list(adsl = adsl, ae = adae),   censor_conditions = list(observation_end) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"deriving-time-to-event-parameters-using-by-groups","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Deriving Time-to-Event Parameters Using By Groups","title":"Creating a BDS Time-to-Event ADaM","text":"time--event parameters need derived group source dataset, by_vars parameter can specified. time--event parameter derived group. Please note CDISC requires separate parameters (PARAMCD, PARAM) groups. Therefore variables specified by_vars parameter included output dataset. PARAMCD variable specified set_value_to parameter using expression right hand side results unique value group. values variables included output dataset, can stored PARCATn variables. following example time--event parameter preferred term AE dataset derived.","code":"View(adsl) View(ae) # define time to first adverse event event # ttae <- event_source(   dataset_name = \"ae\",   date = AESTDT,   set_values_to = exprs(     EVNTDESC = \"AE\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\",     SRCSEQ = AESEQ   ) )  # define censoring at end of study # eos <- censor_source(   dataset_name = \"adsl\",   date = EOSDT,   set_values_to = exprs(     EVNTDESC = \"END OF STUDY\",     SRCDOM = \"ADSL\",     SRCVAR = \"EOSDT\"   ) )  # derive time-to-event parameter # adtte <- derive_param_tte(   dataset_adsl = adsl,   by_vars = exprs(AEDECOD),   start_date = TRTSDT,   event_conditions = list(ttae),   censor_conditions = list(eos),   source_datasets = list(adsl = adsl, ae = ae),   set_values_to = exprs(     PARAMCD = paste0(\"TTAE\", as.numeric(as.factor(AEDECOD))),     PARAM = paste(\"Time to First\", AEDECOD, \"Adverse Event\"),     PARCAT1 = \"TTAE\",     PARCAT2 = AEDECOD   ) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Value (AVAL)","title":"Creating a BDS Time-to-Event ADaM","text":"analysis value (AVAL) can derived calling derive_vars_duration(). example derives time event days. units can requested specifying out_unit parameter.","code":"adtte <- derive_vars_duration(   adtte,   new_var = AVAL,   start_date = STARTDT,   end_date = ADT )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Sequence Number (ASEQ)","title":"Creating a BDS Time-to-Event ADaM","text":"admiral function derive_var_obs_number() can used derive ASEQ:","code":"adtte <- derive_var_obs_number(   adtte,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(PARAMCD),   check_type = \"error\" )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"adslvars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL Variables","title":"Creating a BDS Time-to-Event ADaM","text":"Variables ADSL required time--event analyses, e.g., treatment variables covariates can added using derive_vars_merged().","code":"adtte <- derive_vars_merged(   adtte,   dataset_add = adsl,   new_vars = exprs(ARMCD, ARM, ACTARMCD, ACTARM, AGE, SEX),   by_vars = exprs(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiral/articles/bds_tte.html","id":"attributes","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Labels and Attributes","title":"Creating a BDS Time-to-Event ADaM","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/contribution_model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Contribution to {admiral}","text":"vignette gives overview anticipated contribution model. goal enable users admiral contribute test contribution model admiral. Adjustments might made time. contribution model still testing phase advise contact us issue created via Slack (don’t access, use link join). can discuss details align expectations familiar admiral philosophy programming strategy. team try review issues within next sprint give initial feedback. Since 100% fully resourced software development team might issues take longer respond depending amount overall issues.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/contribution_model.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Contribution to {admiral}","text":"new contribution, user creates issue issue tab GitHub put backlog. Familiarize programming strategy, guidance GitHub usage unit testing. created issues reviewed within next sprint creator receive initial feedback via comment. Someone core development team triage new issues assigning appropriate labels (“user request” can easily identify new requests). Issues meant taken users Pharma programming community exclusively admiral team GSK Roche.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/contribution_model.html","id":"contribution-model","dir":"Articles","previous_headings":"","what":"Contribution Model","title":"Contribution to {admiral}","text":"Type 1 Contribution Code: First, user creates issue comments existing issue notify ’d like contribute code. Follow development process step--step guide. advise contact admiral core development team directly via Slack submitting code complex functionality. Type 2 Contribution without Code: User creates issue ideally contacts admiral team member via Slack. admiral core development team contact issue creator soon possible discuss details.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"what-is-admiral","dir":"Articles","previous_headings":"","what":"What is admiral?","title":"FAQ","text":"block stand alone purpose (function provides specific functionality) Data Scientists can create blocks (create R functions) Constructing ADaM dataset become like building blocks based admiral modular functions user created modular functions.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"why-did-we-decide-to-start-admiral","dir":"Articles","previous_headings":"","what":"Why did we decide to start admiral?","title":"FAQ","text":"Data analysis challenges clinical trials vary depending scientific goals, therapeutic areas, indications, data sources data quality. face challenge limit company-level adoption crowd-sourcing create ADaM datasets? Build ADaMs via collaboration co-creation Early engagement like-minded companies moving towards R lead solution shared open source framework contribution across-industry Building ADaMs like modular building blocks, everyone can contribute module clear input output enable re-usable solutions Users can “slot ” modules address specific company/TA/Molecule/Study requirements TA specific requirements can open sourced transformed common ADaM approach analysis long-term gain consistent way producing ADaM wider community across-industry developers contributing grow codebase cover infinite array possibilities Contributors: option make name Pharma open-source community & avenue collaborate like-minded people across industry Imagine ADaMs built consistent manner code openly maintained functions impact Health Authorities, readable code, QC, talent flow","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"why-did-we-use-r-as-a-programming-language","dir":"Articles","previous_headings":"","what":"Why did we use R as a programming language?","title":"FAQ","text":"R isolated software product, everyone can contribute (open source principal) People University/Statistical talent pipeline likely come R skills rather proprietary language seems strong data science/analytics R community FDA open accepting R submissions heavy users Top line visualization/graphics - R-Shiny interactive data displays also R Markdown offers great report writing functionality R popular among statisticians new statistical methods likely implemented R language might equally suited programming languages - however stage make decision :)","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"why-do-we-use-a-certain-r-version-and-package-versions-for-development","dir":"Articles","previous_headings":"","what":"Why do we use a certain R version and package versions for development?","title":"FAQ","text":"choice R Version set stone. However, common development environment important establish working across multiple companies multiple developers. currently work earliest three latest R Versions. need common development environment also carries choice package versions. GitHub allows us Actions/Workflows test admiral several versions R well several versions dependent R packages needed admiral. Currently test admiral three latest R Versions closest snapshots packages R versions. can view workflow others admiralci GitHub Repository. common development allows us easily re-create bugs provide solutions issues developers encounter. Reviewers Pull Requests running code know environment identical initiator Pull Request. ensures faster review times higher quality Pull Request reviews. achieve common development environment using lockfile created renv package. New developers encounter suggested renv::restore() console revert move forward R version package versions.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"admiral-offers-a-toolbox-of-functions-to-facilitate-adam--what-does-that-mean","dir":"Articles","previous_headings":"","what":"Admiral offers a toolbox of functions to facilitate ADaM. What does that mean?","title":"FAQ","text":"e.g. derive_vars_aage parameterized start end-date unit. Depending parameters results may vary specification. Functions serve toolbox user can create ADaM according requirements. principles, programming strategy documentation admiral considered framework users contribute.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"how-does-a-user-know-what-a-function-does-exactly","dir":"Articles","previous_headings":"","what":"How does a user know what a function does exactly?","title":"FAQ","text":"Function details purpose, requirements, parameters, dependencies examples documented header function. Complex functions potentially vignette admiral homepage provide details. admiral provide link explicit specification define.xml.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"would-admiral-create-a-whole-adam-dataset","dir":"Articles","previous_headings":"","what":"Would {admiral} create a whole ADaM dataset?","title":"FAQ","text":"admiral meant toolbox enable Data Scientists build ADaMs according varying analysis needs admiral meant “click button, comes ADaM” tool admiral webpage, example scripts provided can used starting point create ADaM (see end vignette)","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"in-which-order-does-a-user-need-to-execute-the-functions","dir":"Articles","previous_headings":"","what":"In which order does a user need to execute the functions?","title":"FAQ","text":"Guidance provided ADSL, BDS OCCDS ADaM structure including template scripts.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"is-the-admiral-package-validated","dir":"Articles","previous_headings":"","what":"Is the {admiral} package validated?","title":"FAQ","text":"functions reviewed tested (see provided around function testing?) ensure work described documentation. Test cases function part R package. Users can add tests provide additional feedback. testing admiral team function replace QC validation process company. GitHub action (using open source packages) exists generate validation report R package, option company use. example report using earlier version admiral exists illustration.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"what-will-be-provided-around-function-testing","dir":"Articles","previous_headings":"","what":"What will be provided around function testing?","title":"FAQ","text":"Unit tests reliability function - available part open source release integration testing done ensure functions can called together create ADaM (e.g. even via internal testing teams) validation able use package company-specific SCE GxP purposes associated audit evidence strategy use admiral fits company-specific quality assurance process (double programming comparison versus company-specific legacy ADaM solution appropriate confidence builds) see guidance unit testing","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"will-admiral-provide-harmonized-define-xml-or-submittable-specifications-for-functions","dir":"Articles","previous_headings":"","what":"Will admiral provide harmonized define.xml or submittable specifications for functions?","title":"FAQ","text":". functions documented via programming headers, define.xml responsibility end user. Functions usually generalized specific. (see Admiral offers toolbox functions facilitate ADaM. mean?) users responsible make sure use functions parameters right way ensure alignment define.xml","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"will-admiral-provide-adam-ig-cdisc-compliant-datasets","dir":"Articles","previous_headings":"","what":"Will {admiral} provide ADaM IG CDISC compliant datasets?","title":"FAQ","text":"Although admiral follows CDISC standards claim dataset resulting calling admiral functions ADaM compliant. ensured user.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"how-much-of-the-adam-ig-is-covered-by-admiral","dir":"Articles","previous_headings":"","what":"How much of the ADaM IG is covered by admiral?","title":"FAQ","text":"ADaM IG standard framework without specific number datasets variables, used specific baseline answer question. provide guidance ADaM dataset structure (ADSL, OCCDS BDS) highlight functionality admiral covers. (see order user need execute functions?) guidance also highlight gaps filled user (e.g. timing, ranges). standard ADaM datasets (ADAE, ADCM, …) can provide estimated coverage based early adopters Roche/GSK ADaM implementation","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"will-there-be-a-usercontribution-guide","dir":"Articles","previous_headings":"","what":"Will there be a user/contribution guide?","title":"FAQ","text":"programming strategy serves framework users create functions. Please see contribution model website detailed description contribute","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/faq.html","id":"how-has-admiral-been-tested-externally-to-rochegsk","dir":"Articles","previous_headings":"","what":"How has {admiral} been tested externally to Roche/GSK?","title":"FAQ","text":"Sept/Oct 2021, limited release testing conducted 18 companies (>50 individuals) order assess compatibility admiral toolkit different company standards implementations test usability functions, e.g. clarity, reliability, robustness, flexibility. foundational version admiral achieved 7.9 / 10 average score survey respondents >75% said ’d advocate using admiral ADaM transformations R. “Extremely easy learn get , well thought planned. Plenty minor functions instead aiming create large”jack trades” framework. toolkit attempt become large one-button ADaM generator (fantastic).” “huge advantage Pharma companies common functions common stuff develop. easier authorities foundation ADaM programs. development goes faster every one develop across companies, bug-fixing faster many using package likely find potential bugs.” “huge proponent shared solutions within Pharma. Overall impressed admiral project – design, development, documentation, validation details available teams readily adopt.”","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generic Functions","text":"vignette explains admiral generic functions, believe able re-used sometimes save users create many functions study-specific analysis derivations. re-usable functions give users great flexibility, challenge knowing use . vignette intended help understand differences , thus improving findability function needed task. focus following different sets generic functions: merged functions joined functions extreme functions section , show examples different functions belong sets, don’t list every function offered. Users refer Reference page search example “merged” see full list functions offered respective set, examples shown within function page.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Generic Functions","text":"examples vignette require following packages. example purpose, SDTM datasets {admiral.test} used.","code":"library(admiral) library(admiral.test) library(dplyr, warn.conflicts = FALSE) library(stringr) library(tibble)  data(\"admiral_dm\") data(\"admiral_ds\") data(\"admiral_ex\") data(\"admiral_ae\") dm <- convert_blanks_to_na(admiral_dm) ds <- convert_blanks_to_na(admiral_ds) ex <- convert_blanks_to_na(admiral_ex) ae <- convert_blanks_to_na(admiral_ae)"},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"difference-between-merged-and-joined-functions","dir":"Articles","previous_headings":"","what":"Difference between merged and joined functions","title":"Generic Functions","text":"Firstly, need address question new users … “merged” “joined” functions thing?? Essentially sets functions trying take information additional dataframe (passed dataset_add argument) join original dataframe (passed dataset argument). subtle difference “merged” functions select relevant information additional dataframe adds original dataframe; whilst “joined” functions allow extra filter condition join select relevant information. derive_vars_joined() example, filter conditions can depend variables dataframes; whilst derive_vars_merged() variables additional dataframe can used. Examples shown sections explain difference. principle though, actually achieve every “merged” function result using equivalent “joined” function. However, “joined” functions require much resources (time memory), hence include options users.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"description","dir":"Articles","previous_headings":"merged functions","what":"Description","title":"Generic Functions","text":"explained , simpler set functions joins selects relevant information additional dataframe joins original dataframe. additional dataframe can filtered based user-defined condition passed filter_add argument /(relevant) selecting first last observation group (order mode arguments) joined input dataframe user-specified variables passed by_vars argument. Variables additional dataframe can joined input dataframe can renamed (new_vars argument). dataframe returned function call contains observations variables original dataframe (without filtering applied) additionally variable(s) specified new_var/new_vars additional dataframe. achieved via underlying dplyr::left_join. observations without match additional dataframe new variable(s) set NA. Observations additional dataframe match original dataframe ignored.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"examples","dir":"Articles","previous_headings":"merged functions","what":"Examples","title":"Generic Functions","text":"simple call derive ADSL randomization date (ADSL.RANDDT) intermediate additional dataframe use derive_vars_merged() follows. call return input dataframe variable RANDDT added. Now, example add first treatment datetime (ADSL.TRTSDT), need make use derive_vars_merged() mode order arguments select required observations additional dataframe. Note: filter_add argument shows possible method checking valid doses. call return input dataframe TRTSDT added. Beyond derive_vars_merged(), “merged” functions offer specific common analysis needs. example, shows example using derive_var_merged_exist_flag() adding safety population flag (ADSL.SAFFL). case create new flag variable (new_var argument) based information take additional dataframe tell us certain condition met. groups (by_vars argument) check evaluates TRUE least flag set \"Y\" (whatever user passes true_value argument). Note: extra arguments available patients meet condition. example, set patients EX valid dose \"N\" (false_value) patients observations EX (missing_value). ’s derived variables look dataset. examples “merged” functions derive_vars_merged_lookup() join user-defined lookup table commonly used BDS ADaMs, derive_var_merged_cat() create categorization variable information joined additional dataframe, derive_var_merged_summary() merge summarized values additional dataframe.","code":"# Use DM domain as basis to build ADSL adsl_01 <- dm %>%   select(-DOMAIN)  # Convert disposition character date to numeric date without imputation ds_ext <- derive_vars_dt(   dataset = ds,   dtc = DSSTDTC,   new_vars_prefix = \"DSST\" )  # Join randomization date to ADSL adsl_02 <- adsl_01 %>%   derive_vars_merged(     dataset_add = ds_ext,     filter_add = DSDECOD == \"RANDOMIZED\",     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(RANDDT = DSSTDT)   ) # Convert exposure start date to numeric date without imputation ex_ext <- derive_vars_dt(   dataset = ex,   dtc = EXSTDTC,   new_vars_prefix = \"EXST\" )  # Determine first exposure datetime and add to ADSL adsl_03 <- adsl_02 %>%   derive_vars_merged(     dataset_add = ex_ext,     filter_add = (EXDOSE > 0 | (EXDOSE == 0 & str_detect(EXTRT, \"PLACEBO\"))) & !is.na(EXSTDT),     new_vars = exprs(TRTSDT = EXSTDT),     order = exprs(EXSTDT, EXSEQ),     mode = \"first\",     by_vars = exprs(STUDYID, USUBJID)   ) # Add safety population flag to ADSL adsl_04 <- adsl_03 %>%   derive_var_merged_exist_flag(     dataset_add = ex,     by_vars = exprs(STUDYID, USUBJID),     new_var = SAFFL,     condition = (EXDOSE > 0 | (EXDOSE == 0 & str_detect(EXTRT, \"PLACEBO\"))),     false_value = \"N\",     missing_value = \"N\"   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"description-1","dir":"Articles","previous_headings":"joined functions","what":"Description","title":"Generic Functions","text":"“joined” function remember main difference given additional option filter join, means selection observations add additional dataframe can depend variables original dataframe. , “merged” functions additional dataframe can first filtered based user-defined condition passed filter_add argument. joined input dataframe user-specified variables passed by_vars argument. joined dataframe can restricted filter_join condition, optionally selecting first last observation group (order mode arguments). Finally joined variables additional dataframe can renamed (new_vars argument). illustrate , imagine randomization date example wanted date populated patients randomized within 30 days first treatment. now need check additional DS original ADSL dataframes, possible one step using “merged” functions.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"examples-1","dir":"Articles","previous_headings":"joined functions","what":"Examples","title":"Generic Functions","text":"mentioned randomization date variable (let’s call RAND30DT ) use derive_vars_joined() follows. Now, let’s consider another example derive_vars_joined(). ’ll need additionally use join_vars argument, user needs call variables additional dataframe used filter_join. Note: specified variable exists dataframes, suffix “.join” added variable additional dataframe. case want add datacut flag AE, events occurring including day. case AE original dataframe datacut source additional dataframe needs joined. derive_vars_joined() function also used join original dataframe back , may necessary ’re comparing across different observations. example, shows “nadir” calculation achieved checks worst value prior observation. derive highest severity AE patient occurred post-baseline excluding current AE day. exists function derive_var_joied_exist_flag(), follows similar principle “joined” set explained . can used whenever one set observations “confirms” another set dataframe, .e. flag set observation observation observation meet user-specified criteria.","code":"# Join randomization date to ADSL only for safety population patients adsl_05 <- adsl_04 %>%   derive_vars_joined(     dataset_add = ds_ext,     filter_add = DSDECOD == \"RANDOMIZED\",     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(RAND30DT = DSSTDT),     filter_join = DSSTDT >= TRTSDT - 30   ) # Create a unique datacut day for each patient datacut <- tribble(   ~USUBJID,      ~DCUTDY, ~DCUTFL,   \"01-701-1047\",      25, \"Y\",   \"01-701-1111\",       5, \"Y\" )  # Join datacut flag to AE only for events up to and including this date ae_01 <- ae %>%   derive_vars_joined(     dataset_add = datacut,     by_vars = exprs(USUBJID),     new_vars = exprs(DCUTFL),     join_vars = exprs(DCUTDY),     filter_join = AESTDY <= DCUTDY   ) # Add a numeric version of severity for sorting with severe=1, moderate=2, mild=3 ae_ext <- ae_01 %>%   mutate(TEMP_SEVN = as.integer(factor(AESEV, levels = c(\"SEVERE\", \"MODERATE\", \"MILD\"))))  # Derive nadir severity (AENADSEV) ae_02 <- ae_ext %>%   derive_vars_joined(     dataset_add = ae_ext,     filter_add = AESTDY > 0,     by_vars = exprs(USUBJID),     order = exprs(TEMP_SEVN),     new_vars = exprs(AENADSEV = AESEV),     join_vars = exprs(AESTDY),     filter_join = AESTDY.join < AESTDY,     mode = \"first\",     check_type = \"none\"   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"description-2","dir":"Articles","previous_headings":"extreme functions","what":"Description","title":"Generic Functions","text":"“extreme” functions used finding first last observation (order mode arguments) within group (by_vars argument). can output flag variable, date, new records dependent respective function used derive_var_extreme_flag(), derive_var_extreme_dt() derive_extreme_records() example.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/generic.html","id":"example","dir":"Articles","previous_headings":"extreme functions","what":"Example","title":"Generic Functions","text":"Building case, let’s use derive_var_extreme_flag() now flag earliest observation highest severity per patient. Common examples usage set functions using derive_var_extreme_dt() last known alive date calculation derive_extreme_records() creating derived minimum maximum value records.","code":"# Highest severity flag (AEHSEVFL) ae_03 <- ae_02 %>%   derive_var_extreme_flag(     new_var = AEHSEVFL,     by_vars = exprs(USUBJID),     order = exprs(TEMP_SEVN, AESTDY, AESEQ),     mode = \"first\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/higher_order.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Higher Order Functions","text":"vignette explains advanced options admiral related higher order functions. higher order function function takes another function input. introducing higher order functions, intend give user greater power derivation functions, whilst trying negate need adding additional admiral functions arguments, user needing many separate steps. functions covered : call_derivation(): Call single derivation multiple times arguments fixed across iterations others varying restrict_derivation(): Execute single derivation subset input dataset slice_derivation(): input dataset split slices (subsets) slice single derivation called separately. arguments derivation may vary depending slice.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/higher_order.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Higher Order Functions","text":"examples vignette require following packages. example purpose, ADSL dataset—included admiral—SDTM datasets {admiral.test} used. following code creates minimally viable ADAE dataset used needed following examples.","code":"library(admiral) library(admiral.test) library(dplyr, warn.conflicts = FALSE)  data(\"admiral_adsl\") data(\"admiral_ae\") data(\"admiral_vs\") adsl <- admiral_adsl ae <- convert_blanks_to_na(admiral_ae) vs <- convert_blanks_to_na(admiral_vs) adae <- ae %>%   left_join(adsl, by = c(\"STUDYID\", \"USUBJID\")) %>%   derive_vars_dt(     new_vars_prefix = \"AST\",     dtc = AESTDTC,     highest_imputation = \"M\"   ) %>%   mutate(TRTEMFL = if_else(ASTDT >= TRTSDT, \"Y\", NA_character_))"},{"path":"https://pharmaverse.github.io/admiral/articles/higher_order.html","id":"call-derivation","dir":"Articles","previous_headings":"","what":"Call Derivation","title":"Higher Order Functions","text":"function exists purely convenience save user repeating numerous similar derivation function calls. best used multiple derived variables similar specifications slight variations. example, imagine case parameters BDS ADaM required highest value flag lowest value flag. example achieve without using call_derivation(): example achieve using call_derivation(), different arguments passed using params(): example, can see higher order functions, derivation user supplies name derivation function apply, trailing parentheses required. variable_params used pass list different arguments needed derived variable. advantage higher order function highlighted examples two variable derivations similar needs, case multiple time AE parameters derived one call. Note example relies pre-defined tte_source objects, explained Creating BDS Time--Event ADaM. Developing ADaM scripts way using call_derivation() give following benefits: code becomes efficient readable maintenance eased case specification changes downstream quality checking require less effort","code":"vs_without <- vs %>%   derive_var_extreme_flag(     by_vars = exprs(USUBJID, VSTESTCD),     order = exprs(VSORRES, VSSEQ),     new_var = AHIFL,     mode = \"last\"   ) %>%   derive_var_extreme_flag(     by_vars = exprs(USUBJID, VSTESTCD),     order = exprs(VSORRES, VSSEQ),     new_var = ALOFL,     mode = \"first\"   ) vs_with <- vs %>%   call_derivation(     derivation = derive_var_extreme_flag,     variable_params = list(       params(new_var = AHIFL, mode = \"last\"),       params(new_var = ALOFL, mode = \"first\")     ),     by_vars = exprs(USUBJID, VSTESTCD),     order = exprs(VSORRES, VSSEQ)   ) adaette <- call_derivation(   derivation = derive_param_tte,   variable_params = list(     params(       event_conditions = list(ae_event),       set_values_to = exprs(PARAMCD = \"TTAE\")     ),     params(       event_conditions = list(ae_ser_event),       set_values_to = exprs(PARAMCD = \"TTSERAE\")     ),     params(       event_conditions = list(ae_sev_event),       set_values_to = exprs(PARAMCD = \"TTSEVAE\")     ),     params(       event_conditions = list(ae_wd_event),       set_values_to = exprs(PARAMCD = \"TTWDAE\")     )   ),   dataset_adsl = adsl,   source_datasets = list(adsl = adsl, adae = adae),   censor_conditions = list(lastalive_censor) )"},{"path":"https://pharmaverse.github.io/admiral/articles/higher_order.html","id":"restrict-derivation","dir":"Articles","previous_headings":"","what":"Restrict Derivation","title":"Higher Order Functions","text":"idea behind function sometimes want apply derivation certain records input dataset. Introducing restrict_derivation() therefore gives users ability achieve across function, without function needing argument allow . example wanted flag first occurring AE highest severity patient, wanted records occurring study day 1. achieve using restrict_derivation(), function arguments passed using params() restriction criteria given using filter:","code":"ae <- ae %>%   mutate(TEMP_AESEVN = as.integer(factor(AESEV, levels = c(\"SEVERE\", \"MODERATE\", \"MILD\")))) %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       new_var = AHSEVFL,       by_vars = exprs(USUBJID),       order = exprs(TEMP_AESEVN, AESTDY, AESEQ),       mode = \"first\"     ),     filter = AESTDY >= 1   )"},{"path":"https://pharmaverse.github.io/admiral/articles/higher_order.html","id":"slice-derivation","dir":"Articles","previous_headings":"","what":"Slice Derivation","title":"Higher Order Functions","text":"function way combines features two. allows single derivation applied different arguments different slices (subsets) records input dataset. separate restrict_derivation() calls different set records, slice_derivation() allows achieve one call. example wanted achieve derivation records occurring study day 1, pre-treatment AEs wanted flag last occurring AE. achieve using slice_derivation(), function arguments passed using params() via different slices controlled filter: can see example, derivation_slice ordering important. addressed AEs study day 1 first, used filter = TRUE option catch remaining records (case pre-treatment AEs). ordering perhaps shown even look example three slices taken. Remember observations match one slice considered first matching slice. case ’re creating flag patient record first severe AE, first moderate AE, finally flagging last occurring AE severe moderate. order important slices mutually exclusive, case moderate AE slice severe AE slice, example, difference result. However third slice come last check remaining (.e. severe moderate) records .","code":"ae <- ae %>%   slice_derivation(     derivation = derive_var_extreme_flag,     args = params(       new_var = AHSEV2FL,       by_vars = exprs(USUBJID)     ),     derivation_slice(       filter = AESTDY >= 1,       args = params(order = exprs(TEMP_AESEVN, AESTDY, AESEQ), mode = \"first\")     ),     derivation_slice(       filter = TRUE,       args = params(order = exprs(AESTDY, AESEQ), mode = \"last\")     )   ) ae <- ae %>%   slice_derivation(     derivation = derive_var_extreme_flag,     args = params(       new_var = AHSEV3FL,       by_vars = exprs(USUBJID)     ),     derivation_slice(       filter = AESEV == \"SEVERE\",       args = params(order = exprs(AESTDY, AESEQ), mode = \"first\")     ),     derivation_slice(       filter = AESEV == \"MODERATE\",       args = params(order = exprs(AESTDY, AESEQ), mode = \"first\")     ),     derivation_slice(       filter = TRUE,       args = params(order = exprs(AESTDY, AESEQ), mode = \"last\")     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Hy's Law Implementation","text":"drug development process, clinical trials often required assess potential experimental drug can cause severe liver injury, known drug induced liver injury (DILI). multiple criteria need evaluated determine classify DILI “Event”. Hy’s Law, common rule thumb DILI Event , usually comprised three parts: Elevated alanine aminotransferase (ALT) aspartate aminotransferase (AST) 3-times greater upper limit normal. Elevated serum total bilirubin (BILI) 2-times greater within window time, ~14 days elevated ALT/AST event. reason explain increased lab values like preexisting liver disease.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Hy's Law Implementation","text":"examples vignette require following packages.","code":"library(admiral) library(dplyr, warn.conflicts = FALSE)"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Hy's Law Implementation","text":"Read Data Flagging Elevated Values (CRITy, CRITyFL) Subsetting LBTESTCD Joining Potential Events Create New Parameters Rows Conclusion","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Hy's Law Implementation","text":"assume ADLB dataset available 1. First read ADLB parameters required Hy’s Law parameters:","code":"data(admiral_adlb) adlb <- admiral_adlb %>%   filter(PARAMCD %in% c(\"AST\", \"ALT\", \"BILI\") & is.na(DTYPE))"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"columns","dir":"Articles","previous_headings":"Programming Workflow","what":"Flagging Elevated Values (CRITy, CRITyFL)","title":"Hy's Law Implementation","text":"standard convention ADLBHY datasets, various CRITy CRITyFL columns describe conditions necessary reach particular criterion Hy’s Law actual flag indicate whether condition reached. Using mutate(), call_derivation() derive_var_merged_exist_flag(), can create columns indicate 3-fold greater upper limit normal ALT/AST 2-fold greater upper limit normal BILI. increase visibility simplicity, retain columns relevant Hy’s Law analysis now.","code":"adlb_annotated <- adlb %>%   mutate(     CRIT1 = case_when(       PARAMCD == \"AST\" ~ \"AST >=3xULN\",       PARAMCD == \"ALT\" ~ \"ALT >=3xULN\",       PARAMCD == \"BILI\" ~ \"BILI >=2xULN\"     ),     CRIT1FL = if_else(       (AVAL / ANRHI >= 3 & PARAMCD %in% c(\"AST\", \"ALT\")) |         (AVAL / ANRHI >= 2 & PARAMCD == \"BILI\"),       \"Y\",       NA_character_     )   ) %>%   select(STUDYID, USUBJID, TRT01A, PARAMCD, LBSEQ, ADT, AVISIT, ADY, AVAL, ANRHI, CRIT1, CRIT1FL)"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"joins","dir":"Articles","previous_headings":"Programming Workflow","what":"Subsetting by LBTESTCD and Joining by Potential Events","title":"Hy's Law Implementation","text":"elevated ALT/AST event reaches threshold Hy’s Law, need search elevated BILI events within certain time-window, usually 14 days elevated ALT/AST event (window may vary organization). , Splitting dataset ALT/AST BILI subsets, respectively, Joining two datasets using derive_vars_joined() using filter_join argument join together relevant flagged BILI records corresponding flagged ALT/AST record (prior 14 days may vary trial/organization) indicate potential Hy’s Law event, resulting dataset helpful deriving additional parameters. dataset may also prove useful listing display two lab-records one row showcase potential event.","code":"altast_records <- adlb_annotated %>%   filter(PARAMCD %in% c(\"AST\", \"ALT\"))  bili_records <- adlb_annotated %>%   filter(PARAMCD %in% c(\"BILI\"))  hylaw_records <- derive_vars_joined(   dataset = altast_records,   dataset_add = bili_records,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(ADY),   filter_join = 0 <= ADT.join - ADT & ADT.join - ADT <= 14 & CRIT1FL == \"Y\" & CRIT1FL.join == \"Y\",   new_vars = exprs(BILI_DT = ADT, BILI_CRITFL = CRIT1FL),   mode = \"first\" )"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"newparams","dir":"Articles","previous_headings":"Programming Workflow","what":"How to Create New Parameters and Rows","title":"Hy's Law Implementation","text":"Using derive_param_exist_flag() can create variety parameters final dataset AVAL = 1/0 specific Hy’s Law analysis. example indicate potential Hy’s Law event, PARAMCD set \"HYSLAW\" PARAM set \"ALT/AST >= 3xULN BILI >= 2xULN\" patient using flags prior dataset. method allows flexibility well, parameters visit desired, add AVISIT ADT select() subject_keys lines denoted following code. Additional modifications can made : Parameter indicate worsening condition sort baseline/post-baseline based analysis Flags lab values like ALP modified last step binding rows back whatever previous dataset appropriate based data specifications, case, best suited bind back adlb_annotated object.","code":"hylaw_records_pts_visits <- hylaw_records %>%   select(STUDYID, USUBJID, TRT01A) %>% # add AVISIT, ADT for by visit   distinct()  hylaw_records_fls <- hylaw_records %>%   select(STUDYID, USUBJID, TRT01A, CRIT1FL, BILI_CRITFL) %>% # add AVISIT, ADT for by visit   distinct()  hylaw_params <- derive_param_exist_flag(   dataset_adsl = hylaw_records_pts_visits,   dataset_add = hylaw_records_fls,   condition = CRIT1FL == \"Y\" & BILI_CRITFL == \"Y\",   false_value = \"N\",   missing_value = \"N\",   subject_keys = exprs(STUDYID, USUBJID, TRT01A), # add AVISIT, ADT for by visit   set_values_to = exprs(     PARAMCD = \"HYSLAW\",     PARAM = \"ALT/AST >= 3xULN and BILI >= 2xULN\"   ) )"},{"path":"https://pharmaverse.github.io/admiral/articles/hys_law.html","id":"conclusion","dir":"Articles","previous_headings":"Programming Workflow","what":"Conclusion","title":"Hy's Law Implementation","text":"demonstrated base-case may asked trial programmer. reality Hy’s Law assessing potential DILI events can get rather complex quite quickly. Differences assessment across organizations specific trials might require modifications, may include: additional CRITy CRITyFL columns different cutoffs like 5xULN, 10xULN, 20xULN checking elevated values additional labs like alkaline phosphatase (ALP) appearance certain adverse events associated elevated lab-values different criteria cutoffs depend baseline values characteristics parameters worsening condition hope demonstrating flexibility admiral functions using general workflow create necessary parameters ADLBHY, creating final dataset becomes simplified easily scalable. Ideally, ready organization’s standard macros previous code TLFs outputs well. first attempt breaking summarizing topic. welcome feedback ideas improve guide!","code":"adlbhy <- adlb_annotated %>%   bind_rows(hylaw_params)"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Date and Time Imputation","text":"Date time collected SDTM character values using extended ISO 8601 format. example, \"2019-10-9T13:42:00\". allows parts date time missing, e.g., \"2019-10\" day time unknown. ADaM timing variables like ADTM (Analysis Datetime) ADY (Analysis Relative Day) numeric variables. can derived date datetime complete. Therefore admiral provides imputation functions fill missing date time parts according certain imputation rules. {admiral} use two functions derive_vars_dt() derive_vars_dtm() date datetime imputations respectively. functions dates can passed argument, expect full dates datetimes (unless otherwise specified), possibility partials functions used first step make required imputation.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Date and Time Imputation","text":"examples vignette require following packages.","code":"library(admiral) library(lubridate) library(tibble) library(dplyr, warn.conflicts = FALSE)"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"imputation-rules","dir":"Articles","previous_headings":"","what":"Imputation Rules","title":"Date and Time Imputation","text":"{admiral} don’t allow users pick single part date/time impute, enable impute highest level, .e. couldn’t choose say impute months, days. simplest imputation rule set missing parts fixed value. example Sometimes work result invalid dates, e.g., Therefore keywords \"first\" \"last\" can specified request missing parts replaced first last possible value: dates, additional option use keyword \"mid\" impute missing day 15 missing day month 06-30, note different behavior depending preserve argument case month missing: wanted achieve similar result replacing missing part date fixed value 06-15, also possible, note difference days cases month missing:","code":"impute_dtc_dtm(   \"2019-10\",   highest_imputation = \"M\",   date_imputation = \"01-01\",   time_imputation = \"00:00:00\" ) #> [1] \"2019-10-01T00:00:00\" impute_dtc_dtm(   \"2019-02\",   highest_imputation = \"M\",   date_imputation = \"02-31\",   time_imputation = \"00:00:00\" ) #> [1] \"2019-02-31T00:00:00\" impute_dtc_dtm(   \"2019-02\",   highest_imputation = \"M\",   date_imputation = \"last\",   time_imputation = \"00:00:00\" ) #> [1] \"2019-02-28T00:00:00\" dates <- c(   \"2019-02\",   \"2019\",   \"2019---01\" ) impute_dtc_dtm(   dates,   highest_imputation = \"M\",   date_imputation = \"mid\",   time_imputation = \"00:00:00\",   preserve = FALSE ) #> [1] \"2019-02-15T00:00:00\" \"2019-06-30T00:00:00\" \"2019-06-30T00:00:00\" impute_dtc_dtm(   dates,   highest_imputation = \"M\",   date_imputation = \"mid\",   time_imputation = \"00:00:00\",   preserve = TRUE ) #> [1] \"2019-02-15T00:00:00\" \"2019-06-30T00:00:00\" \"2019-06-01T00:00:00\" dates <- c(   \"2019-02\",   \"2019\",   \"2019---01\" ) impute_dtc_dtm(   dates,   highest_imputation = \"M\",   date_imputation = \"06-15\",   time_imputation = \"00:00:00\" ) #> [1] \"2019-02-15T00:00:00\" \"2019-06-15T00:00:00\" \"2019-06-15T00:00:00\""},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"imputation-level","dir":"Articles","previous_headings":"Imputation Rules","what":"Imputation Level","title":"Date and Time Imputation","text":"imputation level, .e., components imputed missing, controlled highest_imputation argument. components specified level imputed. imputation years (highest_imputation = \"Y\") see next section.","code":"dates <- c(   \"2019-02-03T12:30:15\",   \"2019-02-03T12:30\",   \"2019-02-03\",   \"2019-02\",   \"2019\" )  # Do not impute impute_dtc_dtm(   dates,   highest_imputation = \"n\" ) #> [1] \"2019-02-03T12:30:15\" NA                    NA                    #> [4] NA                    NA  # Impute seconds only impute_dtc_dtm(   dates,   highest_imputation = \"s\" ) #> [1] \"2019-02-03T12:30:15\" \"2019-02-03T12:30:00\" NA                    #> [4] NA                    NA  # Impute time (hours, minutes, seconds) only impute_dtc_dtm(   dates,   highest_imputation = \"h\" ) #> [1] \"2019-02-03T12:30:15\" \"2019-02-03T12:30:00\" \"2019-02-03T00:00:00\" #> [4] NA                    NA  # Impute days and time impute_dtc_dtm(   dates,   highest_imputation = \"D\" ) #> [1] \"2019-02-03T12:30:15\" \"2019-02-03T12:30:00\" \"2019-02-03T00:00:00\" #> [4] \"2019-02-01T00:00:00\" NA  # Impute date (months and days) and time impute_dtc_dtm(   dates,   highest_imputation = \"M\" ) #> [1] \"2019-02-03T12:30:15\" \"2019-02-03T12:30:00\" \"2019-02-03T00:00:00\" #> [4] \"2019-02-01T00:00:00\" \"2019-01-01T00:00:00\""},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"minimummaximum-dates","dir":"Articles","previous_headings":"Imputation Rules","what":"Minimum/Maximum Dates","title":"Date and Time Imputation","text":"scenarios imputed date certain dates. example imputed date data cut date death date desirable. admiral imputation functions provide min_dates max_dates argument specify dates. example: ensured imputed date specified dates. dates range possible dates dtc value considered. possible dates defined missing parts dtc date, .e., “2019-02” possible dates range “2019-02-01” “2019-02-28”. Thus “2019-01-14” ignored. ensures non-missing parts dtc date changed. min_dates max_dates argument specified, also possible impute completely missing dates. date_imputation = \"first\" min_dates argument must specified date_imputation = \"last\" max_dates argument. imputation rules imputing year possible.","code":"impute_dtc_dtm(   \"2019-02\",   highest_imputation = \"M\",   date_imputation = \"last\",   time_imputation = \"last\",   max_dates = list(ymd(\"2019-01-14\"), ymd(\"2019-02-25\")) ) #> [1] \"2019-02-25T23:59:59\" # Impute year to first impute_dtc_dtm(   c(\"2019-02\", NA),   highest_imputation = \"Y\",   min_dates = list(     ymd(\"2019-01-14\", NA),     ymd(\"2019-02-25\", \"2020-01-01\")   ) ) #> [1] \"2019-02-25T00:00:00\" \"2020-01-01T00:00:00\"  # Impute year to last impute_dtc_dtm(   c(\"2019-02\", NA),   highest_imputation = \"Y\",   date_imputation = \"last\",   time_imputation = \"last\",   max_dates = list(     ymd(\"2019-01-14\", NA),     ymd(\"2019-02-25\", \"2020-01-01\")   ) ) #> [1] \"2019-02-25T23:59:59\" \"2020-01-01T23:59:59\""},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"imputation-flags","dir":"Articles","previous_headings":"","what":"Imputation Flags","title":"Date and Time Imputation","text":"ADaM requires date datetime variables imputation used accompanied date /time imputation flag variables (*DTF *TMF, e.g., ADTF ATMF ADTM). variables indicate highest level imputed, e.g., minutes seconds imputed, imputation flag set \"M\". admiral functions derive imputed variables also adding corresponding imputation flag variables. Note: admiral datetime imputation function provides ignore_seconds_flag argument can set TRUE cases seconds never collected. due following ADaM IG: given SDTM DTC variable, hours minutes ever collected, seconds imputed *DTM 00, necessary set *TMF \"S\".","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"imputation-functions","dir":"Articles","previous_headings":"","what":"Imputation Functions","title":"Date and Time Imputation","text":"admiral provides following functions imputation: derive_vars_dt(): Adds date variable date imputation flag variable (optional) based –DTC variable imputation rules. derive_vars_dtm(): Adds datetime variable, date imputation flag variable, time imputation flag variable (optional) based –DTC variable imputation rules. impute_dtc_dtm(): Returns complete ISO 8601 datetime NA based partial ISO 8601 datetime imputation rules. impute_dtc_dt(): Returns complete ISO 8601 date (without time) NA based partial ISO 8601 date(time) imputation rules. convert_dtc_to_dt(): Returns date input ISO 8601 date complete. Otherwise, NA returned. convert_dtc_to_dtm(): Returns datetime input ISO 8601 date complete (missing time replaced \"00:00:00\" default). Otherwise, NA returned. compute_dtf(): Returns date imputation flag. compute_tmf(): Returns time imputation flag.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"create-an-imputed-datetime-and-date-variable-and-imputation-flag-variables","dir":"Articles","previous_headings":"Examples","what":"Create an Imputed Datetime and Date Variable and Imputation Flag Variables","title":"Date and Time Imputation","text":"derive_vars_dtm() function derives imputed datetime variable corresponding date time imputation flags. imputed date variable can derived using derive_vars_dtm_to_dt() function. necessary advisable perform imputation date variable already done datetime variable. CDISC considers datetime date variable two representations date. Thus imputation must imputation flags valid datetime date variable.","code":"ae <- tribble(   ~AESTDTC,   \"2019-08-09T12:34:56\",   \"2019-04-12\",   \"2010-09\",   NA_character_ ) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\",     date_imputation = \"first\",     time_imputation = \"first\"   ) %>%   derive_vars_dtm_to_dt(exprs(ASTDTM))"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"create-an-imputed-date-variable-and-imputation-flag-variable","dir":"Articles","previous_headings":"Examples","what":"Create an Imputed Date Variable and Imputation Flag Variable","title":"Date and Time Imputation","text":"imputed date variable without corresponding datetime variable required, can derived derive_vars_dt() function.","code":"ae <- tribble(   ~AESTDTC,   \"2019-08-09T12:34:56\",   \"2019-04-12\",   \"2010-09\",   NA_character_ ) %>%   derive_vars_dt(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\",     date_imputation = \"first\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"impute-time-without-imputing-date","dir":"Articles","previous_headings":"Examples","what":"Impute Time without Imputing Date","title":"Date and Time Imputation","text":"time imputed date, highest_imputation argument set \"h\". results NA date partial. date imputed date imputation flag created.","code":"ae <- tribble(   ~AESTDTC,   \"2019-08-09T12:34:56\",   \"2019-04-12\",   \"2010-09\",   NA_character_ ) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"h\",     time_imputation = \"first\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"avoid-imputed-dates-before-a-particular-date","dir":"Articles","previous_headings":"Examples","what":"Avoid Imputed Dates Before a Particular Date","title":"Date and Time Imputation","text":"Usually adverse event start date imputed earliest date possible dates filling missing parts. result may date treatment start date. desirable adverse event considered treatment emergent excluded adverse event summaries. can avoided specifying treatment start date variable (TRTSDTM) min_dates argument. Please note TRTSDTM used imputed date non missing date time parts AESTDTC coincide TRTSDTM. Therefore 2019-10 imputed 2019-11-11 12:34:56. ensures collected information changed imputation.","code":"ae <- tribble(   ~AESTDTC,              ~TRTSDTM,   \"2019-08-09T12:34:56\", ymd_hms(\"2019-11-11T12:34:56\"),   \"2019-10\",             ymd_hms(\"2019-11-11T12:34:56\"),   \"2019-11\",             ymd_hms(\"2019-11-11T12:34:56\"),   \"2019-12-04\",          ymd_hms(\"2019-11-11T12:34:56\") ) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\",     date_imputation = \"first\",     time_imputation = \"first\",     min_dates = exprs(TRTSDTM)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"avoid-imputed-dates-after-a-particular-date","dir":"Articles","previous_headings":"Examples","what":"Avoid Imputed Dates After a Particular Date","title":"Date and Time Imputation","text":"date imputed latest date possible dates filling missing parts, result dates data cut death. can achieved specifying dates max_dates argument. Please note non missing date parts changed. Thus 2019-12-04 imputed 2019-12-04 23:59:59 although data cut date. may make sense replace data cut date part imputation. done separate data cleaning data cut step.","code":"ae <- tribble(   ~AEENDTC,              ~DTHDT,            ~DCUTDT,   \"2019-08-09T12:34:56\", ymd(\"2019-11-11\"), ymd(\"2019-12-02\"),   \"2019-11\",             ymd(\"2019-11-11\"), ymd(\"2019-12-02\"),   \"2019-12\",             NA,                ymd(\"2019-12-02\"),   \"2019-12-04\",          NA,                ymd(\"2019-12-02\") ) %>%   derive_vars_dtm(     dtc = AEENDTC,     new_vars_prefix = \"AEN\",     highest_imputation = \"M\",     date_imputation = \"last\",     time_imputation = \"last\",     max_dates = exprs(DTHDT, DCUTDT)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"imputation-without-creating-a-new-variable","dir":"Articles","previous_headings":"Examples","what":"Imputation Without Creating a New Variable","title":"Date and Time Imputation","text":"imputation required without creating new variable convert_dtc_to_dt() function can called obtain vector imputed dates. can used example conditions:","code":"mh <- tribble(   ~MHSTDTC,     ~TRTSDT,   \"2019-04\",    ymd(\"2019-04-15\"),   \"2019-04-01\", ymd(\"2019-04-15\"),   \"2019-05\",    ymd(\"2019-04-15\"),   \"2019-06-21\", ymd(\"2019-04-15\") ) %>%   filter(     convert_dtc_to_dt(       MHSTDTC,       highest_imputation = \"M\",       date_imputation = \"first\"     ) < TRTSDT   )"},{"path":"https://pharmaverse.github.io/admiral/articles/imputation.html","id":"using-more-than-one-imputation-rule-for-a-variable","dir":"Articles","previous_headings":"Examples","what":"Using More Than One Imputation Rule for a Variable","title":"Date and Time Imputation","text":"Using different imputation rules depending observation can done using slice_derivation().","code":"vs <- tribble(   ~VSDTC,                ~VSTPT,   \"2019-08-09T12:34:56\", NA,   \"2019-10-12\",          \"PRE-DOSE\",   \"2019-11-10\",          NA,   \"2019-12-04\",          NA ) %>%   slice_derivation(     derivation = derive_vars_dtm,     args = params(       dtc = VSDTC,       new_vars_prefix = \"A\"     ),     derivation_slice(       filter = VSTPT == \"PRE-DOSE\",       args = params(time_imputation = \"first\")     ),     derivation_slice(       filter = TRUE,       args = params(time_imputation = \"last\")     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Lab Grading","text":"Within ADLB ADaM data set concept lab grading, set criteria particular lab tests grade severity abnormality lab value. grades 0 4, grade 0 can viewed generally “NORMAL” value. higher grade severe abnormal lab value . several sets lab grading criteria, currently admiral implemented NCI-CTCAEv4 NCI-CTCAEv5 grading criteria. future releases admiral may look implement grading criteria. NCI-CTCAE version 4 5 grading criteria can found : https://ctep.cancer.gov/protocoldevelopment/electronic_applications/ctc.htm . NCI-CTCAEv4 criteria can found heading Common Terminology Criteria Adverse Events (CTCAE)v4.0 NCI-CTCAEv5 criteria can found heading Common Terminology Criteria Adverse Events (CTCAE)v5.0","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"grading-metadata","dir":"Articles","previous_headings":"","what":"Grading metadata","title":"Lab Grading","text":"admiral store metadata data set required variables optional variables, optional variables purely transparency, contain detailed information grading criteria. required variables used admiral create grade.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"structure-of-metadata-set","dir":"Articles","previous_headings":"Grading metadata","what":"Structure of metadata set","title":"Lab Grading","text":"metadata data set following structure required variables: metadata data set following structure optional variables:","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"mapping-adlb-vad-to-the-term-variable-in-the-admiral-metadata-data-set","dir":"Articles","previous_headings":"Creating the lab grade","what":"Mapping ADLB VAD to the TERM variable in the {admiral} metadata data set","title":"Lab Grading","text":"company needs map lab test term describes criteria applied. list terms defined admiral metadata implement NCI-CTCAEv4 :  Likewise, list terms defined admiral metadata implement NCI-CTCAEv5 : (Terms identical NCI-CTCAEv4, except Hyperglycemia, Hyperglycemia (Fasting) Hypophosphatemia) present NCI-CTCAEv5. Using CDISC data lab tests can mapped correct terms, firstly create PARAMCD, PARAM, AVAL, ANRLO ANRHI, also lab grading criteria require BASE PCHG, also need created running derive_var_atoxgr_dir() function. Another look-table used add ATOXDSCL ATOXDSCH using PARAMCD. ATOXDSCL holds terms grading low lab values, ATOXDSCH holds terms grading high lab values. names variables can user-defined. ATOXDSCL ATOXDSCH link ADLB data admiral metadata holds grading criteria. now straightforward create grade, low lab values grade held ATOXGRL high lab values grade held ATOXGRH. Note: NCICTCAEv5 grading, update meta_criteria parameter atoxgr_criteria_ctcv5. Note: admiral grade ‘Anemia’ ‘Hemoglobin Increased’ metadata based SI unit ‘g/L’, however CDISC data SI unit ‘mmol/L’. Please see SI_UNIT_CHECK variable admiral metadata atoxgr_criteria_ctcv4 atoxgr_criteria_ctcv5, metadata data folder admiral.  admiral also gives option combine ATOXGRL ATOXGRH one variable, namely ATOXGR. Grades held ATOXGRL given negative value ATOXGR distinguish low high values.","code":"library(admiral) library(admiral.test) library(dplyr, warn.conflicts = FALSE) library(stringr) library(tibble)  data(\"admiral_lb\")  adsl <- admiral_adsl lb <- convert_blanks_to_na(admiral_lb) # Look-up tables ----  # Assign PARAMCD, PARAM, and PARAMN param_lookup <- tibble::tribble(   ~LBTESTCD, ~PARAMCD,  ~PARAM,                                             ~PARAMN,   \"ALB\",     \"ALB\",     \"Albumin (g/L)\",                                    1,   \"ALP\",     \"ALKPH\",   \"Alkaline Phosphatase (U/L)\",                       2,   \"ALT\",     \"ALT\",     \"Alanine Aminotransferase (U/L)\",                   3,   \"ANISO\",   \"ANISO\",   \"Anisocytes\",                                       4,   \"AST\",     \"AST\",     \"Aspartate Aminotransferase (U/L)\",                 5,   \"BASO\",    \"BASO\",    \"Basophils (10^9/L)\",                               6,   \"BASOLE\",  \"BASOLE\",  \"Basophils/Leukocytes (FRACTION)\",                  7,   \"BILI\",    \"BILI\",    \"Bilirubin (umol/L)\",                               8,   \"BUN\",     \"BUN\",     \"Blood Urea Nitrogen (mmol/L)\",                     9,   \"CA\",      \"CA\",      \"Calcium (mmol/L)\",                                 10,   \"CHOL\",    \"CHOLES\",  \"Cholesterol (mmol/L)\",                             11,   \"CK\",      \"CK\",      \"Creatinine Kinase (U/L)\",                          12,   \"CL\",      \"CL\",      \"Chloride (mmol/L)\",                                13,   \"COLOR\",   \"COLOR\",   \"Color\",                                            14,   \"CREAT\",   \"CREAT\",   \"Creatinine (umol/L)\",                              15,   \"EOS\",     \"EOS\",     \"Eosinophils (10^9/L)\",                             16,   \"EOSLE\",   \"EOSLE\",   \"Eosinophils/Leukocytes (FRACTION)\",                17,   \"GGT\",     \"GGT\",     \"Gamma Glutamyl Transferase (U/L)\",                 18,   \"GLUC\",    \"GLUC\",    \"Glucose (mmol/L)\",                                 19,   \"HBA1C\",   \"HBA1C\",   \"Hemoglobin A1C (1)\",                               20,   \"HCT\",     \"HCT\",     \"Hematocrit (1)\",                                   21,   \"HGB\",     \"HGB\",     \"Hemoglobin (mmol/L)\",                              22,   \"K\",       \"POTAS\",   \"Potassium (mmol/L)\",                               23,   \"KETONES\", \"KETON\",   \"Ketones\",                                          24,   \"LYM\",     \"LYMPH\",   \"Lymphocytes (10^9/L)\",                             25,   \"LYMLE\",   \"LYMPHLE\", \"Lymphocytes/Leukocytes (FRACTION)\",                26,   \"MACROCY\", \"MACROC\",  \"Macrocytes\",                                       27,   \"MCH\",     \"MCH\",     \"Ery. Mean Corpuscular Hemoglobin (fmol(Fe))\",      28,   \"MCHC\",    \"MCHC\",    \"Ery. Mean Corpuscular HGB Concentration (mmol/L)\", 29,   \"MCV\",     \"MCV\",     \"Ery. Mean Corpuscular Volume (f/L)\",               30,   \"MICROCY\", \"MICROC\",  \"Microcytes\",                                       31,   \"MONO\",    \"MONO\",    \"Monocytes (10^9/L)\",                               32,   \"MONOLE\",  \"MONOLE\",  \"Monocytes/Leukocytes (FRACTION)\",                  33,   \"PH\",      \"PH\",      \"pH\",                                               34,   \"PHOS\",    \"PHOS\",    \"Phosphate (mmol/L)\",                               35,   \"PLAT\",    \"PLAT\",    \"Platelet (10^9/L)\",                                36,   \"POIKILO\", \"POIKIL\",  \"Poikilocytes\",                                     37,   \"POLYCHR\", \"POLYCH\",  \"Polychromasia\",                                    38,   \"PROT\",    \"PROT\",    \"Protein (g/L)\",                                    39,   \"RBC\",     \"RBC\",     \"Erythrocytes (TI/L)\",                              40,   \"SODIUM\",  \"SODIUM\",  \"Sodium (mmol/L)\",                                  41,   \"SPGRAV\",  \"SPGRAV\",  \"Specific Gravity\",                                 42,   \"TSH\",     \"TSH\",     \"Thyrotropin (mU/L)\",                               43,   \"URATE\",   \"URATE\",   \"Urate (umol/L)\",                                   44,   \"UROBIL\",  \"UROBIL\",  \"Urobilinogen\",                                     45,   \"VITB12\",  \"VITB12\",  \"Vitamin B12 (pmol/L)\",                             46,   \"WBC\",     \"WBC\",     \"Leukocytes (10^9/L)\",                              47 )  adlb <- lb %>%   ## Add PARAMCD PARAM and PARAMN - from LOOK-UP table   derive_vars_merged_lookup(     dataset_add = param_lookup,     new_vars = exprs(PARAMCD, PARAM, PARAMN),     by_vars = exprs(LBTESTCD)   ) %>%   ## Calculate PARCAT1 AVAL AVALC ANRLO ANRHI   ## Dummy the values for BASE   mutate(     PARCAT1 = LBCAT,     AVAL = LBSTRESN,     AVALC = LBSTRESC,     ANRLO = LBSTNRLO,     ANRHI = LBSTNRHI,     BASE = AVAL - 10   ) #> All `LBTESTCD` are mapped. # Assign ATOXDSCL and ATOXDSCH to hold lab grading terms # ATOXDSCL and ATOXDSCH hold terms defined by NCI-CTCAEv4. grade_lookup <- tibble::tribble(   ~PARAMCD, ~ATOXDSCL,                    ~ATOXDSCH,   \"ALB\",    \"Hypoalbuminemia\",            NA_character_,   \"ALKPH\",  NA_character_,                \"Alkaline phosphatase increased\",   \"ALT\",    NA_character_,                \"Alanine aminotransferase increased\",   \"AST\",    NA_character_,                \"Aspartate aminotransferase increased\",   \"BILI\",   NA_character_,                \"Blood bilirubin increased\",   \"CA\",     \"Hypocalcemia\",               \"Hypercalcemia\",   \"CHOLES\", NA_character_,                \"Cholesterol high\",   \"CK\",     NA_character_,                \"CPK increased\",   \"CREAT\",  NA_character_,                \"Creatinine increased\",   \"GGT\",    NA_character_,                \"GGT increased\",   \"GLUC\",   \"Hypoglycemia\",               \"Hyperglycemia\",   \"HGB\",    \"Anemia\",                     \"Hemoglobin increased\",   \"POTAS\",  \"Hypokalemia\",                \"Hyperkalemia\",   \"LYMPH\",  \"CD4 lymphocytes decreased\",  NA_character_,   \"PHOS\",   \"Hypophosphatemia\",           NA_character_,   \"PLAT\",   \"Platelet count decreased\",   NA_character_,   \"SODIUM\", \"Hyponatremia\",               \"Hypernatremia\",   \"WBC\",    \"White blood cell decreased\", \"Leukocytosis\", )  adlb <- adlb %>%   derive_vars_merged(     dataset_add = grade_lookup,     by_vars = exprs(PARAMCD),   ) adlb <- adlb %>%   derive_var_atoxgr_dir(     new_var = ATOXGRL,     tox_description_var = ATOXDSCL,     meta_criteria = atoxgr_criteria_ctcv4,     criteria_direction = \"L\",     get_unit_expr = extract_unit(PARAM)   ) %>%   derive_var_atoxgr_dir(     new_var = ATOXGRH,     tox_description_var = ATOXDSCH,     meta_criteria = atoxgr_criteria_ctcv4,     criteria_direction = \"H\",     get_unit_expr = extract_unit(PARAM)   ) adlb <- adlb %>%   derive_var_atoxgr()"},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"terms-graded","dir":"Articles","previous_headings":"NCI-CTCAEV4 implementation","what":"Terms graded","title":"Lab Grading","text":"Grading implemented lab tests lab value included grading definition, admiral try read data determine grade, ADLB VAD used. following CTCAE v4.0 SOC values identified grading, “Investigations”, “Metabolism nutrition disorders” “Blood lymphatic system disorders”. SOC values following terms criteria implemented admiral SOC = “Investigations” 21 CTCAE v4.0 Terms: Activated partial thromboplastin time prolonged Alanine aminotransferase increased Alkaline phosphatase increased Aspartate aminotransferase increased Blood bilirubin increased CD4 lymphocytes decreased Cholesterol high CPK increased Creatinine increased Fibrinogen decreased GGT increased Haptoglobin decreased Hemoglobin increased INR increased Lipase increased Lymphocyte count decreased Lymphocyte count increased Neutrophil count decreased Platelet count decreased Serum amylase increased White blood cell decreased SOC = “Metabolism nutrition disorders” 14 CTCAE v4.0 Terms: Hypercalcemia Hyperglycemia Hyperkalemia Hypermagnesemia Hypernatremia Hypertriglyceridemia Hyperuricemia Hypoalbuminemia Hypocalcemia Hypoglycemia Hypokalemia Hypomagnesemia Hyponatremia Hypophosphatemia SOC = “Blood lymphatic system disorders” 2 CTCAE v4.0 Terms: Anemia Leukocytosis","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"updates-made-to-term","dir":"Articles","previous_headings":"NCI-CTCAEV4 implementation","what":"Updates made to TERM","title":"Lab Grading","text":"terms “Hypocalcemia” “Hypercalcemia” criteria provided Calcium Ionized Calcium, therefore admiral created row metadata, noted COMMENT variable metadata:  Similarly, criteria applicable Fasting Glucose well non-Fasting Glucose “Hyperglycemia” split 2 rows, noted COMMENT variable. Note “Hypoglycemia” require split 2 rows:","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"assumptions-made-when-grading","dir":"Articles","previous_headings":"NCI-CTCAEV4 implementation","what":"Assumptions made when grading","title":"Lab Grading","text":"term “INR Increased” following criteria:   admiral assumed worst case used parts criteria grading, comparing lab value ULN also BASE. decision made put COMMENT field.   TERM “Hyperuricemia”, criteria Grade 1 Grade 3 respect lab value, worse case assumed grade 3. decision made put COMMENT field.   similar approach taken TERM “Hypokalemia” Grade 1 Grade 2 criteria respect lab value, worse case assumed grade 2. decision made put COMMENT field.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"terms-graded-1","dir":"Articles","previous_headings":"NCI-CTCAEV5 implementation","what":"Terms graded","title":"Lab Grading","text":"Grading implemented lab tests lab value included grading definition, admiral try read data determine grade, ADLB VAD used. following CTCAE v5.0 SOC values identified grading, “Investigations”, “Metabolism nutrition disorders” “Blood lymphatic system disorders”. SOC values following terms criteria implemented admiral SOC = “Investigations” 21 CTCAE v5.0 Terms: Activated partial thromboplastin time prolonged Alanine aminotransferase increased Alkaline phosphatase increased Aspartate aminotransferase increased Blood bilirubin increased CD4 lymphocytes decreased Cholesterol high CPK increased Creatinine increased Fibrinogen decreased GGT increased Haptoglobin decreased Hemoglobin increased INR increased Lipase increased Lymphocyte count decreased Lymphocyte count increased Neutrophil count decreased Platelet count decreased Serum amylase increased White blood cell decreased Note: terms identified NCI-CTCAEv4. SOC = “Metabolism nutrition disorders” 12 CTCAE v4.0 Terms: Hypercalcemia Hyperkalemia Hypermagnesemia Hypernatremia Hypertriglyceridemia Hyperuricemia Hypoalbuminemia Hypocalcemia Hypoglycemia Hypokalemia Hypomagnesemia Hyponatremia Note: terms identified NCI-CTCAEv4, except “Hypophosphatemia” “Hyperglycemia” NCICTCAEv5 grading criteria. SOC = “Blood lymphatic system disorders” 2 CTCAE v4.0 Terms: Anemia Leukocytosis Note: terms identified NCI-CTCAEv4.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"updates-made-to-term-1","dir":"Articles","previous_headings":"NCI-CTCAEV5 implementation","what":"Updates made to TERM","title":"Lab Grading","text":"terms “Hypocalcemia” “Hypercalcemia” criteria provided Calcium Ionized Calcium, therefore admiral created row metadata, noted COMMENT variable metadata:","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"assumptions-made-when-grading-1","dir":"Articles","previous_headings":"NCI-CTCAEV5 implementation","what":"Assumptions made when grading","title":"Lab Grading","text":"term “INR Increased” following criteria:   admiral assumed worst case used parts criteria grading, comparing lab value ULN also BASE. decision made put COMMENT field.  Similarly, terms “Lipase Increased” “Serum amylase increased” following criteria:   admiral assumed worst case implemented highest grade possible. decision made put COMMENT field.   TERM “Hyperuricemia”, criteria Grade 1 Grade 3 respect lab value, worse case assumed grade 3. decision made put COMMENT field.   similar approach taken TERM “Hypokalemia” “Hyponatremia”. “Hypokalemia”, Grade 1 Grade 2 criteria respect lab value, worse case assumed grade 2. “Hyponatremia”, Grade 2 Grade 2 criteria respect lab value, worse case assumed grade 3. decision made put COMMENT field.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/lab_grading.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Lab Grading","text":"NCI-CTCAEv4 NCI-CTCAEv5 now implemented, {admiral} may look implement industry standard grading criteria. Providing tools users easily interact metadata update criteria, based companies needs also looked . Ideally, users able create metadata company specific grading schemes.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating an OCCDS ADaM","text":"article describes creating OCCDS ADaM. Examples currently presented tested context ADAE. However, examples applied OCCDS ADaMs ADCM, ADMH, ADDV, etc. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating an OCCDS ADaM","text":"Read Data Derive/Impute End Start Analysis Date/time Relative Day Derive Durations Derive ATC variables Derive Planned Actual Treatment Derive Date/Date-time Last Dose Derive Severity, Causality, Toxicity Grade Derive Treatment Emergent Flag Derive Occurrence Flags Derive Query Variables Add ADSL variables Derive Analysis Sequence Number Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating an OCCDS ADaM","text":"start, data frames needed creation ADAE read environment. company specific process. data frames needed may AE ADSL example purpose, CDISC Pilot SDTM ADaM datasets —included {admiral.test}— used. step, may useful join ADSL AE domain well. ADSL variables used derivations selected step. rest relevant ADSL variables added later.","code":"library(admiral) library(dplyr, warn.conflicts = FALSE) library(admiral.test) library(lubridate)  data(\"admiral_ae\") data(\"admiral_adsl\")  ae <- convert_blanks_to_na(admiral_ae) adsl <- admiral_adsl adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P, DTHDT, EOSDT)  adae <- derive_vars_merged(   ae,   dataset_add = adsl,   new_vars = adsl_vars,   by = exprs(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"datetime","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive/Impute End and Start Analysis Date/time and Relative Day","title":"Creating an OCCDS ADaM","text":"part derives ASTDTM, ASTDT, ASTDY, AENDTM, AENDT, AENDY. function derive_vars_dtm() can used derive ASTDTM AENDTM ASTDTM company-specific. ASTDT AENDT can derived ASTDTM AENDTM, respectively, using function derive_vars_dtm_to_dt(). derive_vars_dy() can used create ASTDY AENDY. See also Date Time Imputation.","code":"adae <- adae %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\",     min_dates = exprs(TRTSDT)   ) %>%   derive_vars_dtm(     dtc = AEENDTC,     new_vars_prefix = \"AEN\",     highest_imputation = \"M\",     date_imputation = \"last\",     time_imputation = \"last\",     max_dates = exprs(DTHDT, EOSDT)   ) %>%   derive_vars_dtm_to_dt(exprs(ASTDTM, AENDTM)) %>%   derive_vars_dy(     reference_date = TRTSDT,     source_vars = exprs(ASTDT, AENDT)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"duration","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Durations","title":"Creating an OCCDS ADaM","text":"function derive_vars_duration() can used create variables ADURN ADURU.","code":"adae <- adae %>%   derive_vars_duration(     new_var = ADURN,     new_var_unit = ADURU,     start_date = ASTDT,     end_date = AENDT   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"atc","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive ATC variables","title":"Creating an OCCDS ADaM","text":"function derive_vars_atc() can used derive ATC Class Variables. helps add Anatomical Therapeutic Chemical class variables FACM ADCM. expected result input dataset ATC variables added.","code":"cm <- tibble::tribble(   ~USUBJID,       ~CMGRPID, ~CMREFID,  ~CMDECOD,   \"BP40257-1001\",     \"14\", \"1192056\", \"PARACETAMOL\",   \"BP40257-1001\",     \"18\", \"2007001\", \"SOLUMEDROL\",   \"BP40257-1002\",     \"19\", \"2791596\", \"SPIRONOLACTONE\" ) facm <- tibble::tribble(   ~USUBJID,       ~FAGRPID,  ~FAREFID, ~FATESTCD,  ~FASTRESC,   \"BP40257-1001\",      \"1\", \"1192056\", \"CMATC1CD\",       \"N\",   \"BP40257-1001\",      \"1\", \"1192056\", \"CMATC2CD\",     \"N02\",   \"BP40257-1001\",      \"1\", \"1192056\", \"CMATC3CD\",    \"N02B\",   \"BP40257-1001\",      \"1\", \"1192056\", \"CMATC4CD\",   \"N02BE\",   \"BP40257-1001\",      \"1\", \"2007001\", \"CMATC1CD\",       \"D\",   \"BP40257-1001\",      \"1\", \"2007001\", \"CMATC2CD\",     \"D10\",   \"BP40257-1001\",      \"1\", \"2007001\", \"CMATC3CD\",    \"D10A\",   \"BP40257-1001\",      \"1\", \"2007001\", \"CMATC4CD\",   \"D10AA\",   \"BP40257-1001\",      \"2\", \"2007001\", \"CMATC1CD\",       \"D\",   \"BP40257-1001\",      \"2\", \"2007001\", \"CMATC2CD\",     \"D07\",   \"BP40257-1001\",      \"2\", \"2007001\", \"CMATC3CD\",    \"D07A\",   \"BP40257-1001\",      \"2\", \"2007001\", \"CMATC4CD\",   \"D07AA\",   \"BP40257-1001\",      \"3\", \"2007001\", \"CMATC1CD\",       \"H\",   \"BP40257-1001\",      \"3\", \"2007001\", \"CMATC2CD\",     \"H02\",   \"BP40257-1001\",      \"3\", \"2007001\", \"CMATC3CD\",    \"H02A\",   \"BP40257-1001\",      \"3\", \"2007001\", \"CMATC4CD\",   \"H02AB\",   \"BP40257-1002\",      \"1\", \"2791596\", \"CMATC1CD\",       \"C\",   \"BP40257-1002\",      \"1\", \"2791596\", \"CMATC2CD\",     \"C03\",   \"BP40257-1002\",      \"1\", \"2791596\", \"CMATC3CD\",    \"C03D\",   \"BP40257-1002\",      \"1\", \"2791596\", \"CMATC4CD\",   \"C03DA\" )  derive_vars_atc(cm, facm) #> # A tibble: 5 x 8 #>   USUBJID      CMGRPID CMREFID CMDECOD        ATC1CD ATC2CD ATC3CD ATC4CD #>   <chr>        <chr>   <chr>   <chr>          <chr>  <chr>  <chr>  <chr>  #> 1 BP40257-1001 14      1192056 PARACETAMOL    N      N02    N02B   N02BE  #> 2 BP40257-1001 18      2007001 SOLUMEDROL     D      D10    D10A   D10AA  #> 3 BP40257-1001 18      2007001 SOLUMEDROL     D      D07    D07A   D07AA  #> 4 BP40257-1001 18      2007001 SOLUMEDROL     H      H02    H02A   H02AB  #> 5 BP40257-1002 19      2791596 SPIRONOLACTONE C      C03    C03D   C03DA"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"trtpa","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Planned and Actual Treatment","title":"Creating an OCCDS ADaM","text":"TRTA TRTP must match least one value character treatment variables ADSL (e.g., TRTxxA/TRTxxP, TRTSEQA/TRTSEQP, TRxxAGy/TRxxPGy). example simple implementation study without periods : studies periods see “Visit Period Variables” vignette.","code":"adae <- mutate(adae, TRTP = TRT01P, TRTA = TRT01A)  count(adae, TRTP, TRTA, TRT01P, TRT01A) #> # A tibble: 2 x 5 #>   TRTP               TRTA              TRT01P            TRT01A                n #>   <chr>              <chr>             <chr>             <chr>             <int> #> 1 Placebo            Placebo           Placebo           Placebo              10 #> 2 Xanomeline Low Do… Xanomeline Low D… Xanomeline Low D… Xanomeline Low D…     6"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"last_dose","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Date/Date-time of Last Dose","title":"Creating an OCCDS ADaM","text":"function derive_var_last_dose_date() can used derive last dose date start event. Additionally, function can also provide traceability variables (e.g. LDOSEDOM, LDOSESEQ) using traceability_vars argument.","code":"data(ex_single) ex_single <- derive_vars_dtm(   ex_single,   dtc = EXSTDTC,   new_vars_prefix = \"EXST\",   flag_imputation = \"none\" ) adae <- adae %>%   derive_var_last_dose_date(     ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXSTDTM),     dose_date = EXSTDTM,     analysis_date = ASTDT,     single_dose_condition = (EXSTDTC == EXENDTC),     new_var = LDOSEDTM,     output_datetime = TRUE   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"severity","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Severity, Causality, and Toxicity Grade","title":"Creating an OCCDS ADaM","text":"variables ASEV, AREL, ATOXGR can added using simple dplyr::mutate() assignments, imputation required.","code":"adae <- adae %>%   mutate(     ASEV = AESEV,     AREL = AEREL   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"trtflag","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Treatment Emergent Flag","title":"Creating an OCCDS ADaM","text":"derive treatment emergent flag TRTEMFL, one can call derive_var_trtemfl(). example , use 30 days flag derivation. derive -treatment flag (ONTRTFL) ADaM dataset single occurrence date, use derive_var_ontrtfl(). expected result input dataset additional column named ONTRTFL value \"Y\" NA. want also check end date, add end_date argument. Note scenario set span_period = \"Y\" want occurrences started prior drug intake, ongoing ended time considered -treatment.","code":"adae <- adae %>%   derive_var_trtemfl(     trt_start_date = TRTSDT,     trt_end_date = TRTEDT,     end_window = 30   ) bds1 <- tibble::tribble(   ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,   \"P01\",    ymd(\"2020-02-24\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P02\",    ymd(\"2020-01-01\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P03\",    ymd(\"2019-12-31\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\") ) derive_var_ontrtfl(   bds1,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT ) #> # A tibble: 3 x 5 #>   USUBJID ADT        TRTSDT     TRTEDT     ONTRTFL #>   <chr>   <date>     <date>     <date>     <chr>   #> 1 P01     2020-02-24 2020-01-01 2020-03-01 Y       #> 2 P02     2020-01-01 2020-01-01 2020-03-01 Y       #> 3 P03     2019-12-31 2020-01-01 2020-03-01 NA  bds2 <- tibble::tribble(   ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,   \"P01\",    ymd(\"2020-07-01\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P02\",    ymd(\"2020-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P03\",    ymd(\"2020-03-15\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\") ) derive_var_ontrtfl(   bds2,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT,   ref_end_window = 60 ) #> # A tibble: 3 x 5 #>   USUBJID ADT        TRTSDT     TRTEDT     ONTRTFL #>   <chr>   <date>     <date>     <date>     <chr>   #> 1 P01     2020-07-01 2020-01-01 2020-03-01 NA      #> 2 P02     2020-04-30 2020-01-01 2020-03-01 Y       #> 3 P03     2020-03-15 2020-01-01 2020-03-01 Y  bds3 <- tibble::tribble(   ~ADTM,              ~TRTSDTM,           ~TRTEDTM,           ~TPT,   \"2020-01-02T12:00\", \"2020-01-01T12:00\", \"2020-03-01T12:00\", NA,   \"2020-01-01T12:00\", \"2020-01-01T12:00\", \"2020-03-01T12:00\", \"PRE\",   \"2019-12-31T12:00\", \"2020-01-01T12:00\", \"2020-03-01T12:00\", NA ) %>%   mutate(     ADTM = ymd_hm(ADTM),     TRTSDTM = ymd_hm(TRTSDTM),     TRTEDTM = ymd_hm(TRTEDTM)   ) derive_var_ontrtfl(   bds3,   start_date = ADTM,   ref_start_date = TRTSDTM,   ref_end_date = TRTEDTM,   filter_pre_timepoint = TPT == \"PRE\" ) #> # A tibble: 3 x 5 #>   ADTM                TRTSDTM             TRTEDTM             TPT   ONTRTFL #>   <dttm>              <dttm>              <dttm>              <chr> <chr>   #> 1 2020-01-02 12:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 NA    Y       #> 2 2020-01-01 12:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 PRE   NA      #> 3 2019-12-31 12:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 NA    NA"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"occflag","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Occurrence Flags","title":"Creating an OCCDS ADaM","text":"function derive_var_extreme_flag() can help derive variables AOCCIFL, AOCCPIFL, AOCCSIFL, AOCXIFL, AOCXPIFL, AOCXSIFL. grades collected, following can used flag first occurrence maximum toxicity grade. Similarly, ASEV can also used derive occurrence flags, severity collected. case, variable need recoded numeric variable. Flag first occurrence severe adverse event:","code":"adae <- adae %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(USUBJID),       order = exprs(desc(ATOXGR), ASTDTM, AESEQ),       new_var = AOCCIFL,       mode = \"first\"     ),     filter = TRTEMFL == \"Y\"   ) adae <- adae %>%   mutate(     ASEVN = as.integer(factor(ASEV, levels = c(\"MILD\", \"MODERATE\", \"SEVERE\", \"DEATH THREATENING\")))   ) %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(USUBJID),       order = exprs(desc(ASEVN), ASTDTM, AESEQ),       new_var = AOCCIFL,       mode = \"first\"     ),     filter = TRTEMFL == \"Y\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"query","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Query Variables","title":"Creating an OCCDS ADaM","text":"deriving query variables SMQzzNAM, SMQzzCD, SMQzzSC, SMQzzSCN, CQzzNAM derive_vars_query() function can used. input expects queries dataset, provides definition queries. See Queries dataset documentation detailed description queries dataset. create_query_data() function can used create queries datasets. following example shows derive query variables Standardized MedDRA Queries (SMQs) ADAE. Similarly SMQ, derive_vars_query() function can used derive Standardized Drug Groupings (SDG).","code":"data(\"queries\") adae1 <- tibble::tribble(   ~USUBJID, ~ASTDTM, ~AETERM, ~AESEQ, ~AEDECOD, ~AELLT, ~AELLTCD,   \"01\", \"2020-06-02 23:59:59\", \"ALANINE AMINOTRANSFERASE ABNORMAL\",   3, \"Alanine aminotransferase abnormal\", NA_character_, NA_integer_,   \"02\", \"2020-06-05 23:59:59\", \"BASEDOW'S DISEASE\",   5, \"Basedow's disease\", NA_character_, 1L,   \"03\", \"2020-06-07 23:59:59\", \"SOME TERM\",   2, \"Some query\", \"Some term\", NA_integer_,   \"05\", \"2020-06-09 23:59:59\", \"ALVEOLAR PROTEINOSIS\",   7, \"Alveolar proteinosis\", NA_character_, NA_integer_ )  adae_query <- derive_vars_query(dataset = adae1, dataset_queries = queries) sdg <- tibble::tribble(   ~VAR_PREFIX, ~QUERY_NAME,       ~SDG_ID, ~QUERY_SCOPE, ~QUERY_SCOPE_NUM, ~TERM_LEVEL, ~TERM_NAME,         ~TERM_ID,   \"SDG01\",     \"Diuretics\",       11,      \"BROAD\",      1,                \"CMDECOD\",   \"Diuretic 1\",       NA,   \"SDG01\",     \"Diuretics\",       11,      \"BROAD\",      1,                \"CMDECOD\",   \"Diuretic 2\",       NA,   \"SDG02\",     \"Costicosteroids\", 12,      \"BROAD\",      1,                \"CMDECOD\",   \"Costicosteroid 1\", NA,   \"SDG02\",     \"Costicosteroids\", 12,      \"BROAD\",      1,                \"CMDECOD\",   \"Costicosteroid 2\", NA,   \"SDG02\",     \"Costicosteroids\", 12,      \"BROAD\",      1,                \"CMDECOD\",   \"Costicosteroid 3\", NA, ) adcm <- tibble::tribble(   ~USUBJID, ~ASTDTM,               ~CMDECOD,   \"01\",     \"2020-06-02 23:59:59\", \"Diuretic 1\",   \"02\",     \"2020-06-05 23:59:59\", \"Diuretic 1\",   \"03\",     \"2020-06-07 23:59:59\", \"Costicosteroid 2\",   \"05\",     \"2020-06-09 23:59:59\", \"Diuretic 2\" ) adcm_query <- derive_vars_query(adcm, sdg)"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add the ADSL variables","title":"Creating an OCCDS ADaM","text":"needed, ADSL variables can now added:","code":"adae <- adae %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Sequence Number","title":"Creating an OCCDS ADaM","text":"function derive_var_obs_number() can used deriving ASEQ variable ensure uniqueness subject records within dataset. example, can multiple records present ADCM single subject ASTDTM CMSEQ variables. records still differ ATC level:","code":"adcm <- tibble::tribble(   ~USUBJID,       ~ASTDTM,          ~CMSEQ, ~CMDECOD,         ~ATC1CD, ~ATC2CD, ~ATC3CD, ~ATC4CD,   \"BP40257-1001\", \"2013-07-05 UTC\", \"14\",   \"PARACETAMOL\",    \"N\",     \"N02\",   \"N02B\",  \"N02BE\",   \"BP40257-1001\", \"2013-08-15 UTC\", \"18\",   \"SOLUMEDROL\",     \"D\",     \"D10\",   \"D10A\",  \"D10AA\",   \"BP40257-1001\", \"2013-08-15 UTC\", \"18\",   \"SOLUMEDROL\",     \"D\",     \"D07\",   \"D07A\",  \"D07AA\",   \"BP40257-1001\", \"2013-08-15 UTC\", \"18\",   \"SOLUMEDROL\",     \"H\",     \"H02\",   \"H02A\",  \"H02AB\",   \"BP40257-1002\", \"2012-12-15 UTC\", \"19\",   \"SPIRONOLACTONE\", \"C\",     \"C03\",   \"C03D\",  \"C03DA\" )  adcm_aseq <- adcm %>%   derive_var_obs_number(     by_vars    = exprs(USUBJID),     order      = exprs(ASTDTM, CMSEQ, ATC1CD, ATC2CD, ATC3CD, ATC4CD),     new_var    = ASEQ,     check_type = \"error\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/occds.html","id":"attributes","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Labels and Attributes","title":"Creating an OCCDS ADaM","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"article describes creating Pharmacokinetics (PK) Non-compartmental analysis (NCA) ADaM (ADNCA/ADPC) using CDISC Implementation Guide (https://www.cdisc.org/standards/foundational/adam/adamig-non-compartmental-analysis-input-data-v1-0). example presented uses underlying EX PC domains EX PC domains represent data collected ADPC ADaM output. However, example can applied situations EC domain used input instead EX /ADNCA another ADaM created. One important aspects dataset derivation relative timing variables. variables consist nominal actual times, refer time first dose time recent reference dose. reference dose pre-dose records may upcoming dose. CDISC Implementation Guide makes use duplicated records analysis, allows record used respect previous dose next upcoming dose. illustrated later vignette. relative time variables use. correspond names CDISC Implementation Guide. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Read Data Expand Dosing Records Find First Dose Calculate AFRLT Find Reference Dose Dates Corresponding PK Records Combine PC EX Records Derive Relative Time Variables Derive Analysis Variables Create Duplicated Records Analysis Combine ADPC data Duplicated Records Calculate Change Baseline Assign ASEQ Add Additional Baseline Variables Add ADSL variables Add Labels Attributes","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"start, data frames needed creation ADPC read environment. company specific process. data frames needed may PC, EX, ADSL. Additional domains VS LB may used additional baseline variables needed. may come either SDTM ADaM source. purpose example, CDISC Pilot SDTM ADaM datasets—included {admiral.test}—used. step, may useful join ADSL PC EX domains well. ADSL variables used derivations selected step. rest relevant ADSL variables added later. case keep TRTSDT/TRTSDTM day derivation TRT01P/TRT01A planned actual treatments. segment use derive_vars_merged() join ADSL variables following admiral functions derive analysis dates, times days: derive_vars_dtm(), derive_vars_dtm_to_dt(), derive_vars_dtm_to_tm(), derive_vars_dy(). also create NFRLT PC data based PCTPTNUM. create event ID (EVID) 0 concentration records 1 dosing records. traditional variable provide handy tool identify records dropped final dataset example. Next also join ADSL data EX derive dates/times. section uses admiral functions derive_vars_merged(), derive_vars_dtm(), derive_vars_dtm_to_dt(). Time imputed 00:00:00 reasons specific sample data. imputation times may used based study details. create NFRLT EX data based VISITDY using formula (VISITDY - 1) * 24 using dplyr::mutate.","code":"library(dplyr, warn.conflicts = FALSE) library(admiral) library(admiral.test) library(lubridate) library(stringr) library(tibble)  data(\"admiral_adsl\") data(\"admiral_ex\") data(\"admiral_pc\") data(\"admiral_vs\")  adsl <- admiral_adsl ex <- convert_blanks_to_na(admiral_ex)  # Load PC  pc <- convert_blanks_to_na(admiral_pc)  # Load VS for baseline height and weight  vs <- convert_blanks_to_na(admiral_vs)  # ---- Lookup tables ---- param_lookup <- tibble::tribble(   ~PCTESTCD, ~PARAMCD, ~PARAM, ~PARAMN,   \"XAN\", \"XAN\", \"Pharmacokinetic concentration of Xanomeline\", 1,   \"DOSE\", \"DOSE\", \"Xanomeline Patch Dose\", 2, ) adsl_vars <- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)  adpc <- pc %>%   # Join ADSL with PC (need TRTSDT for ADY derivation)   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = exprs(STUDYID, USUBJID)   ) %>%   # Derive analysis date/time   # Impute missing time to 00:00:00   derive_vars_dtm(     new_vars_prefix = \"A\",     dtc = PCDTC,     time_imputation = \"00:00:00\"   ) %>%   # Derive dates and times from date/times   derive_vars_dtm_to_dt(exprs(ADTM)) %>%   derive_vars_dtm_to_tm(exprs(ADTM)) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %>%   # Derive event ID and nominal relative time from first dose (NFRLT)   mutate(     EVID = 0,     DRUG = PCTEST,     NFRLT = if_else(PCTPTNUM < 0, 0, PCTPTNUM), .after = USUBJID   ) # ---- Get dosing information ----  ex <- ex %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = exprs(STUDYID, USUBJID)   ) %>%   # Keep records with nonzero dose   filter(EXDOSE > 0) %>%   # Add time and set missing end date to start date   # Impute missing time to 00:00:00   # Note all times are missing for dosing records in this example data   # Derive Analysis Start and End Dates   derive_vars_dtm(     new_vars_prefix = \"AST\",     dtc = EXSTDTC,     time_imputation = \"00:00:00\"   ) %>%   derive_vars_dtm(     new_vars_prefix = \"AEN\",     dtc = EXENDTC,     time_imputation = \"00:00:00\"   ) %>%   # Derive event ID and nominal relative time from first dose (NFRLT)   mutate(     EVID = 1,     NFRLT = 24 * (VISITDY - 1), .after = USUBJID   ) %>%   # Set missing end dates to start date   mutate(AENDTM = case_when(     is.na(AENDTM) ~ ASTDTM,     TRUE ~ AENDTM   )) %>%   # Derive dates from date/times   derive_vars_dtm_to_dt(exprs(ASTDTM)) %>%   derive_vars_dtm_to_dt(exprs(AENDTM))"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"expand","dir":"Articles","previous_headings":"Programming Workflow","what":"Expand Dosing Records","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"function create_single_dose_dataset() can used expand dosing records start date end date. nominal time also expanded based values EXDOSFRQ, example “QD” result nominal time incremented 24 hours “BID” result nominal time incremented 12 hours. new feature create_single_dose_dataset(). Dates times derived expansion using derive_vars_dtm_to_dt() derive_vars_dtm_to_tm(). example study define analysis visit (AVISIT) based nominal day value NFRLT give format, “Day 1”, “Day 2”, “Day 3”, etc. important creating BASETYPE variable later. DRUG created EXTRT . useful linking treatment data concentration data multiple drugs /analytes, variable also dropped final dataset example.","code":"# ---- Expand dosing records between start and end dates ----  ex_exp <- ex %>%   create_single_dose_dataset(     dose_freq = EXDOSFRQ,     start_date = ASTDT,     start_datetime = ASTDTM,     end_date = AENDT,     end_datetime = AENDTM,     nominal_time = NFRLT,     lookup_table = dose_freq_lookup,     lookup_column = CDISC_VALUE,     keep_source_vars = exprs(       STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,       NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,       VISIT, VISITNUM, VISITDY,       TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars     )   ) %>%   # Derive AVISIT based on nominal relative time   # Derive AVISITN to nominal time in whole days using integer division   # Define AVISIT based on nominal day   mutate(     AVISITN = NFRLT %/% 24 + 1,     AVISIT = paste(\"Day\", AVISITN),     ADTM = ASTDTM,     DRUG = EXTRT,   ) %>%   # Derive dates and times from datetimes   derive_vars_dtm_to_dt(exprs(ADTM)) %>%   derive_vars_dtm_to_tm(exprs(ADTM)) %>%   derive_vars_dtm_to_tm(exprs(ASTDTM)) %>%   derive_vars_dtm_to_tm(exprs(AENDTM)) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"firstdose","dir":"Articles","previous_headings":"Programming Workflow","what":"Find First Dose and Calculate AFRLT","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"section find first dose subject drug, using derive_vars_merged(). also create analysis visit (AVISIT) based NFRLT. first dose datetime analyte FANLDTM calculated minimum ADTM dosing records subject drug.","code":"# ---- Find first dose per treatment per subject ---- # ---- Join with ADPC data and keep only subjects with dosing ----  adpc <- adpc %>%   derive_vars_merged(     dataset_add = ex_exp,     filter_add = (EXDOSE > 0 & !is.na(ADTM)),     new_vars = exprs(FANLDTM = ADTM),     order = exprs(ADTM, EXSEQ),     mode = \"first\",     by_vars = exprs(STUDYID, USUBJID, DRUG)   ) %>%   filter(!is.na(FANLDTM)) %>%   # Derive AVISIT based on nominal relative time   # Derive AVISITN to nominal time in whole days using integer division   # Define AVISIT based on nominal day   mutate(     AVISITN = NFRLT %/% 24 + 1,     AVISIT = paste(\"Day\", AVISITN),   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"dosedates","dir":"Articles","previous_headings":"Programming Workflow","what":"Find Reference Dose Dates Corresponding to PK Records","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Use derive_vars_joined() find previous dose data. join expanded EX data ADPC based analysis date ADTM. Note filter_join parameter. addition date previous dose (ADTM_prev), also keep actual dose amount EXDOSE_prev analysis visit dose AVISIT_prev. Similarly, find next dose information using derive_vars_joined() filter_join parameter ADTM <= ADTM.join. keep next dose analysis date ADTM_next, next actual dose EXDOSE_next, next analysis visit AVISIT_next. Use method find previous next nominal times. Note data sorted nominal time rather actual time. tell us previous dose next dose supposed occur. Sometimes differ actual times study. keep previous nominal dose time NFRLT_prev next nominal dose time NFRLT_next. Note filter_join parameter uses nominal relative times, e.g. NFRLT > NFRLT.join.","code":"# ---- Find previous dose  ---- # Use derive_vars_joined() for consistency with other variables # This is equivalent to derive_vars_last_dose() in this case  adpc <- adpc %>%   derive_vars_joined(     dataset_add = ex_exp,     by_vars = exprs(USUBJID),     order = exprs(ADTM),     new_vars = exprs(       ADTM_prev = ADTM, EXDOSE_prev = EXDOSE, AVISIT_prev = AVISIT,       AENDTM_prev = AENDTM     ),     join_vars = exprs(ADTM),     filter_add = NULL,     filter_join = ADTM > ADTM.join,     mode = \"last\",     check_type = \"none\"   ) # ---- Find next dose  ----  adpc <- adpc %>%   derive_vars_joined(     dataset_add = ex_exp,     by_vars = exprs(USUBJID),     order = exprs(ADTM),     new_vars = exprs(       ADTM_next = ADTM, EXDOSE_next = EXDOSE, AVISIT_next = AVISIT,       AENDTM_next = AENDTM     ),     join_vars = exprs(ADTM),     filter_add = NULL,     filter_join = ADTM <= ADTM.join,     mode = \"first\",     check_type = \"none\"   ) # ---- Find previous nominal time ----  adpc <- adpc %>%   derive_vars_joined(     dataset_add = ex_exp,     by_vars = exprs(USUBJID),     order = exprs(NFRLT),     new_vars = exprs(NFRLT_prev = NFRLT),     join_vars = exprs(NFRLT),     filter_add = NULL,     filter_join = NFRLT > NFRLT.join,     mode = \"last\",     check_type = \"none\"   )  # ---- Find next nominal time ----  adpc <- adpc %>%   derive_vars_joined(     dataset_add = ex_exp,     by_vars = exprs(USUBJID),     order = exprs(NFRLT),     new_vars = exprs(NFRLT_next = NFRLT),     join_vars = exprs(NFRLT),     filter_add = NULL,     filter_join = NFRLT <= NFRLT.join,     mode = \"first\",     check_type = \"none\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"relative","dir":"Articles","previous_headings":"Programming Workflow","what":"Combine PC and EX Records and Derive Relative Time Variables","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Combine PC EX records derive additional relative time variables. Often NCA data keep dosing concentration records. keep . Sometimes see ADPC concentration records. desired, dosing records can dropped saving final dataset. use admiral function derive_vars_duration() calculate actual relative time first dose (AFRLT) actual relative time recent dose (ARRLT). Note use parameter add_one = FALSE . also create variable representing actual time next dose (AXRLT) kept, used create duplicated records analysis pre-dose records. now, update missing values ARRLT corresponding pre-dose records AXRLT, dosing records set zero. also calculate reference dates FANLDTM (First Datetime Dose Analyte) PCRFTDTM (Reference Datetime Dose Analyte) corresponding date time variables. calculate maximum date concentration records keep dosing records date. nominal relative times calculate NRRLT generally NFRLT - NFRLT_prev NXRLT NFRLT - NFRLT_next.","code":"# ---- Combine ADPC and EX data ---- # Derive Relative Time Variables   adpc <- bind_rows(adpc, ex_exp) %>%   group_by(USUBJID, DRUG) %>%   mutate(     FANLDTM = min(FANLDTM, na.rm = TRUE),     min_NFRLT = min(NFRLT_prev, na.rm = TRUE),     maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID   ) %>%   arrange(USUBJID, ADTM) %>%   ungroup() %>%   filter(ADT <= maxdate) %>%   # Derive Actual Relative Time from First Dose (AFRLT)   derive_vars_duration(     new_var = AFRLT,     start_date = FANLDTM,     end_date = ADTM,     out_unit = \"hours\",     floor_in = FALSE,     add_one = FALSE   ) %>%   # Derive Actual Relative Time from Reference Dose (ARRLT)   derive_vars_duration(     new_var = ARRLT,     start_date = ADTM_prev,     end_date = ADTM,     out_unit = \"hours\",     floor_in = FALSE,     add_one = FALSE   ) %>%   # Derive Actual Relative Time from Next Dose (AXRLT not kept)   derive_vars_duration(     new_var = AXRLT,     start_date = ADTM_next,     end_date = ADTM,     out_unit = \"hours\",     floor_in = FALSE,     add_one = FALSE   ) %>%   mutate(     ARRLT = case_when(       EVID == 1 ~ 0,       is.na(ARRLT) ~ AXRLT,       TRUE ~ ARRLT     ),      # Derive Reference Dose Date     PCRFTDTM = case_when(       EVID == 1 ~ ADTM,       is.na(ADTM_prev) ~ ADTM_next,       TRUE ~ ADTM_prev     )   ) %>%   # Derive dates and times from datetimes   derive_vars_dtm_to_dt(exprs(FANLDTM)) %>%   derive_vars_dtm_to_tm(exprs(FANLDTM)) %>%   derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %>%   derive_vars_dtm_to_tm(exprs(PCRFTDTM)) adpc <- adpc %>%   # Derive Nominal Relative Time from Reference Dose (NRRLT)   mutate(     NRRLT = case_when(       EVID == 1 ~ 0,       is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,       TRUE ~ NFRLT - NFRLT_prev     ),     NXRLT = case_when(       EVID == 1 ~ 0,       TRUE ~ NFRLT - NFRLT_next     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"analysis","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Variables","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Using dplyr::mutate derive number analysis variables including analysis value (AVAL), analysis time point (ATPT) analysis timepoint reference (ATPTREF) baseline type (BASETYPE). set ATPT PCTPT concentration records “Dose” dosing records. analysis timepoint reference ATPTREF correspond dosing visit. use AVISIT_prev AVISIT_next derive. baseline type concatenation ATPTREF “Baseline” values “Day 1 Baseline”, “Day 2 Baseline”, etc. baseline flag ABLFL set “Y” pre-dose records. Analysis value AVAL example comes PCSTRESN concentration records. addition including dose value EXDOSE dosing records setting BLQ (Limit Quantitation) records 0 first dose 1/2 LLOQ (Lower Limit Quantitation) records first dose. (Additional tests whether 1/3 records BLQ may required done example.) also create listing-ready variable AVALCAT1 includes “BLQ” record indicator formats numeric values three significant digits. derive actual dose DOSEA based EXDOSE_prev EXDOSE_next planned dose DOSEP based planned treatment TRT01P. addition add units dose variables relative time variables.","code":"# ---- Derive Analysis Variables ---- # Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE # Derive planned dose DOSEP, actual dose DOSEA and units # Derive PARAMCD and relative time units # Derive AVAL, AVALU and AVALCAT1  adpc <- adpc %>%   mutate(     ATPTN = case_when(       EVID == 1 ~ 0,       TRUE ~ PCTPTNUM     ),     ATPT = case_when(       EVID == 1 ~ \"Dose\",       TRUE ~ PCTPT     ),     ATPTREF = case_when(       EVID == 1 ~ AVISIT,       is.na(AVISIT_prev) ~ AVISIT_next,       TRUE ~ AVISIT_prev     ),     # Derive baseline flag for pre-dose records     ABLFL = case_when(       ATPT == \"Pre-dose\" ~ \"Y\",       TRUE ~ NA_character_     ),     # Derive BASETYPE     BASETYPE = paste(ATPTREF, \"Baseline\"),      # Derive Actual Dose     DOSEA = case_when(       EVID == 1 ~ EXDOSE,       is.na(EXDOSE_prev) ~ EXDOSE_next,       TRUE ~ EXDOSE_next     ),     # Derive Planned Dose     DOSEP = case_when(       TRT01P == \"Xanomeline High Dose\" ~ 81,       TRT01P == \"Xanomeline Low Dose\" ~ 54     ),     DOSEU = \"mg\",   ) %>%   # Derive relative time units   mutate(     FRLTU = \"h\",     RRLTU = \"h\",     # Derive PARAMCD     PARAMCD = coalesce(PCTESTCD, \"DOSE\"),     ALLOQ = PCLLOQ,     # Derive AVAL     AVAL = case_when(       EVID == 1 ~ EXDOSE,       PCSTRESC == \"<BLQ\" & NFRLT == 0 ~ 0,       PCSTRESC == \"<BLQ\" & NFRLT > 0 ~ 0.5 * ALLOQ,       TRUE ~ PCSTRESN     ),     AVALU = case_when(       EVID == 1 ~ EXDOSU,       TRUE ~ PCSTRESU     ),     AVALCAT1 = if_else(PCSTRESC == \"<BLQ\", PCSTRESC, prettyNum(signif(AVAL, digits = 3))),   ) %>%   # Add SRCSEQ   mutate(     SRCDOM = DOMAIN,     SRCVAR = \"SEQ\",     SRCSEQ = coalesce(PCSEQ, EXSEQ)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"copy","dir":"Articles","previous_headings":"Programming Workflow","what":"Create Duplicated Records for Analysis","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"mentioned , CDISC ADaM Implementation Guide Non-compartmental Analysis uses duplicated records analysis record needs used one way. example 24 hour post-dose record also used pre-dose record “Day 2” dose. addition 24 hour post-dose records, situations may include pre-dose records “Cycle 2 Day 1”, etc. general, select records interest update relative time variables duplicated records. case select nominal relative time next dose zero. (Note need duplicate first dose record since prior dose.) DTYPE set “COPY” duplicated records original PCSEQ value retained. case change “24h Post-dose” “Pre-dose”. ABLFL set “Y” since records serve baseline “Day 2” dose. DOSEA set EXDOSE_next PCRFTDTM set ADTM_next.","code":"# ---- Create DTYPE copy records ----  dtype <- adpc %>%   filter(NFRLT > 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %>%   select(-PCRFTDT, -PCRFTTM) %>%   # Re-derive variables in for DTYPE copy records   mutate(     ABLFL = NA_character_,     ATPTREF = AVISIT_next,     ARRLT = AXRLT,     NRRLT = NXRLT,     PCRFTDTM = ADTM_next,     DOSEA = EXDOSE_next,     BASETYPE = paste(AVISIT_next, \"Baseline\"),     ATPT = \"Pre-dose\",     ATPTN = NFRLT,     ABLFL = \"Y\",     DTYPE = \"COPY\"   ) %>%   derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %>%   derive_vars_dtm_to_tm(exprs(PCRFTDTM))"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"combine","dir":"Articles","previous_headings":"Programming Workflow","what":"Combine ADPC data with Duplicated Records","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Now duplicated records combined original records. also derive modified relative time reference dose MRRLT. case, negative values ARRLT set zero. also opportunity derive analysis flags e.g. ANL01FL , ANL02FL etc. example ANL01FL set “Y” records ANL02FL set “Y” records except duplicated records DTYPE = “COPY”. Additional flags may used select full profile records /select records included tables figures, etc.","code":"# ---- Combine original records and DTYPE copy records ----  adpc <- bind_rows(adpc, dtype) %>%   arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %>%   mutate(     # Derive MRRLT, ANL01FL and ANL02FL     MRRLT = if_else(ARRLT < 0, 0, ARRLT),     ANL01FL = \"Y\",     ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Calculate Change from Baseline and Assign ASEQ","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"admiral function derive_var_base() used derive BASE function derive_var_chg() used derive change baseline CHG. also now derive ASEQ using derive_var_obs_number() drop intermediate variables ending “_prev” “_next”. Finally derive PARAM PARAMN lookup table.","code":"# ---- Derive BASE and Calculate Change from Baseline ----  adpc <- adpc %>%   # Derive BASE   derive_var_base(     by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),     source_var = AVAL,     new_var = BASE,     filter = ABLFL == \"Y\"   )  adpc <- derive_var_chg(adpc)  # ---- Add ASEQ ----  adpc <- adpc %>%   # Calculate ASEQ   derive_var_obs_number(     new_var = ASEQ,     by_vars = exprs(STUDYID, USUBJID),     order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),     check_type = \"error\"   ) %>%   # Remove temporary variables   select(     -DOMAIN, -PCSEQ, -starts_with(\"orig\"), -starts_with(\"min\"),     -starts_with(\"max\"), -starts_with(\"EX\"), -ends_with(\"next\"),     -ends_with(\"prev\"), -DRUG, -EVID, -AXRLT, -NXRLT, -VISITDY   ) %>%   # Derive PARAM and PARAMN   derive_vars_merged(dataset_add = select(param_lookup, -PCTESTCD), by_vars = exprs(PARAMCD))"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"baselines","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Additional Baseline Variables","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"derive additional baseline values VS baseline height HTBL weight WTBL compute body mass index (BMI) compute_bmi(). values also obtained ADVS available. Baseline lab values also derived LB ADLB similar manner.","code":"# Derive additional baselines from VS adpc <- adpc %>%   derive_vars_merged(     dataset_add = vs,     filter_add = VSTESTCD == \"HEIGHT\",     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)   ) %>%   derive_vars_merged(     dataset_add = vs,     filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",     by_vars = exprs(STUDYID, USUBJID),     new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)   ) %>%   mutate(     BMIBL = compute_bmi(height = HTBL, weight = WTBL),     BMIBLU = \"kg/m^2\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add the ADSL variables","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"needed, ADSL variables can now added:","code":"# Add all ADSL variables adpc <- adpc %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/pk_adnca.html","id":"attributes","dir":"Articles","previous_headings":"Programming Workflow","what":"Add Labels and Attributes","title":"Creating a PK NCA ADaM (ADPC/ADNCA)","text":"Adding labels attributes SAS transport files supported following packages: metacore: establish common foundation use metadata within R session. metatools: enable use metacore objects. Metatools can used build datasets enhance columns existing datasets well checking datasets metadata. xportr: functionality associate metadata information local R data frame, perform data set level validation checks convert transport v5 file(xpt). NOTE: packages experimental phase, vision associated End End pipeline umbrella pharmaverse. example applying metadata perform associated checks can found pharmaverse E2E example.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Queries Dataset Documentation","text":"support safety analysis, quite common define specific grouping events. One common ways group events medications specific medical concept Standard MedDRA Queries (SMQs) -Drug Standardized Drug Groupings (SDGs). help derivation variables, {admiral} function derive_vars_query() can used. function takes input dataset (dataset) grouping must occur (e.g ADAE) dataset containing required information perform derivation grouping variables (dataset_queries). dataset passed dataset_queries argument derive_vars_query() function can created create_query_data() function. SMQs SDGs company-specific functions accessing SMQ SDG database need passed create_query_data() function (see description get_terms_fun argument details). vignette describes expected structure content dataset passed dataset_queries argument derive_vars_query() function.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"variables","dir":"Articles","previous_headings":"Structure of the Query Dataset","what":"Variables","title":"Queries Dataset Documentation","text":"Bold variables required dataset_queries: error issued variables missing. variables optional. VERSION variable used derive_vars_query() can used check dictionary version queries dataset analysis dataset line.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"required-content","dir":"Articles","previous_headings":"Structure of the Query Dataset","what":"Required Content","title":"Queries Dataset Documentation","text":"row must unique within dataset. described , variables VAR_PREFIX, QUERY_NAME, TERM_LEVEL, TERM_NAME TERM_ID required. combination variables allow creation grouping variable.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"input","dir":"Articles","previous_headings":"Structure of the Query Dataset > Required Content","what":"Input","title":"Queries Dataset Documentation","text":"VAR_PREFIX must character string starting 2 3 letters, followed 2-digits number (e.g. “CQ01”). QUERY_NAME must non missing character string must unique within VAR_PREFIX. TERM_LEVEL must non missing character string. value TERM_LEVEL represents variable dataset used define grouping variables (e.g. AEDECOD,AEBODSYS, AELLTCD). function derive_vars_query() check value given TERM_LEVEL corresponding variable input dataset issue error otherwise. Different TERM_LEVEL variables may specified within VAR_PREFIX. TERM_NAME must character string. must populated TERM_ID missing. TERM_ID must integer. must populated TERM_NAME missing.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"output","dir":"Articles","previous_headings":"Structure of the Query Dataset > Required Content","what":"Output","title":"Queries Dataset Documentation","text":"VAR_PREFIX used create grouping variable appending suffix “NAM”. variable now referred ABCzzNAM: name grouping variable. E.g. VAR_PREFIX == \"SMQ01\" create SMQ01NAM variable. VAR_PREFIX, new ABCzzNAM variable created dataset. QUERY_NAME used populate corresponding ABCzzNAM variable. TERM_LEVEL used identify variables dataset used perform grouping (e.g. AEDECOD,AEBODSYS, AELLTCD). TERM_NAME (character variables), TERM_ID (numeric variables) used identify records meeting criteria dataset based variable defined TERM_LEVEL. Result: record dataset, variable defined TERM_LEVEL match term TERM_NAME (character variables) TERM_ID (numeric variables) datasets_queries, ABCzzNAM populated QUERY_NAME. Note: type (numeric character) variable defined TERM_LEVEL checked dataset. variable character variable (e.g. AEDECOD), expected TERM_NAME populated, numeric variable (e.g. AEBDSYCD), expected TERM_ID populated, otherwise error issued.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"example","dir":"Articles","previous_headings":"Structure of the Query Dataset > Required Content","what":"Example","title":"Queries Dataset Documentation","text":"example, one standard MedDRA query (VAR_PREFIX = \"SMQ01\") one customized query (VAR_PREFIX = \"CQ02\") defined analyze adverse events. standard MedDRA query variable SMQ01NAM [VAR_PREFIX] populated “Standard Query 1” [QUERY_NAME] preferred term (AEDECOD) [TERM_LEVEL] dataset equal “AE1” “AE2” [TERM_NAME] customized query (CQ02NAM) [VAR_PREFIX] populated “Query 2” [QUERY_NAME] Low Level Term Code (AELLTCD) [TERM_LEVEL] dataset equal 10 [TERM_ID] preferred term (AEDECOD) [TERM_LEVEL] dataset equal “AE4” [TERM_NAME].","code":""},{"path":[]},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"output-dataset","dir":"Articles","previous_headings":"Structure of the Query Dataset > Required Content > Example","what":"Output Dataset","title":"Queries Dataset Documentation","text":"Generated calling derive_vars_query(dataset = ae, dataset_queries = ds_query). Subject 0001 one event meeting Standard Query 1 criteria (AEDECOD = \"AE1\") two events meeting customized query (AELLTCD = 10 AEDECOD = \"AE4\").","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"optional-content","dir":"Articles","previous_headings":"Structure of the Query Dataset","what":"Optional Content","title":"Queries Dataset Documentation","text":"standardized MedDRA Queries added dataset, expected name query (ABCzzNAM) populated along number code (ABCzzCD), Broad Narrow scope (ABCzzSC). following variables can added queries_datset derive information.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"input-1","dir":"Articles","previous_headings":"Structure of the Query Dataset > Optional Content","what":"Input","title":"Queries Dataset Documentation","text":"QUERY_ID must integer. QUERY_SCOPE must character string. Possible values : “BROAD”, “NARROW” NA. QUERY_SCOPE_NUM must integer. Possible values : 1, 2 NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"output-1","dir":"Articles","previous_headings":"Structure of the Query Dataset > Optional Content","what":"Output","title":"Queries Dataset Documentation","text":"QUERY_ID, QUERY_SCOPE QUERY_SCOPE_NUM used way QUERY_NAME (see ) help creation ABCzzCD, ABCzzSC ABCzzSCN variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/queries_dataset.html","id":"output-variables","dir":"Articles","previous_headings":"Structure of the Query Dataset > Optional Content","what":"Output Variables","title":"Queries Dataset Documentation","text":"variables optional populated dataset_queries, corresponding output variable created:","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating Questionnaire ADaMs","text":"article describes creating questionnaire ADaMs. Although questionnaire data collected single SDTM dataset (QS), usually make sense create single ADQS dataset questionnaire analyses. example, univariate analysis scores visit requires different variables time--event analysis. Therefore vignette provide programming workflow complete dataset, provides examples deriving common types questionnaire parameters. moment, admiral provide functions metadata specific questionnaires functionality handling vast amount questionnaires related parameters, e.g. metadata structure storing parameter definitions functions reading metadata. plan provide future releases. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating Questionnaire ADaMs","text":"examples vignette require following packages.","code":"library(dplyr) library(tidyr) library(tibble) library(admiral)"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example Data","title":"Creating Questionnaire ADaMs","text":"vignette use example data CDISC ADaM Supplements (Generalized Anxiety Disorder 7-Item Version 2 (GAD-7), Geriatric Depression Scale Short Form (GDS-SF))1:","code":"data(\"example_qs\") qs <- example_qs adsl <- tribble(   ~STUDYID, ~USUBJID, ~SITEID, ~ITTFL,    ~TRTP, ~TRTSDT,                      ~DTHCAUS,   \"STUDYX\",  \"P0001\",     13L,    \"Y\", \"DRUG A\", lubridate::ymd(\"2012-11-16\"), NA_character_,   \"STUDYX\",  \"P0002\",     11L,    \"Y\", \"DRUG B\", lubridate::ymd(\"2012-11-16\"), NA_character_ )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"original-items","dir":"Articles","previous_headings":"","what":"Original Items","title":"Creating Questionnaire ADaMs","text":"original items, .e. answers questionnaire questions, can handled way BDS finding ADaM. example: handle unscheduled visits normal visits. deriving visits based time-windows, see Visit Period Variables. flagging values used analysis, see derive_var_extreme_flag(). Please note example data, numeric values answers mapped SDTM (QSSTRESN) can used deriving scores. Depending question, QSORRES == \"YES\" mapped QSSTRESN = 0 QSSTRESN = 1. QSSTRESN values ready used deriving scores require transformation, recommended QSSTRESN kept ADaM dataset traceability, transformed value stored AVAL, since ’s used score calculation.","code":"adqs <- qs %>%   # Add ADSL variables   derive_vars_merged(     dataset_add = adsl,     new_vars = exprs(TRTSDT, DTHCAUS),     by_vars = exprs(STUDYID, USUBJID)   ) %>%   # Add analysis parameter variables   mutate(     PARAMCD = QSTESTCD,     PARAM = QSTEST,     PARCAT1 = QSCAT,     AVALC = QSORRES,     AVAL = QSSTRESN   ) %>%   # Add timing variables   derive_vars_dt(new_vars_prefix = \"A\", dtc = QSDTC) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %>%   mutate(     AVISIT = if_else(ADT <= TRTSDT, \"BASELINE\", VISIT),     AVISITN = if_else(ADT <= TRTSDT, 0, VISITNUM)   )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"scales-and-scores","dir":"Articles","previous_headings":"","what":"Scales and Scores","title":"Creating Questionnaire ADaMs","text":"Scales Scores often derived sum average across subset items. GAD-7 questionnaire, total score derived sum. derive_summary_records() function sum() can used derive new parameter. selecting parameters summarized, regular expressions like example may helpful. example derive separate ADaM dataset questionnaire. Depending analysis needs, also possible ADaM contains one questionnaire questionnaires. GDS-SF questionnaire, total score defined average item values transformed range [0, 15] rounded next integer. five items missing, total score considered missing. parameter can derived compute_scale() derive_summary_records(): deriving scores visit, baseline change baseline variables can derived:","code":"adgad7 <- adqs %>%   # Select records to keep in the GAD-7 ADaM   filter(PARCAT1 == \"GAD-7 V2\") %>%   derive_summary_records(     by_vars = exprs(STUDYID, USUBJID, AVISIT, ADT, ADY, TRTSDT),     analysis_var = AVAL,     summary_fun = function(x) sum(x, na.rm = TRUE),     # Select records contributing to total score     filter = str_detect(PARAMCD, \"GAD020[1-7]\"),     set_values_to = exprs(       PARAMCD = \"GAD02TS\",       PARAM = \"GAD02-Total Score - Analysis\"     )   ) adgdssf <- adqs %>%   # Select records to keep in the GDS-SF ADaM   filter(PARCAT1 == \"GDS SHORT FORM\") %>%   derive_summary_records(     by_vars = exprs(STUDYID, USUBJID, AVISIT, ADT, ADY, TRTSDT),     analysis_var = AVAL,     summary_fun = function(x) {       compute_scale(         x,         source_range = c(0, 1),         target_range = c(0, 15),         min_n = 10       ) %>%         ceiling()     },     # Select records contributing to total score     filter = str_detect(PARAMCD, \"GDS02[01][0-9]\"),     set_values_to = exprs(       PARAMCD = \"GDS02TS\",       PARAM = \"GDS02- Total Score - Analysis\"     )   ) adgdssf <- adgdssf %>%   # Flag baseline records (last before treatement start)   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(STUDYID, USUBJID, PARAMCD),       order = exprs(ADT),       new_var = ABLFL,       mode = \"last\"     ),     filter = !is.na(AVAL) & ADT <= TRTSDT   ) %>%   # Derive baseline and change from baseline variables   derive_var_base(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     source_var = AVAL,     new_var = BASE   ) %>%   derive_var_chg() %>%   derive_var_pchg() %>%   # Derive sequence number   derive_var_obs_number(     by_vars = exprs(STUDYID, USUBJID),     order = exprs(PARAMCD, ADT),     check_type = \"error\"   )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"timetodeterioration","dir":"Articles","previous_headings":"","what":"Time to Deterioration/Improvement","title":"Creating Questionnaire ADaMs","text":"time event parameters require specific variables like CNSR, STARTDT, EVNTDESC, makes sense create separate time event dataset . However, might useful create flags categorization variables ADQS. example: time deterioration parameter can derived :","code":"adgdssf <- adgdssf %>%   mutate(     AVALCAT1 = if_else(       PARAMCD == \"GDS02TS\",       case_when(         AVAL <= 5 ~ \"Normal\",         AVAL <= 10 ~ \"Possible Depression\",         AVAL > 10 ~ \"Likely Depression\"       ),       NA_character_     ),     AVALCAT1N = if_else(       PARAMCD == \"GDS02TS\",       case_when(         AVAL <= 5 ~ 0L,         AVAL <= 10 ~ 1L,         AVAL > 10 ~ 2L       ),       NA_integer_     )   ) %>%   derive_var_base(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     source_var = AVALCAT1,     new_var = BASECAT1   ) %>%   derive_var_base(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     source_var = AVALCAT1N,     new_var = BASECA1N   ) %>%   mutate(     CHGCAT1 = case_when(       AVALCAT1N > BASECA1N ~ \"WORSENED\",       AVALCAT1N == BASECA1N ~ \"NO CHANGE\",       AVALCAT1N < BASECA1N ~ \"IMPROVED\",     )   ) # Define event deterioration_event <- event_source(   dataset_name = \"adqs\",   filter = PARAMCD == \"GDS02TS\" & CHGCAT1 == \"WORSENED\",   date = ADT,   set_values_to = exprs(     EVNTDESC = \"DEPRESSION WORSENED\",     SRCDOM = \"ADQS\",     SRCVAR = \"ADT\",     SRCSEQ = ASEQ   ) )  # Define censoring at last assessment last_valid_assessment <- censor_source(   dataset_name = \"adqs\",   filter = PARAMCD == \"GDS02TS\" & !is.na(CHGCAT1),   date = ADT,   set_values_to = exprs(     EVNTDESC = \"LAST ASSESSMENT\",     SRCDOM = \"ADQS\",     SRCVAR = \"ADT\",     SRCSEQ = ASEQ   ) )  # Define censoring at treatment start (for subjects without assessment) start <- censor_source(   dataset_name = \"adsl\",   date = TRTSDT,   set_values_to = exprs(     EVNTDESC = \"TREATMENT START\",     SRCDOM = \"ADSL\",     SRCVAR = \"TRTSDT\"   ) )  adgdstte <- derive_param_tte(   dataset_adsl = adsl,   source_datasets = list(adsl = adsl, adqs = adgdssf),   start_date = TRTSDT,   event_conditions = list(deterioration_event),   censor_conditions = list(last_valid_assessment, start),   set_values_to = exprs(     PARAMCD = \"TTDEPR\",     PARAM = \"Time to depression\"   ) ) %>%   derive_vars_duration(     new_var = AVAL,     start_date = STARTDT,     end_date = ADT   )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"time-to-confirmeddefinitive-deteriorationimprovement","dir":"Articles","previous_headings":"","what":"Time to Confirmed/Definitive Deterioration/Improvement","title":"Creating Questionnaire ADaMs","text":"derivation confirmed/definitive deterioration/improvement parameters similar unconfirmed deterioration parameters except event based CHGCATy, confirmation flag variable. confirmation flag can derived derive_var_joined_exist_flag(). example, flagging deteriorations, confirmed second assessment least seven days later: flagging deteriorations two consecutive assessments considering death due progression last assessment confirmation, tmp_obs_nr_var argument helpful: definitive deterioration (deterioration following assessments), parameter summary functions like () can used filter condition: time--event parameter can derived way unconfirmed parameters (see Time Deterioration/Improvement).","code":"adgdssf <- adgdssf %>%   derive_var_joined_exist_flag(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT),     new_var = CDETFL,     join_vars = exprs(CHGCAT1, ADY),     join_type = \"after\",     filter = CHGCAT1 == \"WORSENED\" &       CHGCAT1.join == \"WORSENED\" &       ADY.join >= ADY + 7   ) # Flagging deterioration at two consecutive assessments adgdssf <- adgdssf %>%   derive_var_joined_exist_flag(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT),     new_var = CONDETFL,     join_vars = exprs(CHGCAT1),     join_type = \"after\",     tmp_obs_nr_var = tmp_obs_nr,     filter = CHGCAT1 == \"WORSENED\" &       CHGCAT1.join == \"WORSENED\" &       tmp_obs_nr.join == tmp_obs_nr + 1   ) %>%   # Flagging deterioration confirmed by   # - a second deterioration at least 7 days later or   # - deterioration at the last assessment and death due to progression   derive_var_joined_exist_flag(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT),     new_var = CDTDTHFL,     join_vars = exprs(CHGCAT1, ADY),     join_type = \"after\",     tmp_obs_nr_var = tmp_obs_nr,     filter = CHGCAT1 == \"WORSENED\" & (       CHGCAT1.join == \"WORSENED\" & ADY.join >= ADY + 7 |         tmp_obs_nr == max(tmp_obs_nr.join) & DTHCAUS == \"PROGRESSIVE DISEASE\")   ) adgdssf <- adgdssf %>%   derive_var_joined_exist_flag(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT),     new_var = DEFDETFL,     join_vars = exprs(CHGCAT1),     join_type = \"after\",     filter = CHGCAT1 == \"WORSENED\" & all(CHGCAT1.join == \"WORSENED\")   )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"worstbest-answer","dir":"Articles","previous_headings":"","what":"Worst/Best Answer","title":"Creating Questionnaire ADaMs","text":"class parameters can used worst answer set yes/answers selected. example, yes/answers “sleep”, “Waking three times”, “30 minutes fall asleep” collected, parameter worst sleeping problems derived. example, “sleeping problems” assumed questions answered “”.","code":"adsp <- adqs %>%   filter(PARCAT1 == \"SLEEPING PROBLEMS\") %>%   derive_extreme_event(     by_vars = exprs(USUBJID, AVISIT),     order = exprs(ADY, QSSEQ),     mode = \"first\",     events = list(       event(         condition = PARAMCD == \"SP0101\" & AVALC == \"YES\",         set_values_to = exprs(           AVALC = \"No sleep\",           AVAL = 1         )       ),       event(         condition = PARAMCD == \"SP0102\" & AVALC == \"YES\",         set_values_to = exprs(           AVALC = \"Waking up more than three times\",           AVAL = 2         )       ),       event(         condition = PARAMCD == \"SP0103\" & AVALC == \"YES\",         set_values_to = exprs(           AVALC = \"More than 30 mins to fall asleep\",           AVAL = 3         )       ),       event(         condition = all(AVALC == \"NO\"),         set_values_to = exprs(           AVALC = \"No sleeping problems\",           AVAL = 4         )       ),       event(         condition = TRUE,         set_values_to = exprs(           AVALC = \"Missing\",           AVAL = 99         )       )     ),     set_values_to = exprs(       PARAMCD = \"SP01WSP\",       PARAM = \"Worst Sleeping Problems\"     )   )"},{"path":"https://pharmaverse.github.io/admiral/articles/questionnaires.html","id":"completion","dir":"Articles","previous_headings":"","what":"Completion","title":"Creating Questionnaire ADaMs","text":"Parameters completion, like “least 90% questions answered”, can derived derive_summary_records(). Please note denominator may depend answers questions. example, given questionnaire might direct someone go question #4 directly question #8 based response question #4, questions #5, #6 #7 apply case. missed visits need taken account, expected records can added input dataset calling derive_expected_records():","code":"adgdssf <- adgdssf %>%   derive_summary_records(     filter = str_detect(PARAMCD, \"GDS02[01][0-9]\"),     by_vars = exprs(USUBJID, AVISIT),     analysis_var = AVAL,     summary_fun = function(x) sum(!is.na(x)) / 15 >= 0.9,     set_values_to = exprs(       PARAMCD = \"COMPL90P\",       PARAM = \"Completed at least 90% of questions?\",     )   ) %>%   mutate(     AVALC = if_else(       PARAMCD == \"COMPL90P\",       if_else(         AVAL == 1,         \"YES\",         \"NO\"       ),       AVALC     )   ) # Create dataset with expected visits and parameters (GDS0201 - GDS0215) parm_visit_ref <- crossing(   tribble(     ~AVISIT,    ~AVISITN,     \"BASELINE\",        0,     \"VISIT 2\",         2,     \"VISIT 3\",         3,     \"VISIT 4\",         4,     \"VISIT 5\",         5   ),   tibble(PARAMCD = sprintf(\"GDS02%02d\", seq(1, 15))) )  adgdssf <- adgdssf %>%   derive_expected_records(     dataset_expected_obs = parm_visit_ref,     by_vars = exprs(USUBJID),     set_values_to = exprs(       filled_in = 1     )   ) %>%   derive_summary_records(     filter = str_detect(PARAMCD, \"GDS02[01][0-9]\"),     by_vars = exprs(USUBJID, AVISIT),     analysis_var = AVAL,     summary_fun = function(x) all(!is.na(x)),     set_values_to = exprs(       PARAMCD = \"COMPLALL\",       PARAM = \"Completed all questions?\"     )   ) %>%   mutate(     AVALC = if_else(       PARAMCD == \"COMPLALL\",       if_else(         AVAL == 1,         \"YES\",         \"NO\"       ),       AVALC     )   ) %>%   filter(is.na(filled_in)) %>%   select(-filled_in)"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visit and Period Variables","text":"derivation visit variables like AVISIT, AVISITN, AWLO, AWHI, … period, subperiod, phase variables like APERIOD, TRT01A, TRT02A, ASPER, PHSDTM, PHEDTM, … highly study-specific. Therefore admiral provide functions derive variables. However, common scenarios like visit assignments based time windows deriving BDS period variables ADSL period variables, functions provided support derivations.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Visit and Period Variables","text":"examples vignette require following packages.","code":"library(admiral) library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"visits","dir":"Articles","previous_headings":"","what":"Visit variables (AVISIT, AVISITN, AWLO, AWHI, …)","title":"Visit and Period Variables","text":"common ways deriving AVISIT AVISITN : variables set collected visits (VISIT VISITNUM). variables set based time windows. former can achieved simply calling mutate(), like vignettes template scripts. latter (study-specific) reference dataset needs created provides visit start end day (AWLO AWHI) values visit related variables (AVISIT, AVISITN, AWTARGET, …). visits can assigned based analysis day (ADY) calling derive_vars_joined():","code":"windows <- tribble(   ~AVISIT,    ~AWLO, ~AWHI, ~AVISITN, ~AWTARGET,   \"BASELINE\",   -30,     1,        0,         1,   \"WEEK 1\",       2,     7,        1,         5,   \"WEEK 2\",       8,    15,        2,        11,   \"WEEK 3\",      16,    22,        3,        19,   \"WEEK 4\",      23,    30,        4,        26 ) adbds <- tribble(   ~USUBJID, ~ADY,   \"1\",       -33,   \"1\",        -2,   \"1\",         3,   \"1\",        24,   \"2\",        NA, )  derive_vars_joined(   adbds,   dataset_add = windows,   filter_join = AWLO <= ADY & ADY <= AWHI ) #> # A tibble: 5 x 7 #>   USUBJID   ADY AVISIT    AWLO  AWHI AVISITN AWTARGET #>   <chr>   <dbl> <chr>    <dbl> <dbl>   <dbl>    <dbl> #> 1 1         -33 NA          NA    NA      NA       NA #> 2 1          -2 BASELINE   -30     1       0        1 #> 3 1           3 WEEK 1       2     7       1        5 #> 4 1          24 WEEK 4      23    30       4       26 #> 5 2          NA NA          NA    NA      NA       NA"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"period-subperiod-and-phase-variables","dir":"Articles","previous_headings":"","what":"Period, Subperiod, and Phase Variables","title":"Visit and Period Variables","text":"periods, subperiods, phases used, corresponding variables consistent across datasets. can achieved defining periods, subperiods, phases use definition datasets. definition can stored ADSL separate dataset. following examples, separate dataset called period reference dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"period-reference-dataset","dir":"Articles","previous_headings":"Period, Subperiod, and Phase Variables","what":"Period Reference Dataset","title":"Visit and Period Variables","text":"period reference dataset contains one observation per subject period, subperiod, phase. example: admiral functions expect separate datasets periods, subperiods, phases. periods numeric variable APERIOD expected, subperiods numeric variables APERIOD ASPER, phases numeric variable APHASEN.","code":"#> # A tibble: 3 x 6 #>   STUDYID USUBJID APHASEN PHSDT      PHEDT      APHASE    #>   <chr>   <chr>     <int> <date>     <date>     <chr>     #> 1 xyz     1             1 2021-01-04 2021-02-06 TREATMENT #> 2 xyz     1             2 2021-02-07 2021-03-07 FUP       #> 3 xyz     2             1 2021-02-02 2021-03-02 TREATMENT"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"periods_adsl","dir":"Articles","previous_headings":"Period, Subperiod, and Phase Variables","what":"Creating ADSL Period, Subperiod, or Phase Variables","title":"Visit and Period Variables","text":"period reference dataset available, ADSL variables periods, subperiods, phases can created dataset calling derive_vars_period(). example period reference dataset previous section can used add phase variables (PHwSDT, PHwEDT, APHASEw) ADSL:","code":"adsl <- tibble(STUDYID = \"xyz\", USUBJID = c(\"1\", \"2\"))  adsl <- derive_vars_period(   adsl,   dataset_ref = phase_ref,   new_vars = exprs(PHwSDT = PHSDT, PHwEDT = PHEDT, APHASEw = APHASE) ) %>%   select(STUDYID, USUBJID, PH1SDT, PH1EDT, PH2SDT, PH2EDT, APHASE1, APHASE2)  adsl #> # A tibble: 2 x 8 #>   STUDYID USUBJID PH1SDT     PH1EDT     PH2SDT     PH2EDT     APHASE1   APHASE2 #>   <chr>   <chr>   <date>     <date>     <date>     <date>     <chr>     <chr>   #> 1 xyz     1       2021-01-04 2021-02-06 2021-02-07 2021-03-07 TREATMENT FUP     #> 2 xyz     2       2021-02-02 2021-03-02 NA         NA         TREATMENT NA"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"periods_bds","dir":"Articles","previous_headings":"Period, Subperiod, and Phase Variables","what":"Creating BDS and OCCDS Period, Subperiod, or Phase Variables","title":"Visit and Period Variables","text":"period reference dataset available, BDS OCCDS variables periods, subperiods, phases can created calling derive_vars_joined(). example variables APHASEN, PHSDT, PHEDT, APHASE can derived period reference dataset defined . period reference dataset available period variables ADSL, period reference dataset can created ADSL calling create_period_dataset(). example, period reference dataset phases can created ADSL dataset created :","code":"adae <- tribble(   ~USUBJID, ~ASTDT,   \"1\",      \"2021-01-01\",   \"1\",      \"2021-01-05\",   \"1\",      \"2021-02-05\",   \"1\",      \"2021-03-05\",   \"1\",      \"2021-04-05\",   \"2\",      \"2021-02-15\", ) %>%   mutate(ASTDT = ymd(ASTDT))  derive_vars_joined(   adae,   dataset_add = phase_ref,   by_vars = exprs(USUBJID),   filter_join = PHSDT <= ASTDT & ASTDT <= PHEDT ) #> # A tibble: 6 x 7 #>   USUBJID ASTDT      STUDYID APHASEN PHSDT      PHEDT      APHASE    #>   <chr>   <date>     <chr>     <int> <date>     <date>     <chr>     #> 1 1       2021-01-01 NA           NA NA         NA         NA        #> 2 1       2021-01-05 xyz           1 2021-01-04 2021-02-06 TREATMENT #> 3 1       2021-02-05 xyz           1 2021-01-04 2021-02-06 TREATMENT #> 4 1       2021-03-05 xyz           2 2021-02-07 2021-03-07 FUP       #> 5 1       2021-04-05 NA           NA NA         NA         NA        #> 6 2       2021-02-15 xyz           1 2021-02-02 2021-03-02 TREATMENT create_period_dataset(   adsl,   new_vars = exprs(PHSDT = PHwSDT, PHEDT = PHwEDT, APHASE = APHASEw) ) #> # A tibble: 3 x 6 #>   STUDYID USUBJID APHASEN PHSDT      PHEDT      APHASE    #>   <chr>   <chr>     <int> <date>     <date>     <chr>     #> 1 xyz     1             1 2021-01-04 2021-02-06 TREATMENT #> 2 xyz     1             2 2021-02-07 2021-03-07 FUP       #> 3 xyz     2             1 2021-02-02 2021-03-02 TREATMENT"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"treatment-variables-trtxxp-trtxxa-trtp-trta","dir":"Articles","previous_headings":"","what":"Treatment Variables (TRTxxP, TRTxxA, TRTP, TRTA, …)","title":"Visit and Period Variables","text":"studies multiple periods treatment can differ period, e.g. crossover trial. CDISC defines variables planned actual treatments ADSL (TRTxxP, TRTxxA, TRxxPGy, TRxxAGy, …) corresponding variables BDS OCCDS datasets (TRTP, TRTA, TRTPGy, TRTAGy, …). can derived way (step) period, subperiod, phase variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"treatment_adsl","dir":"Articles","previous_headings":"Treatment Variables (TRTxxP, TRTxxA, TRTP, TRTA, …)","what":"Creating ADSL Treatment Variables","title":"Visit and Period Variables","text":"treatment information included period reference dataset, treatment ADSL variables can created calling derive_vars_period():","code":"# Add period variables to ADSL period_ref <- tribble(   ~USUBJID, ~APERIOD, ~APERSDT,     ~APEREDT,     ~TRTA,   \"1\",             1, \"2021-01-04\", \"2021-02-06\", \"DRUG A\",   \"1\",             2, \"2021-02-07\", \"2021-03-07\", \"DRUG B\",   \"2\",             1, \"2021-02-02\", \"2021-03-02\", \"DRUG B\",   \"2\",             2, \"2021-03-03\", \"2021-04-01\", \"DRUG B\" ) %>%   mutate(     STUDYID = \"xyz\",     APERIOD = as.integer(APERIOD),     across(ends_with(\"DT\"), ymd)   )  adsl <- derive_vars_period(   adsl,   dataset_ref = period_ref,   new_vars = exprs(     APxxSDT = APERSDT,     APxxEDT = APEREDT,     TRTxxA = TRTA   ) ) %>%   select(     STUDYID, USUBJID,     TRT01A, TRT02A,     AP01SDT, AP01EDT, AP02SDT, AP02EDT   )  adsl #> # A tibble: 2 x 8 #>   STUDYID USUBJID TRT01A TRT02A AP01SDT    AP01EDT    AP02SDT    AP02EDT    #>   <chr>   <chr>   <chr>  <chr>  <date>     <date>     <date>     <date>     #> 1 xyz     1       DRUG A DRUG B 2021-01-04 2021-02-06 2021-02-07 2021-03-07 #> 2 xyz     2       DRUG B DRUG B 2021-02-02 2021-03-02 2021-03-03 2021-04-01"},{"path":"https://pharmaverse.github.io/admiral/articles/visits_periods.html","id":"treatment_bds","dir":"Articles","previous_headings":"Treatment Variables (TRTxxP, TRTxxA, TRTP, TRTA, …)","what":"Creating BDS and OCCDS Treatment Variables","title":"Visit and Period Variables","text":"period reference dataset available, BDS OCCDS variables treatment can created calling derive_vars_joined(). example variables APERIOD TRTA can derived period reference dataset defined . period reference dataset available period variables ADSL, period reference dataset can created ADSL calling create_period_dataset(). example, period reference dataset periods treatments can created ADSL dataset created :","code":"adae <- tribble(   ~USUBJID, ~ASTDT,   \"1\",      \"2021-01-05\",   \"1\",      \"2021-02-05\",   \"1\",      \"2021-03-05\",   \"1\",      \"2021-04-05\",   \"2\",      \"2021-02-15\",   \"2\",      \"2021-03-10\", ) %>%   mutate(     ASTDT = ymd(ASTDT),     STUDYID = \"xyz\"   )  derive_vars_joined(   adae,   dataset_add = period_ref,   by_vars = exprs(STUDYID, USUBJID),   new_vars = exprs(APERIOD, TRTA),   join_vars = exprs(APERSDT, APEREDT),   filter_join = APERSDT <= ASTDT & ASTDT <= APEREDT ) #> # A tibble: 6 x 5 #>   USUBJID ASTDT      STUDYID APERIOD TRTA   #>   <chr>   <date>     <chr>     <int> <chr>  #> 1 1       2021-01-05 xyz           1 DRUG A #> 2 1       2021-02-05 xyz           1 DRUG A #> 3 1       2021-03-05 xyz           2 DRUG B #> 4 1       2021-04-05 xyz          NA NA     #> 5 2       2021-02-15 xyz           1 DRUG B #> 6 2       2021-03-10 xyz           2 DRUG B create_period_dataset(   adsl,   new_vars = exprs(APERSDT = APxxSDT, APEREDT = APxxEDT, TRTA = TRTxxA) ) #> # A tibble: 4 x 6 #>   STUDYID USUBJID APERIOD APERSDT    APEREDT    TRTA   #>   <chr>   <chr>     <int> <date>     <date>     <chr>  #> 1 xyz     1             1 2021-01-04 2021-02-06 DRUG A #> 2 xyz     1             2 2021-02-07 2021-03-07 DRUG B #> 3 xyz     2             1 2021-02-02 2021-03-02 DRUG B #> 4 xyz     2             2 2021-03-03 2021-04-01 DRUG B"},{"path":"https://pharmaverse.github.io/admiral/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Neitmann. Author, maintainer. Stefan Bundfuss. Author. Ben Straub. Author. Samia Kabi. Author. Gordon Miller. Author. Teckla Akinyi. Author. Andrew Smith. Author. Konstantina Koukourikou. Author. Ross Farrugia. Author. Eric Simms. Author. Annie Yang. Author. Robin Koeger. Author. Sophie Shapcott. Author. Ojesh Upadhyay. Author. Jack McGavigan. Author. Kamila Duniec. Author. Gayatri G. Author. Alana Harris. Author. Mahdi . Author. Pooja Kumari. Author. Claudia Carlucci. Author. Daniil Stefonishin. Author. Sadchla Mascary. Author. Zelos Zhu. Author. Jeffrey Dickinson. Author. Ania Golab. Author. Kangjie Zhang. Author. Daphne Grasselly. Author. Adam Forys. Author. Michael Thorpe. Contributor. Declan Hodges. Contributor. Jaxon Abercrombie. Contributor. Nick Ramirez. Contributor. Pavan Kumar. Contributor. Hamza Rahal. Contributor. Yohann Omnes. Contributor. Alice Ehmann. Contributor. Tom Ratford. Contributor. Vignesh Thanikachalam. Contributor. Ondrej Slama. Contributor. Shimeng Huang. Contributor. James Kim. Contributor. Shan Lee. Contributor. Bill Denney. Contributor. Syed Mubasheer. Contributor. Wenyi Liu. Contributor. Dinakar Kulkarni. Contributor. Franciszek Walkowiak. Contributor. Tamara Senior. Contributor. Jordanna Morrish. Contributor. Anthony Howard. Contributor. Barbara O'Reilly. Contributor. John Kirkpatrick. Contributor. James Black. Contributor. Leena Khatri. Contributor. F. Hoffmann-La Roche AG. Copyright holder, funder. GlaxoSmithKline LLC. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/admiral/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neitmann T, Bundfuss S, Straub B, Kabi S, Miller G, Akinyi T, Smith , Koukourikou K, Farrugia R, Simms E, Yang , Koeger R, Shapcott S, Upadhyay O, McGavigan J, Duniec K, G G, Harris , M, Kumari P, Carlucci C, Stefonishin D, Mascary S, Zhu Z, Dickinson J, Golab , Zhang K, Grasselly D, Forys (2023). admiral: ADaM R Asset Library. https://pharmaverse.github.io/admiral/, https://github.com/pharmaverse/admiral.","code":"@Manual{,   title = {admiral: ADaM in R Asset Library},   author = {Thomas Neitmann and Stefan Bundfuss and Ben Straub and Samia Kabi and Gordon Miller and Teckla Akinyi and Andrew Smith and Konstantina Koukourikou and Ross Farrugia and Eric Simms and Annie Yang and Robin Koeger and Sophie Shapcott and Ojesh Upadhyay and Jack McGavigan and Kamila Duniec and Gayatri G and Alana Harris and Mahdi About and Pooja Kumari and Claudia Carlucci and Daniil Stefonishin and Sadchla Mascary and Zelos Zhu and Jeffrey Dickinson and Ania Golab and Kangjie Zhang and Daphne Grasselly and Adam Forys},   year = {2023},   note = {https://pharmaverse.github.io/admiral/, https://github.com/pharmaverse/admiral}, }"},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"admiral-","dir":"","previous_headings":"","what":"ADaM in R Asset Library","title":"ADaM in R Asset Library","text":"ADaM R Asset Library","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"ADaM in R Asset Library","text":"provide open source, modularized toolbox enables pharmaceutical programming community develop ADaM datasets R.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ADaM in R Asset Library","text":"package available CRAN can installed running install.packages(\"admiral\"). install latest development version package directly GitHub use following code:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  remotes::install_github(\"pharmaverse/admiral.test\", ref = \"devel\") # This is a required dependency of {admiral} remotes::install_github(\"pharmaverse/admiraldev\", ref = \"devel\") # This is a required dependency of {admiral} remotes::install_github(\"pharmaverse/admiral\", ref = \"devel\")"},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"release-schedule","dir":"","previous_headings":"","what":"Release Schedule","title":"ADaM in R Asset Library","text":"admiral releases targeted first Monday last month quarter. Pull Requests frozen week release. admiral family several downstream upstream dependencies release shall done three Phases: Phase 1 release admiraldev, {admiral.test}, admiral core Phase 2 release extension packages, e.g. {admiralonco}, admiralophtha","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"main-goal","dir":"","previous_headings":"","what":"Main Goal","title":"ADaM in R Asset Library","text":"Provide users open source, modularized toolbox create ADaM datasets R. opposed “run 1 line ADaM appears” black-box solution attempt automate ADaM. One key aspects admiral development users users. gives entry point collaborate, co-create contribute harmonized approach developing ADaMs R across pharmaceutical industry.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"ADaM in R Asset Library","text":"set expectations: target admiral ever provide possible solutions ADaM datasets outside study specific needs. depends user’s collaboration contribution help grow time asset library robust, easy use across-industry focus. see coverage 100% ADaM derivations ever achievable—ADaM endless. provide: toolbox re-usable functions utilities create ADaM datasets using R scripts modular manner (“opinionated” design strategy) Pharmaceutical communities companies encouraged contribute admiral following provided programming strategy modular approach Functions comprehensively documented tested, including example calls—listed Reference section Vignettes create ADSL, BDS OCCDS datasets, including example scripts Vignettes ADaM dataset specific functionality (.e. dictionary coding, date imputation, SMQs …)","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"types-of-packages","dir":"","previous_headings":"","what":"Types of Packages","title":"ADaM in R Asset Library","text":"3 foreseeable types admiral packages: Core package—one package containing core functions required create ADaMs, usable company (.e. general derivations, utility functions checks ADSL, OCCDS BDS) TA (Therapeutic Area) package extensions—one package per TA functions specific algorithms requirements particular TA (e.g. {admiralonco}) Company package extensions—specific needs plug-ins company, access metadata (e.g. {admiralroche} {admiralgsk})","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"admiral-manifesto","dir":"","previous_headings":"","what":"Admiral Manifesto","title":"ADaM in R Asset Library","text":"admiral extension packages, prioritize providing users simple adopt toolkit enables produce readable easily constructible ADaM programs. following explains philosophy, try adhere across admiral family packages. isn’t always clear single, straightforward rule, guiding principles adhere admiral. manifesto helps show considerations developers making decisions. four design principles achieve main goal:","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"usability","dir":"","previous_headings":"Admiral Manifesto","what":"Usability","title":"ADaM in R Asset Library","text":"admiral functions easy use. Documentation absolute priority. function reference page cover purpose, descriptions argument permitted values, expected input output, clear real-life examples—users don’t need dig code find answers. Vignettes complement functional documentation help users see best functions can applied achieve ADaM requirements. Functions written structured way users able read, re-use extend study specific purposes needed (see Readability ).","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"simplicity","dir":"","previous_headings":"Admiral Manifesto","what":"Simplicity","title":"ADaM in R Asset Library","text":"admiral functions clear purpose. try ever design single functions achieve numerous different derivations. example user pick function >10 different arguments chances going difficult understand function applied specific need. intention arguments/parameters can influence output function calculated, change purpose function. try combine similar tasks algorithms one function applicable reduce amount repetitive functions similar algorithms group together similar functionality increase usability (e.g. one study day calculation rather function per variable). strive design functions general trying fulfill multiple, complex purposes. Functions allow expressions arguments used code snippets function calls. recommend avoid copy paste complex computational algorithms repetitive code like checks advise wrap function. However also like avoid multi-layered functional nesting, needs considered carefully keep nesting 3-4 functions exception rather rule.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"findability","dir":"","previous_headings":"Admiral Manifesto","what":"Findability","title":"ADaM in R Asset Library","text":"admiral functions easily findable. growing code base, across family packages, make every effort make functions easily findable. use consistent naming conventions across functions, provide vignettes ADaM templates help users get started build familiarity. admiral family package website searchable. avoid repetitive functions similar tasks (explained study day example). package extension kept focused specific scope, e.g. features relevant across multiple extension packages moved core admiral package.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"readability","dir":"","previous_headings":"Admiral Manifesto","what":"Readability","title":"ADaM in R Asset Library","text":"admiral functions follow Programming Strategy developers contributors must follow, code high degree consistency readability. mandate use tidyverse (e.g. dplyr) similar functionality existing base R. sections code perform actual derivations (e.g. besides assertions basic utilities), try limit nesting many dependencies functions. Modularity focus—don’t try achieve many steps one. code well commented. recognize user Health Authority reviewer may wish delve code base (especially given open source setting), users may need extend/adapt code study specific needs. therefore want module understandable , admiral developers.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"ADaM in R Asset Library","text":"Please go Get Started section start using admiral Please see pharmaverse YouTube channel videos related admiral. Please see Programming Strategy understand functions created Please see FAQ frequent questions Please see Contribution Model get involved making contributions Please see FAQ: R Package Versions develop certain R package versions.","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"conference-presentations","dir":"","previous_headings":"","what":"Conference Presentations","title":"ADaM in R Asset Library","text":"R/Pharma 2021 talk (recording) PHUSE US Connect 2022 pharmaverse workshop (slides materials—including admiral workshop slides PHUSE EU Connect 2021)","code":""},{"path":"https://pharmaverse.github.io/admiral/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"ADaM in R Asset Library","text":"use following support communications user developer community: Slack—informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues—direct feedback, enhancement requests raising bugs","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiral: ADaM in R Asset Library — admiral-package","title":"admiral: ADaM in R Asset Library — admiral-package","text":"toolbox programming Clinical Data Interchange Standards Consortium (CDISC) compliant Analysis Data Model (ADaM) datasets R. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team, 2021, https://www.cdisc.org/standards/foundational/adam/adamig-v1-3-release-package).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/admiral-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiral: ADaM in R Asset Library — admiral-package","text":"Maintainer: Thomas Neitmann thomas.neitmann@roche.com Authors: Stefan Bundfuss Ben Straub Samia Kabi Gordon Miller Teckla Akinyi Andrew Smith Konstantina Koukourikou Ross Farrugia Eric Simms Annie Yang Robin Koeger Sophie Shapcott Ojesh Upadhyay Jack McGavigan Kamila Duniec Gayatri G Alana Harris Mahdi Pooja Kumari Claudia Carlucci Daniil Stefonishin Sadchla Mascary Zelos Zhu Jeffrey Dickinson Ania Golab Kangjie Zhang Daphne Grasselly Adam Forys contributors: Michael Thorpe [contributor] Declan Hodges [contributor] Jaxon Abercrombie [contributor] Nick Ramirez [contributor] Pavan Kumar [contributor] Hamza Rahal [contributor] Yohann Omnes [contributor] Alice Ehmann [contributor] Tom Ratford [contributor] Vignesh Thanikachalam [contributor] Ondrej Slama [contributor] Shimeng Huang [contributor] James Kim [contributor] Shan Lee [contributor] Bill Denney [contributor] Syed Mubasheer [contributor] Wenyi Liu [contributor] Dinakar Kulkarni [contributor] Franciszek Walkowiak [contributor] Tamara Senior [contributor] Jordanna Morrish [contributor] Anthony Howard [contributor] Barbara O'Reilly [contributor] John Kirkpatrick [contributor] James Black [contributor] Leena Khatri [contributor] F. Hoffmann-La Roche AG [copyright holder, funder] GlaxoSmithKline LLC [copyright holder, funder]","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adlb.html","id":null,"dir":"Reference","previous_headings":"","what":"Lab Analysis Dataset — admiral_adlb","title":"Lab Analysis Dataset — admiral_adlb","text":"example lab analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adlb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lab Analysis Dataset — admiral_adlb","text":"","code":"admiral_adlb"},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adlb.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lab Analysis Dataset — admiral_adlb","text":"object class tbl_df (inherits tbl, data.frame) 3779 rows 111 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adlb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lab Analysis Dataset — admiral_adlb","text":"Derived adlb template, filtered due dataset size following USUBJIDs: 01-701-1015, 01-701-1023, 01-701-1028, 01-701-1033, 01-701-1034, 01-701-1047, 01-701-1097, 01-705-1186, 01-705-1292, 01-705-1310, 01-708-1286","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject Level Analysis Dataset — admiral_adsl","title":"Subject Level Analysis Dataset — admiral_adsl","text":"example subject level analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject Level Analysis Dataset — admiral_adsl","text":"","code":"admiral_adsl"},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subject Level Analysis Dataset — admiral_adsl","text":"object class tbl_df (inherits tbl, data.frame) 306 rows 50 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/admiral_adsl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subject Level Analysis Dataset — admiral_adsl","text":"Derived dm ds datasets using {admiral} (https://github.com/pharmaverse/admiral/blob/main/inst/templates/ad_adsl.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/assert_db_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check required parameters for a basket — assert_db_requirements","title":"Check required parameters for a basket — assert_db_requirements","text":"basket (SMQ, SDG, ....) requested, version function access database must provided. function checks requirements.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_db_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check required parameters for a basket — assert_db_requirements","text":"","code":"assert_db_requirements(   version,   version_arg_name,   fun,   fun_arg_name,   queries,   i )"},{"path":"https://pharmaverse.github.io/admiral/reference/assert_db_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check required parameters for a basket — assert_db_requirements","text":"version Version provided user version_arg_name Name argument providing version fun Function provided user fun_arg_name Name argument providing function queries Queries provide user Index query checked","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_db_requirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check required parameters for a basket — assert_db_requirements","text":"error issued version fun null.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/assert_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Asserts Requirements for Terms for Queries — assert_terms","title":"Asserts Requirements for Terms for Queries — assert_terms","text":"function checks requirements terms queries provided user. terms provided directly query definition via user provided function accessing SMQ SDG database.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asserts Requirements for Terms for Queries — assert_terms","text":"","code":"assert_terms(   terms,   expect_query_name = FALSE,   expect_query_id = FALSE,   source_text )"},{"path":"https://pharmaverse.github.io/admiral/reference/assert_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asserts Requirements for Terms for Queries — assert_terms","text":"terms Terms provided user expect_query_name QUERY_NAME column expected? expect_query_id QUERY_ID column expected? source_text Text describing source terms, e.g., \"data frame provided definition element\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asserts Requirements for Terms for Queries — assert_terms","text":"error issued terms data frame, terms zero observations, TERM_LEVEL variable terms, neither TERM_NAME TERM_ID variable terms, expect_query_name == TRUE QUERY_NAME variable terms, expect_query_id == TRUE QUERY_ID variable terms,","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/assert_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asserts Requirements for Terms for Queries — assert_terms","text":"","code":"try(   assert_terms(     terms = 42,     source_text = \"object provided by the `definition` element\"   ) ) #> Error in assert_terms(terms = 42, source_text = \"object provided by the `definition` element\") :  #>   object provided by the `definition` element is not a data frame but `42`."},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"Verify Dataset Required Format Queries Dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"","code":"assert_valid_queries(queries, queries_name)"},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"queries data.frame. queries_name Name queries dataset, string.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"function throws error requirements met.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"Check dataset following columns VAR_PREFIX, e.g., SMQ01, CQ12 QUERY_NAME, non NA, must unique per VAR_PREFIX QUERY_ID, NA, must unique per VAR_PREFIX QUERY_SCOPE, 'BROAD', 'NARROW', NA QUERY_SCOPE_NUM, 1, 2, NA TERM_LEVEL, e.g., \"AEDECOD\", \"AELLT\", \"AELLTCD\", ... TERM_NAME, character, NA observations TERM_ID non-NA TERM_ID, integer, NA observations TERM_NAME non-NA","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/assert_valid_queries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify if a Dataset Has the Required Format as Queries Dataset. — assert_valid_queries","text":"","code":"data(\"queries\") assert_valid_queries(queries, \"queries\")"},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv4.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata Holding Grading Criteria for NCI-CTCAEv4 — atoxgr_criteria_ctcv4","title":"Metadata Holding Grading Criteria for NCI-CTCAEv4 — atoxgr_criteria_ctcv4","text":"Metadata Holding Grading Criteria NCI-CTCAEv4","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata Holding Grading Criteria for NCI-CTCAEv4 — atoxgr_criteria_ctcv4","text":"","code":"atoxgr_criteria_ctcv4"},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata Holding Grading Criteria for NCI-CTCAEv4 — atoxgr_criteria_ctcv4","text":"object class tbl_df (inherits tbl, data.frame) 40 rows 13 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metadata Holding Grading Criteria for NCI-CTCAEv4 — atoxgr_criteria_ctcv4","text":"metadata origin ADLB Grading Spec Excel file ships {admiral} can accessed using system.file(\"adlb_grading/adlb_grading_spec.xlsx\", package = \"admiral\") sheet = \"NCICTCAEv4\". dataset contained following columns: SOC: variable hold SOC lab test criteria. TERM: variable hold term describing criteria applied particular lab test, eg. 'Anemia' 'INR Increased'. Note: variable case insensitive. Grade 1: Criteria defining lab value Grade 1. Grade 2: Criteria defining lab value Grade 2. Grade 3: Criteria defining lab value Grade 3. Grade 4: Criteria defining lab value Grade 4. Grade 5: Criteria defining lab value Grade 5. Definition: Holds definition lab test abnormality. GRADE_CRITERIA_CODE: variable hold code creates grade based defined criteria. SI_UNIT_CHECK: variable hold unit particular lab test. Used check input data criteria based absolute values. VAR_CHECK: List variables required implement lab grade criteria. Use check input data. DIRECTION: variable hold direction abnormality particular lab test value. 'L' LOW values, 'H' HIGH values. Note: variable case insensitive. COMMENT: Holds information regarding rationale behind implementation grading criteria. Note: Variables SOC, TERM, Grade 1, Grade 2,Grade 3,Grade 4,Grade 5, Definition source document NCI-CTC website defining grading criteria. Common Terminology Criteria Adverse Events (CTCAE)v4.0 variables 'TERM' used admiral code, rest information traceability .","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv5.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata Holding Grading Criteria for NCI-CTCAEv5 — atoxgr_criteria_ctcv5","title":"Metadata Holding Grading Criteria for NCI-CTCAEv5 — atoxgr_criteria_ctcv5","text":"Metadata Holding Grading Criteria NCI-CTCAEv5","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata Holding Grading Criteria for NCI-CTCAEv5 — atoxgr_criteria_ctcv5","text":"","code":"atoxgr_criteria_ctcv5"},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata Holding Grading Criteria for NCI-CTCAEv5 — atoxgr_criteria_ctcv5","text":"object class tbl_df (inherits tbl, data.frame) 37 rows 13 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/atoxgr_criteria_ctcv5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metadata Holding Grading Criteria for NCI-CTCAEv5 — atoxgr_criteria_ctcv5","text":"metadata origin ADLB Grading Spec Excel file ships {admiral} can accessed using system.file(\"adlb_grading/adlb_grading_spec.xlsx\", package = \"admiral\") sheet = \"NCICTCAEv5\". dataset contained following columns: SOC: variable hold SOC lab test criteria. TERM: variable hold term describing criteria applied particular lab test, eg. 'Anemia' 'INR Increased'. Note: variable case insensitive. Grade 1: Criteria defining lab value Grade 1. Grade 2: Criteria defining lab value Grade 2. Grade 3: Criteria defining lab value Grade 3. Grade 4: Criteria defining lab value Grade 4. Grade 5: Criteria defining lab value Grade 5. Definition: Holds definition lab test abnormality. GRADE_CRITERIA_CODE: variable hold code creates grade based defined criteria. SI_UNIT_CHECK: variable hold unit particular lab test. Used check input data criteria based absolute values. VAR_CHECK: List variables required implement lab grade criteria. Use check input data. DIRECTION: variable hold direction abnormality particular lab test value. 'L' LOW values, 'H' HIGH values. Note: variable case insensitive. COMMENT: Holds information regarding rationale behind implementation grading criteria. Note: Variables SOC, TERM, Grade 1, Grade 2,Grade 3,Grade 4,Grade 5, Definition source document NCI-CTC website defining grading criteria. Common Terminology Criteria Adverse Events (CTCAE)v5.0 variables 'TERM' used admiral code, rest information traceability .","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/basket_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a basket_select object — basket_select","title":"Create a basket_select object — basket_select","text":"Create basket_select object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/basket_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a basket_select object — basket_select","text":"","code":"basket_select(name = NULL, id = NULL, scope = NULL, type)"},{"path":"https://pharmaverse.github.io/admiral/reference/basket_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a basket_select object — basket_select","text":"name Name query used select definition query company database. id Identifier query used select definition query company database. scope Scope query used select definition query company database. Permitted Values: \"BROAD\", \"NARROW\", NA_character_ type type argument expects character scalar. passed company specific get_terms() function function can determine sort basket requested","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/basket_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a basket_select object — basket_select","text":"object class basket_select.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/basket_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a basket_select object — basket_select","text":"Exactly one name id must specified.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/call_derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a Single Derivation Multiple Times — call_derivation","title":"Call a Single Derivation Multiple Times — call_derivation","text":"Call single derivation multiple times parameters/arguments fixed across iterations others varying.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/call_derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a Single Derivation Multiple Times — call_derivation","text":"","code":"call_derivation(dataset = NULL, derivation, variable_params, ...)"},{"path":"https://pharmaverse.github.io/admiral/reference/call_derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a Single Derivation Multiple Times — call_derivation","text":"dataset input dataset derivation derivation function call function performs specific derivation expected. derivation adds variables observations dataset. first argument derivation must expect dataset derivation must return dataset. function must provide dataset argument arguments specified params() objects passed variable_params ... argument. Please note possible specify {dplyr} functions like mutate() summarize(). variable_params list function arguments different across iterations. set function arguments must created using params(). ... number named function arguments stay across iterations. function argument specified inside variable_params ... value variable_params overwrites one ...","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/call_derivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call a Single Derivation Multiple Times — call_derivation","text":"input dataset additional records/variables added depending derivation used.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/call_derivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call a Single Derivation Multiple Times — call_derivation","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(admiral_adsl)  adae <-   select(admiral_ae[sample(1:nrow(admiral_ae), 1000), ], USUBJID, AESTDTC, AEENDTC) %>%   derive_vars_merged(     dataset_add = admiral_adsl,     new_vars = exprs(TRTSDT, TRTEDT),     by_vars = exprs(USUBJID)   )  ## While `derive_vars_dt()` can only add one variable at a time, using `call_derivation()` ## one can add multiple variables in one go call_derivation(   dataset = adae,   derivation = derive_vars_dt,   variable_params = list(     params(dtc = AESTDTC, date_imputation = \"first\", new_vars_prefix = \"AST\"),     params(dtc = AEENDTC, date_imputation = \"last\", new_vars_prefix = \"AEN\")   ),   min_dates = exprs(TRTSDT),   max_dates = exprs(TRTEDT) ) #> # A tibble: 1,000 x 7 #>    USUBJID     AESTDTC    AEENDTC    TRTSDT     TRTEDT     ASTDT      AENDT      #>    <chr>       <chr>      <chr>      <date>     <date>     <date>     <date>     #>  1 01-701-1097 2014-04-19 2014-04-20 2014-01-01 2014-07-09 2014-04-19 2014-04-20 #>  2 01-718-1150 2013-03-15 2013-03-15 2013-01-19 2013-07-29 2013-03-15 2013-03-15 #>  3 01-701-1115 2012-12-02 NA         2012-11-30 2013-01-23 2012-12-02 NA         #>  4 01-706-1049 2013-06-18 2013-06-18 2013-05-14 2013-06-18 2013-06-18 2013-06-18 #>  5 01-701-1363 2013-07-16 NA         2013-05-30 2013-11-27 2013-07-16 NA         #>  6 01-708-1272 2013-03-01 2013-03-07 2013-02-06 2013-03-22 2013-03-01 2013-03-07 #>  7 01-710-1070 2012-12-12 NA         2012-09-08 2013-01-22 2012-12-12 NA         #>  8 01-710-1408 2013-01-31 2013-02-09 2013-01-05 2013-07-12 2013-01-31 2013-02-09 #>  9 01-710-1300 2013-01-31 NA         2012-12-15 2013-02-15 2013-01-31 NA         #> 10 01-701-1028 2013-08-08 NA         2013-07-19 2014-01-14 2013-08-08 NA         #> # … with 990 more rows  ## The above call using `call_derivation()` is equivalent to the following adae %>%   derive_vars_dt(     new_vars_prefix = \"AST\",     dtc = AESTDTC,     date_imputation = \"first\",     min_dates = exprs(TRTSDT),     max_dates = exprs(TRTEDT)   ) %>%   derive_vars_dt(     new_vars_prefix = \"AEN\",     dtc = AEENDTC,     date_imputation = \"last\",     min_dates = exprs(TRTSDT),     max_dates = exprs(TRTEDT)   ) #> # A tibble: 1,000 x 7 #>    USUBJID     AESTDTC    AEENDTC    TRTSDT     TRTEDT     ASTDT      AENDT      #>    <chr>       <chr>      <chr>      <date>     <date>     <date>     <date>     #>  1 01-701-1097 2014-04-19 2014-04-20 2014-01-01 2014-07-09 2014-04-19 2014-04-20 #>  2 01-718-1150 2013-03-15 2013-03-15 2013-01-19 2013-07-29 2013-03-15 2013-03-15 #>  3 01-701-1115 2012-12-02 NA         2012-11-30 2013-01-23 2012-12-02 NA         #>  4 01-706-1049 2013-06-18 2013-06-18 2013-05-14 2013-06-18 2013-06-18 2013-06-18 #>  5 01-701-1363 2013-07-16 NA         2013-05-30 2013-11-27 2013-07-16 NA         #>  6 01-708-1272 2013-03-01 2013-03-07 2013-02-06 2013-03-22 2013-03-01 2013-03-07 #>  7 01-710-1070 2012-12-12 NA         2012-09-08 2013-01-22 2012-12-12 NA         #>  8 01-710-1408 2013-01-31 2013-02-09 2013-01-05 2013-07-12 2013-01-31 2013-02-09 #>  9 01-710-1300 2013-01-31 NA         2012-12-15 2013-02-15 2013-01-31 NA         #> 10 01-701-1028 2013-08-08 NA         2013-07-19 2014-01-14 2013-08-08 NA         #> # … with 990 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/call_user_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calls a Function Provided by the User — call_user_fun","title":"Calls a Function Provided by the User — call_user_fun","text":"Calls function provided user adds function call error message call fails.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/call_user_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calls a Function Provided by the User — call_user_fun","text":"","code":"call_user_fun(call)"},{"path":"https://pharmaverse.github.io/admiral/reference/call_user_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calls a Function Provided by the User — call_user_fun","text":"call Call executed","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/call_user_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calls a Function Provided by the User — call_user_fun","text":"return value function call","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/call_user_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calls a Function Provided by the User — call_user_fun","text":"","code":"call_user_fun(compute_bmi(   height = 172,   weight = 60 )) #> [1] 20.28123  try(call_user_fun(compute_bmi(   height = 172,   weight = \"hallo\" ))) #> Error in value[[3L]](cond) :  #>   Calling compute_bmi(height = 172, weight = \"hallo\") caused the following error: #> Error in `assert_numeric_vector()`: #> ! `weight` must be a numeric vector but is `\"hallo\"` #>"},{"path":"https://pharmaverse.github.io/admiral/reference/censor_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a censor_source Object — censor_source","title":"Create a censor_source Object — censor_source","text":"censor_source objects used define censorings input derive_param_tte() function.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/censor_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a censor_source Object — censor_source","text":"","code":"censor_source(   dataset_name,   filter = NULL,   date,   censor = 1,   set_values_to = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/censor_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a censor_source Object — censor_source","text":"dataset_name name source dataset name refers dataset provided source_datasets parameter derive_param_tte(). filter unquoted condition selecting observations dataset events possible censoring time points. date variable providing date event censoring. date, datetime can specified. unquoted symbol expected. Refer derive_vars_dt() impute derive date date character vector date object. censor Censoring value CDISC strongly recommends using 0 events positive integers censoring. set_values_to named list returned exprs() defining variables set event censoring, e.g. exprs(EVENTDESC = \"DEATH\", SRCDOM = \"ADSL\", SRCVAR = \"DTHDT\"). values must symbol, character string, numeric value, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/censor_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a censor_source Object — censor_source","text":"object class censor_source, inheriting class tte_source","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/censor_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a censor_source Object — censor_source","text":"","code":"# Last study date known alive censor  censor_source(   dataset_name = \"adsl\",   date = LSTALVDT,   set_values_to = exprs(     EVNTDESC = \"ALIVE\",     SRCDOM = \"ADSL\",     SRCVAR = \"LSTALVDT\"   ) ) #> <censor_source> object #> dataset_name: \"adsl\" #> filter: NULL #> date: LSTALVDT #> censor: 1L #> set_values_to: #>   EVNTDESC: \"ALIVE\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"LSTALVDT\""},{"path":"https://pharmaverse.github.io/admiral/reference/chr2vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a Character Vector into a List of Expressions — chr2vars","title":"Turn a Character Vector into a List of Expressions — chr2vars","text":"Turn character vector list expressions","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/chr2vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a Character Vector into a List of Expressions — chr2vars","text":"","code":"chr2vars(chr)"},{"path":"https://pharmaverse.github.io/admiral/reference/chr2vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a Character Vector into a List of Expressions — chr2vars","text":"chr character vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/chr2vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a Character Vector into a List of Expressions — chr2vars","text":"list expressions returned exprs()","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/chr2vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a Character Vector into a List of Expressions — chr2vars","text":"","code":"chr2vars(c(\"USUBJID\", \"AVAL\")) #> [[1]] #> USUBJID #>  #> [[2]] #> AVAL #>"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Body Mass Index (BMI) — compute_bmi","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"Computes BMI height weight","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"","code":"compute_bmi(height, weight)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"height HEIGHT value expected HEIGHT cm. Permitted Values: numeric vector weight WEIGHT value expected WEIGHT kg. Permitted Values: numeric vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"BMI (Body Mass Index Area) kg/m^2.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Body Mass Index (BMI) — compute_bmi","text":"","code":"compute_bmi(height = 170, weight = 75) #> [1] 25.95156"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Body Surface Area (BSA) — compute_bsa","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"Computes BSA height weight making use specified derivation method","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"","code":"compute_bsa(height = height, weight = weight, method)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"height HEIGHT value expected HEIGHT cm. Permitted Values: numeric vector weight WEIGHT value expected WEIGHT kg. Permitted Values: numeric vector method Derivation method use: Mosteller: sqrt(height * weight / 3600) DuBois-DuBois: 0.20247 * (height/100) ^ 0.725 * weight ^ 0.425 Haycock: 0.024265 * height ^ 0.3964 * weight ^ 0.5378 Gehan-George: 0.0235 * height ^ 0.42246 * weight ^ 0.51456 Boyd: 0.0003207 * (height ^ 0.3) * (1000 * weight) ^ (0.7285 - (0.0188 * log10(1000 * weight))) Fujimoto: 0.008883 * height ^ 0.663 * weight ^ 0.444 Takahira: 0.007241 * height ^ 0.725 * weight ^ 0.425 Permitted Values: character value","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"BSA (Body Surface Area) m^2.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_bsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Body Surface Area (BSA) — compute_bsa","text":"","code":"# Derive BSA by the Mosteller method compute_bsa(   height = 170,   weight = 75,   method = \"Mosteller\" ) #> [1] 1.881932  # Derive BSA by the DuBois & DuBois method compute_bsa(   height = c(170, 185),   weight = c(75, 90),   method = \"DuBois-DuBois\" ) #> [1] 1.863533 2.140983"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive the Date Imputation Flag — compute_dtf","title":"Derive the Date Imputation Flag — compute_dtf","text":"Derive date imputation flag ('--DTF') comparing date character vector ('--DTC') Date vector ('--DT').","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive the Date Imputation Flag — compute_dtf","text":"","code":"compute_dtf(dtc, dt)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive the Date Imputation Flag — compute_dtf","text":"dtc date character vector ('--DTC'). character date expected format like yyyy-mm-ddThh:mm:ss (partial complete). dt  Date vector compare. date object expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive the Date Imputation Flag — compute_dtf","text":"date imputation flag ('--DTF') (character value 'D', 'M' , 'Y' NA)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive the Date Imputation Flag — compute_dtf","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_dtf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive the Date Imputation Flag — compute_dtf","text":"","code":"compute_dtf(dtc = \"2019-07\", dt = as.Date(\"2019-07-18\")) #> [1] \"D\" compute_dtf(dtc = \"2019\", dt = as.Date(\"2019-07-18\")) #> [1] \"M\""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Duration — compute_duration","title":"Compute Duration — compute_duration","text":"Compute duration two dates, e.g., duration adverse event, relative day, age, ...","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Duration — compute_duration","text":"","code":"compute_duration(   start_date,   end_date,   in_unit = \"days\",   out_unit = \"days\",   floor_in = TRUE,   add_one = TRUE,   trunc_out = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Duration — compute_duration","text":"start_date start date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Refer convert_dtc_to_dt() obtain vector imputed dates. end_date end date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Refer convert_dtc_to_dt() obtain vector imputed dates. in_unit Input unit See floor_in add_one parameter details. Default: 'days' Permitted Values: 'years', 'months', 'days', 'hours', 'minutes', 'min', 'seconds', 'sec' out_unit Output unit duration derived specified unit Default: 'days' Permitted Values: 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'min', 'seconds', 'sec' floor_in Round input dates? input dates round respect input unit, e.g., input unit 'days', time input dates ignored. Default: `TRUE`` Permitted Values: TRUE, FALSE add_one Add one input unit? duration non-negative, one input unit added. .e., duration can zero. Default: TRUE Permitted Values: TRUE, FALSE trunc_out Return integer part fractional part duration (output unit) removed, .e., integer part returned. Default: FALSE Permitted Values: TRUE, FALSE","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Duration — compute_duration","text":"duration two date specified unit","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Duration — compute_duration","text":"output numeric vector providing duration time start end date specified unit. end date start date, duration negative.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Duration — compute_duration","text":"","code":"library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union  # Derive duration in days (integer), i.e., relative day compute_duration(   start_date = ymd_hms(\"2020-12-06T15:00:00\"),   end_date = ymd_hms(\"2020-12-24T08:15:00\") ) #> [1] 19  # Derive duration in days (float) compute_duration(   start_date = ymd_hms(\"2020-12-06T15:00:00\"),   end_date = ymd_hms(\"2020-12-24T08:15:00\"),   floor_in = FALSE,   add_one = FALSE ) #> [1] 17.71875  # Derive age in years compute_duration(   start_date = ymd(\"1984-09-06\"),   end_date = ymd(\"2020-02-24\"),   trunc_out = TRUE,   out_unit = \"years\",   add_one = FALSE ) #> [1] 35  # Derive duration in hours compute_duration(   start_date = ymd_hms(\"2020-12-06T9:00:00\"),   end_date = ymd_hms(\"2020-12-06T13:30:00\"),   out_unit = \"hours\",   floor_in = FALSE,   add_one = FALSE, ) #> [1] 4.5"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"Computes Framingham Heart Study Cardiovascular Disease 10-Year Risk Score (FCVD101) based systolic blood pressure, total serum cholesterol (mg/dL), HDL serum cholesterol (mg/dL), sex, smoking status, diabetic status, treated hypertension flag.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"","code":"compute_framingham(sysbp, chol, cholhdl, age, sex, smokefl, diabetfl, trthypfl)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"sysbp Systolic blood pressure numeric vector expected. chol Total serum cholesterol (mg/dL) numeric vector expected. cholhdl HDL serum cholesterol (mg/dL) numeric vector expected. age Age (years) numeric vector expected. sex Gender character vector expected. Expected Values: 'M' 'F' smokefl Smoking Status character vector  expected. Expected Values: 'Y' 'N' diabetfl Diabetic Status character vector expected. Expected Values: 'Y' 'N' trthypfl Treated hypertension status character vector expected. Expected Values: 'Y' 'N'","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"numeric vector Framingham values","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"predicted probability cardiovascular disease (CVD) within 10-years according Framingham formula.  See AHA Journal article General Cardiovascular Risk Profile Use Primary Care reference. Women: Men: equation calculating risk: $$RiskFactors = (log(Age) * AgeFactor) + (log(TotalChol) * TotalCholFactor) + (log(CholHDL) * CholHDLFactor) \\\\ + (log(SysBP) * SysBPFactor) + Smoker + Diabetes Present - AvgRisk$$ $$Risk = 100 * (1 - RiskPeriodFactor ^ exp(RiskFactors))$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_framingham.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Framingham Heart Study Cardiovascular Disease 10-Year Risk Score — compute_framingham","text":"","code":"compute_framingham(   sysbp = 133, chol = 216.16, cholhdl = 54.91, age = 53,   sex = \"M\", smokefl = \"N\", diabetfl = \"N\", trthypfl = \"N\" ) #> [1] 10.37514  compute_framingham(   sysbp = 161, chol = 186.39, cholhdl = 64.19, age = 52,   sex = \"F\", smokefl = \"Y\", diabetfl = \"N\", trthypfl = \"Y\" ) #> [1] 16.40353"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mean Arterial Pressure (MAP) — compute_map","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"Computes mean arterial pressure (MAP) based diastolic systolic blood pressure. Optionally heart rate can used well.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"","code":"compute_map(diabp, sysbp, hr = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"diabp Diastolic blood pressure numeric vector expected. sysbp Systolic blood pressure numeric vector expected. hr Heart rate numeric vector NULL expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"numeric vector MAP values","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"$$\\frac{2DIABP + SYSBP}{3}$$ based diastolic systolic blood pressure $$DIABP + 0.01 e^{4.14 - \\frac{40.74}{HR}} (SYSBP - DIABP)$$ based diastolic, systolic blood pressure, heart rate. Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Mean Arterial Pressure (MAP) — compute_map","text":"","code":"# Compute MAP based on diastolic and systolic blood pressure compute_map(diabp = 51, sysbp = 121) #> [1] 74.33333  # Compute MAP based on diastolic and systolic blood pressure and heart rate compute_map(diabp = 51, sysbp = 121, hr = 59) #> [1] 73.03907"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected QT — compute_qtc","title":"Compute Corrected QT — compute_qtc","text":"Computes corrected QT using Bazett's, Fridericia's Sagie's formula.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected QT — compute_qtc","text":"","code":"compute_qtc(qt, rr, method)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected QT — compute_qtc","text":"qt QT interval numeric vector expected. expected QT measured msec. rr RR interval numeric vector expected. expected RR measured msec. method Method used QT correction Permitted Values: \"Bazett\", \"Fridericia\", \"Sagie\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected QT — compute_qtc","text":"QT interval msec","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Corrected QT — compute_qtc","text":"Depending chosen method one following formulae used. Bazett: $$\\frac{QT}{\\sqrt{\\frac{RR}{1000}}}$$ Fridericia: $$\\frac{QT}{\\sqrt[3]{\\frac{RR}{1000}}}$$ Sagie: $$1000\\left(\\frac{QT}{1000} + 0.154\\left(1 - \\frac{RR}{1000}\\right)\\right)$$ Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Corrected QT — compute_qtc","text":"","code":"compute_qtc(qt = 350, rr = 56.54, method = \"Bazett\") #> [1] 1471.94  compute_qtc(qt = 350, rr = 56.54, method = \"Fridericia\") #> [1] 911.9047  compute_qtc(qt = 350, rr = 56.54, method = \"Sagie\") #> [1] 495.2928"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","title":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","text":"Derive imputed value","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","text":"","code":"compute_qual_imputation(character_value, imputation_type = 1, factor = 0)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","text":"character_value Character version value imputed imputation_type (default value=1) Valid Values: 1: Strip <, >, = convert numeric. 2: imputation_type=1 character value contains < >, number decimals associated character value found factor 1/10^(number decimals + 1) added/subtracted numeric value. decimals exists, factor 1/10 added/subtracted value. factor Numeric value (default=0), using imputation_type = 1, value can added subtracted qualifier removed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","text":"imputed value","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Impute Values When Qualifier Exists in Character Result — compute_qual_imputation","text":"","code":"compute_qual_imputation(\"<40\") #> [1] 40"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"Function compute factor value imputation character value contains < >.  factor calculated using number decimals. decimals, factor 1, otherwise factor = 1/10^decimal place.  example, factor 100 = 1, factor 5.4 = 1/10^1, factor 5.44 = 1/10^2.  results additional false precision added value.  intermediate function.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"","code":"compute_qual_imputation_dec(character_value_decimal)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"character_value_decimal Character value determine decimal precision","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"Decimal precision value add subtract","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"Derive imputed value","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_qual_imputation_dec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Factor for Value Imputations When Character Value Contains < or > — compute_qual_imputation_dec","text":"","code":"compute_qual_imputation_dec(\"<40.1\") #> [1] 0.1"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute RR Interval From Heart Rate — compute_rr","title":"Compute RR Interval From Heart Rate — compute_rr","text":"Computes RR interval heart rate.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute RR Interval From Heart Rate — compute_rr","text":"","code":"compute_rr(hr)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute RR Interval From Heart Rate — compute_rr","text":"hr Heart rate numeric vector expected. expected heart rate measured beats/min.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute RR Interval From Heart Rate — compute_rr","text":"RR interval msec: $$\\frac{60000}{HR}$$","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute RR Interval From Heart Rate — compute_rr","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_rr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute RR Interval From Heart Rate — compute_rr","text":"","code":"compute_rr(hr = 70.14) #> [1] 855.432"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Scale Parameters — compute_scale","title":"Compute Scale Parameters — compute_scale","text":"Computes average set source values transforms result source range target range. example, calculating average set questionnaire response scores re-coding average response obtain subscale score.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Scale Parameters — compute_scale","text":"","code":"compute_scale(   source,   source_range = NULL,   target_range = NULL,   flip_direction = FALSE,   min_n = 1 )"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Scale Parameters — compute_scale","text":"source vector values scaled numeric vector expected. source_range permitted source range numeric vector containing two elements expected, representing lower upper bounds permitted source range. Alternatively, argument specified source_range target_range, transformation performed. target_range target range numeric vector containing two elements expected, representing lower upper bounds target range. Alternatively, argument specified source_range target_range, transformation performed. flip_direction Flip direction scale? transformed values reversed within target range, e.g. within range 0 100, 25 reversed 75. argument ignored source_range target_range specified. Default: FALSE Permitted Values: TRUE, FALSE min_n Minimum number values computation minimum number non-missing values source computation carried . number non-missing values min_n, result set missing, .e. NA. positive integer expected. Default: 1","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Scale Parameters — compute_scale","text":"average source transformed target range NA source contain min_n values.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Scale Parameters — compute_scale","text":"Returns numeric value. source contains less min_n values, result set NA. source_range target_range specified, mean computed without transformation performed.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Scale Parameters — compute_scale","text":"","code":"compute_scale(   source = c(1, 4, 3, 5),   source_range = c(1, 5),   target_range = c(0, 100),   flip_direction = TRUE,   min_n = 3 ) #> [1] 43.75"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive the Time Imputation Flag — compute_tmf","title":"Derive the Time Imputation Flag — compute_tmf","text":"Derive time imputation flag ('--TMF') comparing date character vector ('--DTC') Datetime vector ('--DTM').","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive the Time Imputation Flag — compute_tmf","text":"","code":"compute_tmf(dtc, dtm, ignore_seconds_flag = FALSE)"},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive the Time Imputation Flag — compute_tmf","text":"dtc date character vector ('--DTC'). character date expected format like yyyy-mm-ddThh:mm:ss (partial complete). dtm Date vector compare ('--DTM'). datetime object expected. ignore_seconds_flag ADaM IG states given SDTM ('--DTC') variable, hours minutes ever collected, seconds imputed ('--DTM') 00, necessary set ('--TMF') 'S'. user can set TRUE 'S' Flag dropped ('--TMF'). logical value Default: FALSE","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive the Time Imputation Flag — compute_tmf","text":"time imputation flag ('--TMF') (character value 'H', 'M' , 'S' NA)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive the Time Imputation Flag — compute_tmf","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/compute_tmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive the Time Imputation Flag — compute_tmf","text":"","code":"compute_tmf(dtc = \"2019-07-18T15:25\", dtm = as.POSIXct(\"2019-07-18T15:25:00\")) #> [1] \"S\" compute_tmf(dtc = \"2019-07-18T15\", dtm = as.POSIXct(\"2019-07-18T15:25:00\")) #> [1] \"M\" compute_tmf(dtc = \"2019-07-18\", dtm = as.POSIXct(\"2019-07-18\")) #> [1] \"H\""},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"purpose function consolidate multiple meta datasets single one. example, global project specific parameter mappings single lookup table can created.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"","code":"consolidate_metadata(   datasets,   key_vars,   source_var = SOURCE,   check_vars = \"warning\",   check_keys = \"error\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"datasets List datasets consolidate Permitted Values: named list datasets key_vars Key variables specified variables must unique input datasets. Permitted Values: list variables created exprs() source_var Source variable specified variable added output dataset. set name dataset observation originating . Permitted Values: symbol check_vars Check variables? \"message\", \"warning\", \"error\" specified, message issued variable names differ across input datasets (datasets). Permitted Values: \"none\", \"message\", \"warning\", \"error\" check_keys Check keys? \"warning\" \"error\" specified, message issued key variables (key_vars) unique key input datasets (datasets). Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"dataset contains one row group occurring input datasets.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"observations input datasets put together single dataset. group (defined key_vars) exists one input datasets, observation last dataset selected.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consolidate Multiple Meta Datasets Into a Single One — consolidate_metadata","text":"","code":"library(tibble) glob_ranges <- tribble(   ~PARAMCD, ~ANRLO, ~ANRHI,   \"PULSE\",      60,    100,   \"SYSBP\",      90,    130,   \"DIABP\",      60,     80 ) proj_ranges <- tribble(   ~PARAMCD, ~ANRLO, ~ANRHI,   \"SYSBP\",     100,    140,   \"DIABP\",      70,     90 ) stud_ranges <- tribble(   ~PARAMCD, ~ANRLO, ~ANRHI,   \"BMI\",        18,     25 )  consolidate_metadata(   datasets = list(     global = glob_ranges,     project = proj_ranges,     study = stud_ranges   ),   key_vars = exprs(PARAMCD) ) #> # A tibble: 4 x 4 #>   SOURCE  PARAMCD ANRLO ANRHI #>   <chr>   <chr>   <dbl> <dbl> #> 1 study   BMI        18    25 #> 2 project DIABP      70    90 #> 3 global  PULSE      60   100 #> 4 project SYSBP     100   140"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Blank Strings Into NAs — convert_blanks_to_na","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"Turn SAS blank strings proper R NAs.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"","code":"convert_blanks_to_na(x)  # S3 method for default convert_blanks_to_na(x)  # S3 method for character convert_blanks_to_na(x)  # S3 method for list convert_blanks_to_na(x)  # S3 method for data.frame convert_blanks_to_na(x)"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"x R object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"object class input","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"default methods simply returns input unchanged. character method turns every instance \"\" NA_character_ preserving attributes. given data frame input function keeps non-character columns applies just described logic character columns. attributes labels preserved.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/convert_blanks_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Blank Strings Into NAs — convert_blanks_to_na","text":"","code":"library(tibble)  convert_blanks_to_na(c(\"a\", \"b\", \"\", \"d\", \"\")) #> [1] \"a\" \"b\" NA  \"d\" NA   df <- tibble(   a = structure(c(\"a\", \"b\", \"\", \"c\"), label = \"A\"),   b = structure(c(1, NA, 21, 9), label = \"B\"),   c = structure(c(TRUE, FALSE, TRUE, TRUE), label = \"C\"),   d = structure(c(\"\", \"\", \"s\", \"q\"), label = \"D\") ) print(df) #> # A tibble: 4 x 4 #>   a         b c     d     #>   <chr> <dbl> <lgl> <chr> #> 1 \"a\"       1 TRUE  \"\"    #> 2 \"b\"      NA FALSE \"\"    #> 3 \"\"       21 TRUE  \"s\"   #> 4 \"c\"       9 TRUE  \"q\"   convert_blanks_to_na(df) #> # A tibble: 4 x 4 #>   a         b c     d     #>   <chr> <dbl> <lgl> <chr> #> 1 a         1 TRUE  NA    #> 2 b        NA FALSE NA    #> 3 NA       21 TRUE  s     #> 4 c         9 TRUE  q"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Date into a Datetime Object — convert_date_to_dtm","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"Convert date (datetime, date, date character) Date vector (usually '--DTM').","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"","code":"convert_date_to_dtm(   dt,   highest_imputation = \"h\",   date_imputation = \"first\",   time_imputation = \"first\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"dt date convert. date character date expected format like yyyy-mm-ddThh:mm:ss. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified, imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"h\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"h\" (hour), \"m\" (minute), \"s\" (second), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\". time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day. argument ignored highest_imputation = \"n\". Default: \"first\". min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"mid\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"datetime object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/convert_date_to_dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Date into a Datetime Object — convert_date_to_dtm","text":"","code":"convert_date_to_dtm(\"2019-07-18T15:25:00\") #> [1] \"2019-07-18 15:25:00 UTC\" convert_date_to_dtm(Sys.time()) #> [1] \"2023-04-12 20:41:09 UTC\" convert_date_to_dtm(as.Date(\"2019-07-18\"), time_imputation = \"23:59:59\") #> [1] \"2019-07-18 23:59:59 UTC\" convert_date_to_dtm(\"2019-07-18\", time_imputation = \"23:59:59\") #> [1] \"2019-07-18 23:59:59 UTC\" convert_date_to_dtm(\"2019-07-18\") #> [1] \"2019-07-18 UTC\""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"Convert date character vector (usually '--DTC') Date vector (usually '--DT').","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"","code":"convert_dtc_to_dt(   dtc,   highest_imputation = \"n\",   date_imputation = \"first\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"dtc --DTC date convert. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"n\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"MID\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"date object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Date Character Vector into a Date Object — convert_dtc_to_dt","text":"","code":"convert_dtc_to_dt(\"2019-07-18\") #> [1] \"2019-07-18\" convert_dtc_to_dt(\"2019-07\") #> [1] NA"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"Convert date character vector (usually '--DTC') Date vector (usually '--DTM').","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"","code":"convert_dtc_to_dtm(   dtc,   highest_imputation = \"h\",   date_imputation = \"first\",   time_imputation = \"first\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"dtc '--DTC' date convert. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified, imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"h\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"h\" (hour), \"m\" (minute), \"s\" (second), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\". time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day. argument ignored highest_imputation = \"n\". Default: \"first\". min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"mid\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"datetime object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Date Character Vector into a Datetime Object — convert_dtc_to_dtm","text":"","code":"convert_dtc_to_dtm(\"2019-07-18T15:25:00\") #> [1] \"2019-07-18 15:25:00 UTC\" convert_dtc_to_dtm(\"2019-07-18T00:00:00\") # note Time = 00:00:00 is not printed #> [1] \"2019-07-18 UTC\" convert_dtc_to_dtm(\"2019-07-18\") #> [1] \"2019-07-18 UTC\""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NAs Into Blank Strings — convert_na_to_blanks","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"Turn NAs blank strings .","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"","code":"convert_na_to_blanks(x)  # S3 method for default convert_na_to_blanks(x)  # S3 method for character convert_na_to_blanks(x)  # S3 method for list convert_na_to_blanks(x)  # S3 method for data.frame convert_na_to_blanks(x)"},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"x R object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"object class input","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"default methods simply returns input unchanged. character method turns every instance NA_character_ NA \"\" preserving attributes. given data frame input function keeps non-character columns applies just described logic character attributes labels preserved.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/convert_na_to_blanks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert NAs Into Blank Strings — convert_na_to_blanks","text":"","code":"library(tibble)  convert_na_to_blanks(c(\"a\", \"b\", NA, \"d\", NA)) #> [1] \"a\" \"b\" \"\"  \"d\" \"\"   df <- tibble(   a = structure(c(\"a\", \"b\", NA, \"c\"), label = \"A\"),   b = structure(c(1, NA, 21, 9), label = \"B\"),   c = structure(c(TRUE, FALSE, TRUE, TRUE), label = \"C\"),   d = structure(c(NA, NA, \"s\", \"q\"), label = \"D\") ) print(df) #> # A tibble: 4 x 4 #>   a         b c     d     #>   <chr> <dbl> <lgl> <chr> #> 1 a         1 TRUE  NA    #> 2 b        NA FALSE NA    #> 3 NA       21 TRUE  s     #> 4 c         9 TRUE  q     convert_na_to_blanks(df) #> # A tibble: 4 x 4 #>   a         b c     d     #>   <chr> <dbl> <lgl> <chr> #> 1 \"a\"       1 TRUE  \"\"    #> 2 \"b\"      NA FALSE \"\"    #> 3 \"\"       21 TRUE  \"s\"   #> 4 \"c\"       9 TRUE  \"q\""},{"path":"https://pharmaverse.github.io/admiral/reference/count_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Number of Observations Where a Variable Equals a Value — count_vals","title":"Count Number of Observations Where a Variable Equals a Value — count_vals","text":"Count number observations variable equals value.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/count_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Number of Observations Where a Variable Equals a Value — count_vals","text":"","code":"count_vals(var, val)"},{"path":"https://pharmaverse.github.io/admiral/reference/count_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Number of Observations Where a Variable Equals a Value — count_vals","text":"var vector val value","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/count_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Number of Observations Where a Variable Equals a Value — count_vals","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral) data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"NE\",   \"1\",      4,        \"CR\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"CR\",   \"2\",      2,        \"PR\",   \"2\",      3,        \"CR\",   \"3\",      1,        \"CR\",   \"4\",      1,        \"CR\",   \"4\",      2,        \"NE\",   \"4\",      3,        \"NE\",   \"4\",      4,        \"CR\",   \"4\",      5,        \"PR\" )  # add variable providing the number of NEs for each subject group_by(data, USUBJID) %>%   mutate(nr_nes = count_vals(var = AVALC, val = \"NE\")) #> # A tibble: 14 x 4 #> # Groups:   USUBJID [4] #>    USUBJID AVISITN AVALC nr_nes #>    <chr>     <dbl> <chr>  <int> #>  1 1             1 PR         2 #>  2 1             2 CR         2 #>  3 1             3 NE         2 #>  4 1             4 CR         2 #>  5 1             5 NE         2 #>  6 2             1 CR         0 #>  7 2             2 PR         0 #>  8 2             3 CR         0 #>  9 3             1 CR         0 #> 10 4             1 CR         2 #> 11 4             2 NE         2 #> 12 4             3 NE         2 #> 13 4             4 CR         2 #> 14 4             5 PR         2"},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"function creates reference dataset subperiods, periods, phases ADSL dataset. reference dataset can used derive subperiod, period, phase variables like ASPER, ASPRSDT, ASPREDT, APERIOD, APERSDT, APEREDT, TRTA, APHASEN, PHSDTM, PHEDTM, ... OCCDS BDS datasets.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"","code":"create_period_dataset(   dataset,   new_vars,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"dataset ADSL dataset variables specified new_vars subject_keys expected. element new_vars least one variable form right hand side value must available dataset. new_vars New variables named list variables like exprs(PHSDT = PHwSDT, PHEDT = PHwEDT, APHASE = APHASEw) expected. left hand side elements defines variable output dataset, right hand side defines source variables ADSL dataset CDISC notation. lower case letter \"w\"  used refers phase variable, lower case letters \"xx\" used refers period variable, \"xx\" \"w\" used refers subperiod variable. one type must used, e.g., right hand side values must refer period variables. allowed mix example period subperiod variables. period subperiod variables required, separate reference datasets must created. subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"period reference dataset (see \"Details\" section)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"subject subperiod/period/phase least one source variable NA observation added output dataset. Depending type source variable (subperiod, period, phase) variable ASPER, APERIOD, APHASEN added set number subperiod, period, phase. variables specified new_vars (left hand side) added output dataset set value source variable (right hand side).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/create_period_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Reference Dataset for Subperiods, Periods, or Phases — create_period_dataset","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  # Create reference dataset for periods adsl <- tribble(   ~USUBJID, ~AP01SDT,     ~AP01EDT,     ~AP02SDT,     ~AP02EDT,     ~TRT01A, ~TRT02A,   \"1\",      \"2021-01-04\", \"2021-02-06\", \"2021-02-07\", \"2021-03-07\", \"A\",     \"B\",   \"2\",      \"2021-02-02\", \"2021-03-02\", \"2021-03-03\", \"2021-04-01\", \"B\",     \"A\", ) %>%   mutate(     across(matches(\"AP\\\\d\\\\d[ES]DT\"), ymd)   ) %>%   mutate(     STUDYID = \"xyz\"   )  create_period_dataset(   adsl,   new_vars = exprs(APERSDT = APxxSDT, APEREDT = APxxEDT, TRTA = TRTxxA) ) #> # A tibble: 4 x 6 #>   STUDYID USUBJID APERIOD APERSDT    APEREDT    TRTA  #>   <chr>   <chr>     <int> <date>     <date>     <chr> #> 1 xyz     1             1 2021-01-04 2021-02-06 A     #> 2 xyz     1             2 2021-02-07 2021-03-07 B     #> 3 xyz     2             1 2021-02-02 2021-03-02 B     #> 4 xyz     2             2 2021-03-03 2021-04-01 A      # Create reference dataset for phases adsl <- tribble(   ~USUBJID, ~PH1SDT,      ~PH1EDT,      ~PH2SDT,      ~PH2EDT,      ~APHASE1,    ~APHASE2,   \"1\",      \"2021-01-04\", \"2021-02-06\", \"2021-02-07\", \"2021-03-07\", \"TREATMENT\", \"FUP\",   \"2\",      \"2021-02-02\", \"2021-03-02\", NA,           NA,           \"TREATMENT\", NA ) %>%   mutate(     across(matches(\"PH\\\\d[ES]DT\"), ymd)   ) %>%   mutate(     STUDYID = \"xyz\"   )  create_period_dataset(   adsl,   new_vars = exprs(PHSDT = PHwSDT, PHEDT = PHwEDT, APHASE = APHASEw) ) #> # A tibble: 3 x 6 #>   STUDYID USUBJID APHASEN PHSDT      PHEDT      APHASE    #>   <chr>   <chr>     <int> <date>     <date>     <chr>     #> 1 xyz     1             1 2021-01-04 2021-02-06 TREATMENT #> 2 xyz     1             2 2021-02-07 2021-03-07 FUP       #> 3 xyz     2             1 2021-02-02 2021-03-02 TREATMENT  # Create reference datasets for subperiods adsl <- tribble(   ~USUBJID, ~P01S1SDT,    ~P01S1EDT,    ~P01S2SDT,    ~P01S2EDT,    ~P02S1SDT,    ~P02S1EDT,   \"1\",      \"2021-01-04\", \"2021-01-19\", \"2021-01-20\", \"2021-02-06\", \"2021-02-07\", \"2021-03-07\",   \"2\",      \"2021-02-02\", \"2021-03-02\", NA,           NA,           \"2021-03-03\", \"2021-04-01\" ) %>%   mutate(     across(matches(\"P\\\\d\\\\dS\\\\d[ES]DT\"), ymd)   ) %>%   mutate(     STUDYID = \"xyz\"   )  create_period_dataset(   adsl,   new_vars = exprs(ASPRSDT = PxxSwSDT, ASPREDT = PxxSwEDT) ) #> # A tibble: 5 x 6 #>   STUDYID USUBJID APERIOD ASPER ASPRSDT    ASPREDT    #>   <chr>   <chr>     <int> <int> <date>     <date>     #> 1 xyz     1             1     1 2021-01-04 2021-01-19 #> 2 xyz     1             1     2 2021-01-20 2021-02-06 #> 3 xyz     1             2     1 2021-02-07 2021-03-07 #> 4 xyz     2             1     1 2021-02-02 2021-03-02 #> 5 xyz     2             2     1 2021-03-03 2021-04-01"},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"Creates queries dataset input dataset dataset_queries argument derive_vars_query() function defined Queries Dataset Documentation.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"","code":"create_query_data(queries, version = NULL, get_terms_fun = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"queries List queries list query() objects expected. version Dictionary version dictionary version used coding terms specified. queries basket (SMQ, SDG, ....) customized query including basket, parameter needs specified. Permitted Values: character string (expected format company-specific) get_terms_fun Function returns terms query specified queries parameter referring basket (.e., definition field set basket_select() object list contains least one basket_select() object) specified function called retrieve terms defining query. function provided admiral company specific, .e., implemented company level. function must return dataset terms defining basket. output dataset must contain following variables. TERM_LEVEL: variable used defining term basket, e.g., AEDECOD TERM_NAME: name term variable TERM_LEVEL referring character TERM_ID numeric id term variable TERM_LEVEL referring numeric QUERY_NAME: name basket. values must observations. function must provide following parameters basket_select: basket_select() object. version: dictionary version. value specified version create_query_data() call passed parameter. keep_id: set TRUE, output dataset must contain QUERY_ID variable. variable must set numeric id basket. temp_env: temporary environment passed parameter. can used store data used baskets create_query_data() call. example SMQs need read database SMQs can read stored environment first SMQ handled. SMQs terms can retrieved environment instead accessing database .","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"dataset used input dataset dataset_queries argument derive_vars_query()","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"query() object listed queries argument, terms belonging query (TERM_LEVEL, TERM_NAME, TERM_ID) determined respect definition field query: definition field query() object basket_select() object, terms read basket database calling function specified get_terms_fun parameter. data frame, terms stored data frame used. list data frames basket_select() objects, terms data frames terms read basket database referenced basket_select() objects collated. following variables (described Queries Dataset Documentation) created: VAR_PREFIX: Prefix variables created derive_vars_query() specified prefix element. QUERY_NAME: Name query specified name element. QUERY_ID: Id query specified id element. id element specified query, variable set NA. id element specified query, variable created. QUERY_SCOPE: scope query specified scope element basket_select() object. queries defined basket_select() object, variable set NA. none queries defined basket_select() object, variable created. QUERY_SCOPE_NUM: numeric scope query. set 1 scope broad. Otherwise set 2. add_scope_num element equals FALSE, variable set NA. add_scope_num element equals FALSE baskets none queries basket , variable created. TERM_LEVEL: Name variable used identify terms. TERM_NAME: Value term variable character variable. TERM_ID: Value term variable numeric variable. VERSION: Set value version argument. specified, variable created.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/create_query_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a queries dataset as input dataset to the dataset_queries argument in\nderive_vars_query() — create_query_data","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral.test) library(admiral)  # creating a query dataset for a customized query cqterms <- tribble(   ~TERM_NAME, ~TERM_ID,   \"APPLICATION SITE ERYTHEMA\", 10003041L,   \"APPLICATION SITE PRURITUS\", 10003053L ) %>%   mutate(TERM_LEVEL = \"AEDECOD\")  cq <- query(   prefix = \"CQ01\",   name = \"Application Site Issues\",   definition = cqterms )  create_query_data(queries = list(cq)) #> # A tibble: 2 x 5 #>   TERM_NAME                 TERM_ID TERM_LEVEL VAR_PREFIX QUERY_NAME             #>   <chr>                       <int> <chr>      <chr>      <chr>                  #> 1 APPLICATION SITE ERYTHE… 10003041 AEDECOD    CQ01       Application Site Issu… #> 2 APPLICATION SITE PRURIT… 10003053 AEDECOD    CQ01       Application Site Issu…  # create a query dataset for SMQs pregsmq <- query(   prefix = \"SMQ02\",   id = auto,   definition = basket_select(     name = \"Pregnancy and neonatal topics (SMQ)\",     scope = \"NARROW\",     type = \"smq\"   ) )  bilismq <- query(   prefix = \"SMQ04\",   definition = basket_select(     id = 20000121L,     scope = \"BROAD\",     type = \"smq\"   ) )  # The get_terms function from admiral.test is used for this example. # In a real application a company-specific function must be used. create_query_data(   queries = list(pregsmq, bilismq),   get_terms_fun = admiral.test:::get_terms,   version = \"20.1\" ) #> # A tibble: 43 x 7 #>    TERM_NAME     TERM_LEVEL QUERY_NAME   QUERY_ID QUERY_SCOPE VAR_PREFIX VERSION #>    <chr>         <chr>      <chr>           <int> <chr>       <chr>      <chr>   #>  1 Achromotrich… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  2 Craniosynost… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  3 Hypophosphat… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  4 Congenital p… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  5 Uterine cont… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  6 Ductus arter… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  7 Pseudotruncu… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  8 Lipomeningoc… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #>  9 Macrocephaly  AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #> 10 Carnitine pa… AEDECOD    Pregnancy a… 20000185 NARROW      SMQ02      20.1    #> # … with 33 more rows  # create a query dataset for SDGs sdg <- query(   prefix = \"SDG01\",   id = auto,   definition = basket_select(     name = \"5-aminosalicylates for ulcerative colitis\",     scope = NA_character_,     type = \"sdg\"   ) )  # The get_terms function from admiral.test is used for this example. # In a real application a company-specific function must be used. create_query_data(   queries = list(sdg),   get_terms_fun = admiral.test:::get_terms,   version = \"2019-09\" ) #> # A tibble: 16 x 7 #>    TERM_NAME     TERM_LEVEL QUERY_NAME   QUERY_ID QUERY_SCOPE VAR_PREFIX VERSION #>    <chr>         <chr>      <chr>           <int> <chr>       <chr>      <chr>   #>  1 AMINOSALICYL… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  2 AMINOSALICYL… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  3 AMINOSALICYL… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  4 AMINOSALICYL… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  5 SODIUM AMINO… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  6 AMINOSALICYL… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  7 SULFASALAZINE CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  8 CALCIUM BENZ… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #>  9 OLSALAZINE    CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 10 OLSALAZINE S… CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 11 MESALAZINE    CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 12 BALSALAZIDE   CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 13 BALSALAZIDE … CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 14 BALSALAZIDE … CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 15 DERSALAZINE   CMDECOD    5-aminosali…      220 NA          SDG01      2019-09 #> 16 DERSALAZINE … CMDECOD    5-aminosali…      220 NA          SDG01      2019-09  # creating a query dataset for a customized query including SMQs # The get_terms function from admiral.test is used for this example. # In a real application a company-specific function must be used. create_query_data(   queries = list(     query(       prefix = \"CQ03\",       name = \"Special issues of interest\",       definition = list(         basket_select(           name = \"Pregnancy and neonatal topics (SMQ)\",           scope = \"NARROW\",           type = \"smq\"         ),         cqterms       )     )   ),   get_terms_fun = admiral.test:::get_terms,   version = \"20.1\" ) #> # A tibble: 23 x 6 #>    TERM_NAME              TERM_LEVEL QUERY_NAME       TERM_ID VAR_PREFIX VERSION #>    <chr>                  <chr>      <chr>              <int> <chr>      <chr>   #>  1 Achromotrichia congen… AEDECOD    Special issues …      NA CQ03       20.1    #>  2 Craniosynostosis       AEDECOD    Special issues …      NA CQ03       20.1    #>  3 Hypophosphatasia       AEDECOD    Special issues …      NA CQ03       20.1    #>  4 Congenital pyelocalie… AEDECOD    Special issues …      NA CQ03       20.1    #>  5 Uterine contractions … AEDECOD    Special issues …      NA CQ03       20.1    #>  6 Ductus arteriosus pre… AEDECOD    Special issues …      NA CQ03       20.1    #>  7 Pseudotruncus arterio… AEDECOD    Special issues …      NA CQ03       20.1    #>  8 Lipomeningocele        AEDECOD    Special issues …      NA CQ03       20.1    #>  9 Macrocephaly           AEDECOD    Special issues …      NA CQ03       20.1    #> 10 Carnitine palmitoyltr… AEDECOD    Special issues …      NA CQ03       20.1    #> # … with 13 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dataset of single doses — create_single_dose_dataset","title":"Create dataset of single doses — create_single_dose_dataset","text":"Derives dataset single dose aggregate dose information. may necessary e.g. calculating last dose adverse event ADAE deriving total dose parameter ADEX EXDOSFRQ != .","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dataset of single doses — create_single_dose_dataset","text":"","code":"create_single_dose_dataset(   dataset,   dose_freq = EXDOSFRQ,   start_date = ASTDT,   start_datetime = NULL,   end_date = AENDT,   end_datetime = NULL,   lookup_table = dose_freq_lookup,   lookup_column = CDISC_VALUE,   nominal_time = NULL,   keep_source_vars = expr_c(exprs(USUBJID), dose_freq, start_date, start_datetime,     end_date, end_datetime) )"},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dataset of single doses — create_single_dose_dataset","text":"dataset Input dataset columns specified dose_freq, start_date end_date parameters expected. dose_freq dose frequency aggregate dosing frequency used multiple doses row. Permitted Values: defined lookup table. start_date start date date object expected. object contain NA values. Refer derive_vars_dt() impute derive date date character vector date object. start_datetime start date-time date-time object expected. object contain NA values. Refer derive_vars_dtm() impute derive date-time date character vector date object. input dataset contains frequencies refer DOSE_WINDOW equals \"HOUR\" \"MINUTE\", parameter must specified. end_date end date date date-time object expected. object contain NA values. Refer derive_vars_dt() impute derive date date character vector date object. end_datetime end date-time date-time object expected. object contain NA values. Refer derive_vars_dtm() impute derive date-time date character vector date object. input dataset contains frequencies refer DOSE_WINDOW equals \"HOUR\" \"MINUTE\", parameter must specified. lookup_table dose frequency value lookup table table used look dose_freq values determine appropriate multiplier used row generation. lookup table default used, must columns DOSE_WINDOW, DOSE_COUNT, CONVERSION_FACTOR. default table dose_freq_lookup described detail . Permitted Values DOSE_WINDOW: \"MINUTE\", \"HOUR\", \"DAY\", \"WEEK\", \"MONTH\", \"YEAR\" lookup_column dose frequency value column lookup table column lookup_table. nominal_time nominal relative time first dose (NFRLT) Used PK analysis, hours 0 first dose.  can derived (VISITDY - 1) * 24 example. expanded single dose dataset created.  example EXDOFRQ \"QD\" result nominal_time incremented 24 hours expanded record. value can NULL needed. keep_source_vars List variables retained source dataset parameter can specified additional information required output dataset. example EXTRT studies one drug.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dataset of single doses — create_single_dose_dataset","text":"input dataset single dose per row.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create dataset of single doses — create_single_dose_dataset","text":"aggregate dose row split multiple rows represent single dose.number completed dose periods start_date start_datetime end_date end_datetime calculated compute_duration multiplied DOSE_COUNT. DOSE_WINDOW values \"WEEK\", \"MONTH\", \"YEAR\", CONVERSION_FACTOR used convert days time object added start_date. Observations dose frequency \"\" copied output dataset unchanged.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/create_single_dose_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dataset of single doses — create_single_dose_dataset","text":"","code":"# Example with default lookup  library(lubridate) library(stringr) library(tibble) library(dplyr)  data <- tribble(   ~USUBJID, ~EXDOSFRQ, ~ASTDT, ~ASTDTM, ~AENDT, ~AENDTM,   \"P01\", \"Q2D\", ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01 10:30:00\"),   ymd(\"2021-01-07\"), ymd_hms(\"2021-01-07 11:30:00\"),   \"P01\", \"Q3D\", ymd(\"2021-01-08\"), ymd_hms(\"2021-01-08 12:00:00\"),   ymd(\"2021-01-14\"), ymd_hms(\"2021-01-14 14:00:00\"),   \"P01\", \"EVERY 2 WEEKS\", ymd(\"2021-01-15\"), ymd_hms(\"2021-01-15 09:57:00\"),   ymd(\"2021-01-29\"), ymd_hms(\"2021-01-29 10:57:00\") )  create_single_dose_dataset(data) #> # A tibble: 9 x 4 #>   USUBJID EXDOSFRQ ASTDT      AENDT      #>   <chr>   <chr>    <date>     <date>     #> 1 P01     ONCE     2021-01-01 2021-01-01 #> 2 P01     ONCE     2021-01-03 2021-01-03 #> 3 P01     ONCE     2021-01-05 2021-01-05 #> 4 P01     ONCE     2021-01-07 2021-01-07 #> 5 P01     ONCE     2021-01-08 2021-01-08 #> 6 P01     ONCE     2021-01-11 2021-01-11 #> 7 P01     ONCE     2021-01-14 2021-01-14 #> 8 P01     ONCE     2021-01-15 2021-01-15 #> 9 P01     ONCE     2021-01-29 2021-01-29  # Example with custom lookup  custom_lookup <- tribble(   ~Value,   ~DOSE_COUNT, ~DOSE_WINDOW, ~CONVERSION_FACTOR,   \"Q30MIN\", (1 / 30),    \"MINUTE\",                      1,   \"Q90MIN\", (1 / 90),    \"MINUTE\",                      1 )  data <- tribble(   ~USUBJID, ~EXDOSFRQ, ~ASTDT, ~ASTDTM, ~AENDT, ~AENDTM,   \"P01\", \"Q30MIN\", ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01T06:00:00\"),   ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01T07:00:00\"),   \"P02\", \"Q90MIN\", ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01T06:00:00\"),   ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01T09:00:00\") )  create_single_dose_dataset(data,   lookup_table = custom_lookup,   lookup_column = Value,   start_datetime = ASTDTM,   end_datetime = AENDTM ) #> # A tibble: 6 x 6 #>   USUBJID EXDOSFRQ ASTDT      ASTDTM              AENDT      AENDTM              #>   <chr>   <chr>    <date>     <dttm>              <date>     <dttm>              #> 1 P01     ONCE     2021-01-01 2021-01-01 06:00:00 2021-01-01 2021-01-01 06:00:00 #> 2 P01     ONCE     2021-01-01 2021-01-01 06:30:00 2021-01-01 2021-01-01 06:30:00 #> 3 P01     ONCE     2021-01-01 2021-01-01 07:00:00 2021-01-01 2021-01-01 07:00:00 #> 4 P02     ONCE     2021-01-01 2021-01-01 06:00:00 2021-01-01 2021-01-01 06:00:00 #> 5 P02     ONCE     2021-01-01 2021-01-01 07:30:00 2021-01-01 2021-01-01 07:30:00 #> 6 P02     ONCE     2021-01-01 2021-01-01 09:00:00 2021-01-01 2021-01-01 09:00:00 # Example with nominal time  data <- tribble(   ~USUBJID, ~EXDOSFRQ, ~NFRLT, ~ASTDT, ~ASTDTM, ~AENDT, ~AENDTM,   \"P01\", \"BID\", 0, ymd(\"2021-01-01\"), ymd_hms(\"2021-01-01 08:00:00\"),   ymd(\"2021-01-07\"), ymd_hms(\"2021-01-07 20:00:00\"),   \"P01\", \"BID\", 168, ymd(\"2021-01-08\"), ymd_hms(\"2021-01-08 08:00:00\"),   ymd(\"2021-01-14\"), ymd_hms(\"2021-01-14 20:00:00\"),   \"P01\", \"BID\", 336, ymd(\"2021-01-15\"), ymd_hms(\"2021-01-15 08:00:00\"),   ymd(\"2021-01-29\"), ymd_hms(\"2021-01-29 20:00:00\") )  create_single_dose_dataset(data,   dose_freq = EXDOSFRQ,   start_date = ASTDT,   start_datetime = ASTDTM,   end_date = AENDT,   end_datetime = AENDTM,   lookup_table = dose_freq_lookup,   lookup_column = CDISC_VALUE,   nominal_time = NFRLT,   keep_source_vars = exprs(     USUBJID, EXDOSFRQ, ASTDT, ASTDTM, AENDT, AENDTM, NFRLT   ) ) #> # A tibble: 58 x 7 #>    USUBJID EXDOSFRQ ASTDT      ASTDTM              AENDT      #>    <chr>   <chr>    <date>     <dttm>              <date>     #>  1 P01     ONCE     2021-01-01 2021-01-01 08:00:00 2021-01-01 #>  2 P01     ONCE     2021-01-01 2021-01-01 20:00:00 2021-01-01 #>  3 P01     ONCE     2021-01-02 2021-01-02 08:00:00 2021-01-02 #>  4 P01     ONCE     2021-01-02 2021-01-02 20:00:00 2021-01-02 #>  5 P01     ONCE     2021-01-03 2021-01-03 08:00:00 2021-01-03 #>  6 P01     ONCE     2021-01-03 2021-01-03 20:00:00 2021-01-03 #>  7 P01     ONCE     2021-01-04 2021-01-04 08:00:00 2021-01-04 #>  8 P01     ONCE     2021-01-04 2021-01-04 20:00:00 2021-01-04 #>  9 P01     ONCE     2021-01-05 2021-01-05 08:00:00 2021-01-05 #> 10 P01     ONCE     2021-01-05 2021-01-05 20:00:00 2021-01-05 #> # … with 48 more rows, and 2 more variables: AENDTM <dttm>, NFRLT <dbl>  # Example - derive a single dose dataset with imputations  # For either single drug administration records, or multiple drug administration # records covering a range of dates, fill-in of missing treatment end datetime # `EXENDTC` by substitution with an acceptable alternate, for example date of # death, date of datacut may be required. This example shows the # maximum possible number of single dose records to be derived. The example # requires the date of datacut `DCUTDT` to be specified correctly, or # if not appropriate to use `DCUTDT` as missing treatment end data and missing # treatment end datetime could set equal to treatment start date and treatment # start datetime. ADSL variables `DTHDT` and `DCUTDT` are preferred for # imputation use. # # All available trial treatments are included, allowing multiple different # last dose variables to be created in for example `use_ad_template(\"ADAE\")` # if required.  adsl <- tribble(   ~STUDYID, ~USUBJID, ~DTHDT,   \"01\", \"1211\", ymd(\"2013-01-14\"),   \"01\", \"1083\", ymd(\"2013-08-02\"),   \"01\", \"1445\", ymd(\"2014-11-01\"),   \"01\", \"1015\", NA,   \"01\", \"1023\", NA )  ex <- tribble(   ~STUDYID, ~USUBJID, ~EXSEQ, ~EXTRT, ~EXDOSE, ~EXDOSU, ~EXDOSFRQ, ~EXSTDTC, ~EXENDTC,   \"01\", \"1015\", 1, \"PLAC\", 0, \"mg\", \"QD\", \"2014-01-02\", \"2014-01-16\",   \"01\", \"1015\", 2, \"PLAC\", 0, \"mg\", \"QD\", \"2014-06-17\", \"2014-06-18\",   \"01\", \"1015\", 3, \"PLAC\", 0, \"mg\", \"QD\", \"2014-06-19\", NA_character_,   \"01\", \"1023\", 1, \"PLAC\", 0, \"mg\", \"QD\", \"2012-08-05\", \"2012-08-27\",   \"01\", \"1023\", 2, \"PLAC\", 0, \"mg\", \"QD\", \"2012-08-28\", \"2012-09-01\",   \"01\", \"1211\", 1, \"XANO\", 54, \"mg\", \"QD\", \"2012-11-15\", \"2012-11-28\",   \"01\", \"1211\", 2, \"XANO\", 54, \"mg\", \"QD\", \"2012-11-29\", NA_character_,   \"01\", \"1445\", 1, \"PLAC\", 0, \"mg\", \"QD\", \"2014-05-11\", \"2014-05-25\",   \"01\", \"1445\", 2, \"PLAC\", 0, \"mg\", \"QD\", \"2014-05-26\", \"2014-11-01\",   \"01\", \"1083\", 1, \"PLAC\", 0, \"mg\", \"QD\", \"2013-07-22\", \"2013-08-01\" )  adsl_death <- adsl %>%   mutate(     DTHDTM = convert_date_to_dtm(DTHDT),     # Remove `DCUT` setup line below if ADSL `DCUTDT` is populated.     DCUTDT = convert_dtc_to_dt(\"2015-03-06\"), # Example only, enter date.     DCUTDTM = convert_date_to_dtm(DCUTDT)   )  # Select valid dose records, non-missing `EXSTDTC` and `EXDOSE`. ex_mod <- ex %>%   filter(!is.na(EXSTDTC) & !is.na(EXDOSE)) %>%   derive_vars_merged(adsl_death, by_vars = exprs(STUDYID, USUBJID)) %>%   # Example, set up missing `EXDOSFRQ` as QD daily dosing regime.   # Replace with study dosing regime per trial treatment.   mutate(EXDOSFRQ = if_else(is.na(EXDOSFRQ), \"QD\", EXDOSFRQ)) %>%   # Create EXxxDTM variables and replace missing `EXENDTM`.   derive_vars_dtm(     dtc = EXSTDTC,     new_vars_prefix = \"EXST\",     date_imputation = \"first\",     time_imputation = \"first\",     flag_imputation = \"none\",   ) %>%   derive_vars_dtm_to_dt(exprs(EXSTDTM)) %>%   derive_vars_dtm(     dtc = EXENDTC,     new_vars_prefix = \"EXEN\",     # Maximum imputed treatment end date must not be not greater than     # date of death or after the datacut date.     max_dates = exprs(DTHDTM, DCUTDTM),     date_imputation = \"last\",     time_imputation = \"last\",     flag_imputation = \"none\",     highest_imputation = \"Y\",   ) %>%   derive_vars_dtm_to_dt(exprs(EXENDTM)) %>%   # Select only unique values.   # Removes duplicated records before final step.   distinct(     STUDYID, USUBJID, EXTRT, EXDOSE, EXDOSFRQ, DCUTDT, DTHDT, EXSTDT,     EXSTDTM, EXENDT, EXENDTM, EXSTDTC, EXENDTC   )  create_single_dose_dataset(   ex_mod,   start_date = EXSTDT,   start_datetime = EXSTDTM,   end_date = EXENDT,   end_datetime = EXENDTM,   keep_source_vars = exprs(     STUDYID, USUBJID, EXTRT, EXDOSE, EXDOSFRQ,     DCUTDT, EXSTDT, EXSTDTM, EXENDT, EXENDTM, EXSTDTC, EXENDTC   ) ) #> # A tibble: 553 x 12 #>    STUDYID USUBJID EXTRT EXDOSE EXDOSFRQ DCUTDT     EXSTDT     #>    <chr>   <chr>   <chr>  <dbl> <chr>    <date>     <date>     #>  1 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-02 #>  2 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-03 #>  3 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-04 #>  4 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-05 #>  5 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-06 #>  6 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-07 #>  7 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-08 #>  8 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-09 #>  9 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-10 #> 10 01      1015    PLAC       0 ONCE     2015-03-06 2014-01-11 #> # … with 543 more rows, and 5 more variables: EXSTDTM <dttm>, EXENDT <date>, #> #   EXENDTM <dttm>, EXSTDTC <chr>, EXENDTC <chr>"},{"path":"https://pharmaverse.github.io/admiral/reference/date_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a date_source object — date_source","title":"Create a date_source object — date_source","text":"Create date_source object input derive_var_extreme_dt() derive_var_extreme_dtm().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/date_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a date_source object — date_source","text":"","code":"date_source(dataset_name, filter = NULL, date, traceability_vars = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/date_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a date_source object — date_source","text":"dataset_name name dataset, .e. string, used search date. filter unquoted condition filtering dataset. date variable providing date. date datetime can specified. unquoted symbol expected. traceability_vars named list returned exprs() defining traceability variables, e.g. exprs(LALVDOM = \"AE\", LALVSEQ = AESEQ, LALVVAR = \"AESTDTC\"). values must symbol, character string, numeric, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/date_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a date_source object — date_source","text":"object class date_source.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/date_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a date_source object — date_source","text":"","code":"# treatment end date from ADSL trt_end_date <- date_source(   dataset_name = \"adsl\",   date = TRTEDT )  # lab date from LB where assessment was taken, i.e. not \"NOT DONE\" lb_date <- date_source(   dataset_name = \"lb\",   filter = LBSTAT != \"NOT DONE\" | is.na(LBSTAT),   date = LBDT )  # death date from ADSL including traceability variables death_date <- date_source(   dataset_name = \"adsl\",   date = DTHDT,   traceability_vars = exprs(     LALVDOM = \"ADSL\",     LALVVAR = \"DTHDT\"   ) )"},{"path":"https://pharmaverse.github.io/admiral/reference/default_qtc_paramcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","title":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","text":"Get Default Parameter Code Corrected QT","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/default_qtc_paramcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","text":"","code":"default_qtc_paramcd(method)"},{"path":"https://pharmaverse.github.io/admiral/reference/default_qtc_paramcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","text":"method Method used QT correction Permitted Values: \"Bazett\", \"Fridericia\", \"Sagie\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/default_qtc_paramcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","text":"\"QTCBR\" method \"Bazett\", \"QTCFR\" \"Fridericia\" \"QTLCR\" \"Sagie\". error otherwise.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/default_qtc_paramcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Parameter Code for Corrected QT — default_qtc_paramcd","text":"","code":"default_qtc_paramcd(\"Sagie\") #> $PARAMCD #> [1] \"QTLCR\" #>"},{"path":"https://pharmaverse.github.io/admiral/reference/derivation_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a derivation_slice Object — derivation_slice","title":"Create a derivation_slice Object — derivation_slice","text":"Create derivation_slice object input slice_derivation().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derivation_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a derivation_slice Object — derivation_slice","text":"","code":"derivation_slice(filter, args = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/derivation_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a derivation_slice Object — derivation_slice","text":"filter unquoted condition defining observations slice args Arguments derivation used slice params() object expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derivation_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a derivation_slice Object — derivation_slice","text":"object class derivation_slice","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_derived_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_derived_param","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_derived_param","text":"function deprecated.  Please use derive_param_computed() instead.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_derived_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_derived_param","text":"","code":"derive_derived_param(   dataset,   by_vars,   parameters,   analysis_value,   set_values_to,   filter = NULL,   constant_by_vars = NULL,   constant_parameters = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_derived_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_derived_param","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified parameters. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables parameters Required parameter codes expected parameter codes (PARAMCD) required derive new parameter specified parameter constant_parameters parameter. Permitted Values: character vector PARAMCD values analysis_value Definition analysis value expression defining analysis value (AVAL) new parameter expected. analysis values parameters specified parameters can accessed using AVAL.<parameter code>, e.g., AVAL.SYSBP. Permitted Values: unquoted expression set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition constant_by_vars variables constant parameters constant parameters (parameters measured ) merged parameters using specified variables. (Refer Example 2) Permitted Values: list variables constant_parameters Required constant parameter codes expected parameter codes (PARAMCD) required derive new parameter measured specified . example BMI derived height measured weight measured visit. Height specified constant_parameters parameter. (Refer Example 2) Permitted Values: character vector PARAMCD values","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_derived_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_derived_param","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Expected Records — derive_expected_records","title":"Derive Expected Records — derive_expected_records","text":"Add expected records new observations 'group' dataset contains missing observations.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Expected Records — derive_expected_records","text":"","code":"derive_expected_records(   dataset,   dataset_expected_obs,   by_vars = NULL,   set_values_to = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Expected Records — derive_expected_records","text":"dataset Input dataset data frame, columns dataset_expected_obs specified by_vars parameter expected. dataset_expected_obs Expected observations dataset Data frame expected observations, e.g., expected combinations PARAMCD, PARAM, AVISIT, AVISITN, ... by_vars Grouping variables group defined by_vars observations dataset_expected_obs added output dataset corresponding observation input dataset. set_values_to Variables set specified variables set specified values new observations. list variable name-value pairs expected. LHS refers variable. RHS refers values set variable. can string, symbol, numeric value NA, e.g., exprs(PARAMCD = \"TDOSE\", PARCAT1 =   \"OVERALL\"). general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Expected Records — derive_expected_records","text":"input dataset missed expected observations added by_vars. Note, variable populated new parameter rows specified by_vars set_values_to.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Expected Records — derive_expected_records","text":"group (variables specified by_vars parameter), records dataset_expected_obs missing input dataset added output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_expected_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Expected Records — derive_expected_records","text":"","code":"library(tibble)  adqs <- tribble(   ~USUBJID, ~PARAMCD, ~AVISITN, ~AVISIT, ~AVAL,   \"1\",      \"a\",             1, \"WEEK 1\",   10,   \"1\",      \"b\",             1, \"WEEK 1\",   11,   \"2\",      \"a\",             2, \"WEEK 2\",   12,   \"2\",      \"b\",             2, \"WEEK 2\",   14 )  # Example 1. visit variables are parameter independent parm_visit_ref <- tribble(   ~AVISITN, ~AVISIT,   1,        \"WEEK 1\",   2,        \"WEEK 2\" )  derive_expected_records(   dataset = adqs,   dataset_expected_obs = parm_visit_ref,   by_vars = exprs(USUBJID, PARAMCD),   set_values_to = exprs(DTYPE = \"DERIVED\") ) #> # A tibble: 8 x 6 #>   USUBJID PARAMCD AVISITN AVISIT  AVAL DTYPE   #>   <chr>   <chr>     <dbl> <chr>  <dbl> <chr>   #> 1 1       a             1 WEEK 1    10 NA      #> 2 1       a             2 WEEK 2    NA DERIVED #> 3 1       b             1 WEEK 1    11 NA      #> 4 1       b             2 WEEK 2    NA DERIVED #> 5 2       a             1 WEEK 1    NA DERIVED #> 6 2       a             2 WEEK 2    12 NA      #> 7 2       b             1 WEEK 1    NA DERIVED #> 8 2       b             2 WEEK 2    14 NA       # Example 2. visit variables are parameter dependent parm_visit_ref <- tribble(   ~PARAMCD, ~AVISITN, ~AVISIT,   \"a\",             1, \"WEEK 1\",   \"a\",             2, \"WEEK 2\",   \"b\",             1, \"WEEK 1\" )  derive_expected_records(   dataset = adqs,   dataset_expected_obs = parm_visit_ref,   by_vars = exprs(USUBJID, PARAMCD),   set_values_to = exprs(DTYPE = \"DERIVED\") ) #> # A tibble: 7 x 6 #>   USUBJID PARAMCD AVISITN AVISIT  AVAL DTYPE   #>   <chr>   <chr>     <dbl> <chr>  <dbl> <chr>   #> 1 1       a             1 WEEK 1    10 NA      #> 2 1       a             2 WEEK 2    NA DERIVED #> 3 1       b             1 WEEK 1    11 NA      #> 4 2       a             1 WEEK 1    NA DERIVED #> 5 2       a             2 WEEK 2    12 NA      #> 6 2       b             1 WEEK 1    NA DERIVED #> 7 2       b             2 WEEK 2    14 NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"Add first available record events group new records, variables selected observation kept. can used selecting extreme observation series user-defined events. distinguish derive_extreme_event() derive_extreme_records(), extreme records derived based certain order existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"","code":"derive_extreme_event(   dataset,   by_vars = NULL,   events,   order,   mode,   check_type = \"warning\",   set_values_to )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"dataset Input dataset variables specified order by_vars parameter expected. by_vars Grouping variables Default: NULL Permitted Values: list variables created exprs() events Conditions new values defining events list event() objects expected. observations listed events considered deriving extreme event. multiple records meet filter condition, take first record sorted order. order Sort order particular event events one observation, within event group, records ordered specified order. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) mode Selection mode (first last) particular event events one observation, \"first\"/\"last\" select first/last record type events sorting order. Permitted Values: \"first\", \"last\" check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" set_values_to Variables set specified variables set specified values new observations. list variable name-value pairs expected. LHS refers variable. RHS refers values set variable. can string, symbol, numeric value NA, e.g., exprs(PARAMCD = \"TDOSE\", PARCAT1 =   \"OVERALL\"). general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"input dataset best worst observation group added new observations.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"Construct dataset based events: apply filter condition set_values_to input dataset. group (respect variables specified by_vars parameter) first last observation (respect order specified order parameter mode specified mode parameter) selected. variables specified set_values_to parameter added selected observations. observations added input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the Worst or Best Observation for Each By Group as New Records — derive_extreme_event","text":"","code":"library(tibble)  adqs <- tribble(   ~USUBJID, ~PARAMCD,       ~AVALC,        ~ADY,   \"1\",      \"NO SLEEP\",     \"N\",              1,   \"1\",      \"WAKE UP\",      \"N\",              2,   \"1\",      \"FALL ASLEEP\",  \"N\",              3,   \"2\",      \"NO SLEEP\",     \"N\",              1,   \"2\",      \"WAKE UP\",      \"Y\",              2,   \"2\",      \"WAKE UP\",      \"Y\",              3,   \"2\",      \"FALL ASLEEP\",  \"N\",              4,   \"3\",      \"NO SLEEP\",     NA_character_,    1 )  # Add a new record for each USUBJID storing the the worst sleeping problem. derive_extreme_event(   adqs,   by_vars = exprs(USUBJID),   events = list(     event(       condition = PARAMCD == \"NO SLEEP\" & AVALC == \"Y\",       set_values_to = exprs(AVALC = \"No sleep\", AVAL = 1)     ),     event(       condition = PARAMCD == \"WAKE UP\" & AVALC == \"Y\",       set_values_to = exprs(AVALC = \"Waking up more than three times\", AVAL = 2)     ),     event(       condition = PARAMCD == \"FALL ASLEEP\" & AVALC == \"Y\",       set_values_to = exprs(AVALC = \"More than 30 mins to fall asleep\", AVAL = 3)     ),     event(       condition = all(AVALC == \"N\"),       set_values_to = exprs(         AVALC = \"No sleeping problems\", AVAL = 4       )     ),     event(       condition = TRUE,       set_values_to = exprs(AVALC = \"Missing\", AVAL = 99)     )   ),   order = exprs(ADY),   mode = \"last\",   set_values_to = exprs(     PARAMCD = \"WSP\",     PARAM = \"Worst Sleeping Problems\"   ) ) #> # A tibble: 11 x 6 #>    USUBJID PARAMCD     AVALC                       ADY  AVAL PARAM               #>    <chr>   <chr>       <chr>                     <dbl> <dbl> <chr>               #>  1 1       NO SLEEP    N                             1    NA NA                  #>  2 1       WAKE UP     N                             2    NA NA                  #>  3 1       FALL ASLEEP N                             3    NA NA                  #>  4 2       NO SLEEP    N                             1    NA NA                  #>  5 2       WAKE UP     Y                             2    NA NA                  #>  6 2       WAKE UP     Y                             3    NA NA                  #>  7 2       FALL ASLEEP N                             4    NA NA                  #>  8 3       NO SLEEP    NA                            1    NA NA                  #>  9 1       WSP         No sleeping problems          3     4 Worst Sleeping Pro… #> 10 2       WSP         Waking up more than thre…     3     2 Worst Sleeping Pro… #> 11 3       WSP         Missing                       1    99 Worst Sleeping Pro…"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"Add first last observation group new observations. can used example adding maximum minimum value separate visit. variables selected observation kept. distinguish derive_extreme_records() derive_summary_records(), variables populated new records.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"","code":"derive_extreme_records(   dataset,   by_vars = NULL,   order,   mode,   check_type = \"warning\",   filter = NULL,   set_values_to )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"dataset Input dataset variables specified order by_vars parameter expected. by_vars Grouping variables Default: NULL Permitted Values: list variables created exprs() order Sort order Within group observations ordered specified order. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) mode Selection mode (first last) \"first\" specified, first observation group added input dataset. \"last\" specified, last observation group added input dataset. Permitted Values: \"first\", \"last\" check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" filter Filter observations consider observations fulfilling specified condition taken account selecting first last observation. parameter specified, observations considered. Default: NULL Permitted Values: condition set_values_to Variables set specified variables set specified values new observations. list variable name-value pairs expected. LHS refers variable. RHS refers values set variable. can string, symbol, numeric value NA, e.g., exprs(PARAMCD = \"TDOSE\", PARCAT1 =   \"OVERALL\"). general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"input dataset first last observation group added new observations.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"input dataset restricted specified filter parameter. group (respect variables specified by_vars parameter) first last observation (respect order specified order parameter mode specified mode parameter) selected. variables specified set_values_to parameter added selected observations. observations added input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_extreme_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the First or Last Observation for Each By Group as New Records — derive_extreme_records","text":"","code":"library(tibble)  adlb <- tribble(   ~USUBJID, ~AVISITN, ~AVAL, ~LBSEQ,   \"1\",      1,          113,      1,   \"1\",      2,          113,      2,   \"1\",      3,          117,      3,   \"2\",      1,          101,      1,   \"2\",      2,          101,      2,   \"2\",      3,           95,      3 )  # Add a new record for each USUBJID storing the minimum value (first AVAL). # If multiple records meet the minimum criterion, take the first value by # AVISITN. Set AVISITN = 97 and DTYPE = MINIMUM for these new records. derive_extreme_records(   adlb,   by_vars = exprs(USUBJID),   order = exprs(AVAL, AVISITN),   mode = \"first\",   filter = !is.na(AVAL),   set_values_to = exprs(     AVISITN = 97,     DTYPE = \"MINIMUM\"   ) ) #> # A tibble: 8 x 5 #>   USUBJID AVISITN  AVAL LBSEQ DTYPE   #>   <chr>     <dbl> <dbl> <dbl> <chr>   #> 1 1             1   113     1 NA      #> 2 1             2   113     2 NA      #> 3 1             3   117     3 NA      #> 4 2             1   101     1 NA      #> 5 2             2   101     2 NA      #> 6 2             3    95     3 NA      #> 7 1            97   113     1 MINIMUM #> 8 2            97    95     3 MINIMUM  # Add a new record for each USUBJID storing the maximum value (last AVAL). # If multiple records meet the maximum criterion, take the first value by # AVISITN. Set AVISITN = 98 and DTYPE = MAXIMUM for these new records. derive_extreme_records(   adlb,   by_vars = exprs(USUBJID),   order = exprs(desc(AVAL), AVISITN),   mode = \"first\",   filter = !is.na(AVAL),   set_values_to = exprs(     AVISITN = 98,     DTYPE = \"MAXIMUM\"   ) ) #> # A tibble: 8 x 5 #>   USUBJID AVISITN  AVAL LBSEQ DTYPE   #>   <chr>     <dbl> <dbl> <dbl> <chr>   #> 1 1             1   113     1 NA      #> 2 1             2   113     2 NA      #> 3 1             3   117     3 NA      #> 4 2             1   101     1 NA      #> 5 2             2   101     2 NA      #> 6 2             3    95     3 NA      #> 7 1            98   117     3 MAXIMUM #> 8 2            98   101     1 MAXIMUM  # Add a new record for each USUBJID storing for the last value. # Set AVISITN = 99 and DTYPE = LOV for these new records. derive_extreme_records(   adlb,   by_vars = exprs(USUBJID),   order = exprs(AVISITN),   mode = \"last\",   set_values_to = exprs(     AVISITN = 99,     DTYPE = \"LOV\"   ) ) #> # A tibble: 8 x 5 #>   USUBJID AVISITN  AVAL LBSEQ DTYPE #>   <chr>     <dbl> <dbl> <dbl> <chr> #> 1 1             1   113     1 NA    #> 2 1             2   113     2 NA    #> 3 1             3   117     3 NA    #> 4 2             1   101     1 NA    #> 5 2             2   101     2 NA    #> 6 2             3    95     3 NA    #> 7 1            99   117     3 LOV   #> 8 2            99    95     3 LOV"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"Adds LOCF records new observations 'group' dataset contain observations missed visits/time points.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"","code":"derive_locf_records(   dataset,   dataset_expected_obs,   by_vars,   analysis_var = AVAL,   order,   keep_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"dataset Input dataset columns specified by_vars, analysis_var, order, keep_vars parameters expected. dataset_expected_obs Expected observations dataset Data frame combinations PARAMCD, PARAM, AVISIT, AVISITN, ... expected dataset expected. by_vars Grouping variables group defined by_vars observations dataset_expected_obs added output dataset corresponding observation input dataset analysis_var NA corresponding observation input dataset. analysis_var Analysis variable. Default: AVAL Permitted Values: variable order List variables sorting dataset dataset sorted order carrying last observation forward (eg. AVAL) within by_vars. keep_vars Variables need carrying last observation forward Keep variables need carrying last observation forward analysis_var (e.g., PARAMN, VISITNUM). default NULL, variables specified by_vars analysis_var populated newly created records.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"input dataset new \"LOCF\" observations added by_vars. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"group (respect variables specified by_vars parameter) observations dataset_expected_obs added output dataset corresponding observation input dataset analysis_var NA corresponding observation input dataset. new observations, analysis_var set non-missing analysis_var previous observation input dataset (sorted order) DTYPE set \"LOCF\".","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"G Gayatri","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_locf_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive LOCF (Last Observation Carried Forward) Records — derive_locf_records","text":"","code":"library(dplyr) library(tibble)  advs <- tribble(   ~STUDYID,  ~USUBJID,      ~PARAMCD, ~PARAMN, ~AVAL, ~AVISITN, ~AVISIT,   \"CDISC01\", \"01-701-1015\", \"PULSE\",        1,    61,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1015\", \"PULSE\",        1,    60,        2, \"WEEK 6\",   \"CDISC01\", \"01-701-1015\", \"DIABP\",        2,    51,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1015\", \"DIABP\",        2,    50,        2, \"WEEK 2\",   \"CDISC01\", \"01-701-1015\", \"DIABP\",        2,    51,        4, \"WEEK 4\",   \"CDISC01\", \"01-701-1015\", \"DIABP\",        2,    50,        6, \"WEEK 6\",   \"CDISC01\", \"01-701-1015\", \"SYSBP\",        3,   121,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1015\", \"SYSBP\",        3,   121,        2, \"WEEK 2\",   \"CDISC01\", \"01-701-1015\", \"SYSBP\",        3,   121,        4, \"WEEK 4\",   \"CDISC01\", \"01-701-1015\", \"SYSBP\",        3,   121,        6, \"WEEK 6\",   \"CDISC01\", \"01-701-1028\", \"PULSE\",        1,    65,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1028\", \"DIABP\",        2,    79,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1028\", \"DIABP\",        2,    80,        2, \"WEEK 2\",   \"CDISC01\", \"01-701-1028\", \"DIABP\",        2,    NA,        4, \"WEEK 4\",   \"CDISC01\", \"01-701-1028\", \"DIABP\",        2,    NA,        6, \"WEEK 6\",   \"CDISC01\", \"01-701-1028\", \"SYSBP\",        3,   130,        0, \"BASELINE\",   \"CDISC01\", \"01-701-1028\", \"SYSBP\",        3,   132,        2, \"WEEK 2\" )   # A dataset with all the combinations of PARAMCD, PARAM, AVISIT, AVISITN, ... which are expected. advs_expected_obsv <- tribble(   ~PARAMCD, ~AVISITN, ~AVISIT,   \"PULSE\",         0, \"BASELINE\",   \"PULSE\",         6, \"WEEK 6\",   \"DIABP\",         0, \"BASELINE\",   \"DIABP\",         2, \"WEEK 2\",   \"DIABP\",         4, \"WEEK 4\",   \"DIABP\",         6, \"WEEK 6\",   \"SYSBP\",         0, \"BASELINE\",   \"SYSBP\",         2, \"WEEK 2\",   \"SYSBP\",         4, \"WEEK 4\",   \"SYSBP\",         6, \"WEEK 6\" )  derive_locf_records(   data = advs,   dataset_expected_obs = advs_expected_obsv,   by_vars = exprs(STUDYID, USUBJID, PARAMCD),   order = exprs(AVISITN, AVISIT),   keep_vars = exprs(PARAMN) ) #> # A tibble: 23 x 8 #>    STUDYID USUBJID     PARAMCD PARAMN  AVAL AVISITN AVISIT   DTYPE #>    <chr>   <chr>       <chr>    <dbl> <dbl>   <dbl> <chr>    <chr> #>  1 CDISC01 01-701-1015 DIABP        2    51       0 BASELINE NA    #>  2 CDISC01 01-701-1015 DIABP        2    50       2 WEEK 2   NA    #>  3 CDISC01 01-701-1015 DIABP        2    51       4 WEEK 4   NA    #>  4 CDISC01 01-701-1015 DIABP        2    50       6 WEEK 6   NA    #>  5 CDISC01 01-701-1015 PULSE        1    61       0 BASELINE NA    #>  6 CDISC01 01-701-1015 PULSE        1    60       2 WEEK 6   NA    #>  7 CDISC01 01-701-1015 PULSE        1    60       6 WEEK 6   LOCF  #>  8 CDISC01 01-701-1015 SYSBP        3   121       0 BASELINE NA    #>  9 CDISC01 01-701-1015 SYSBP        3   121       2 WEEK 2   NA    #> 10 CDISC01 01-701-1015 SYSBP        3   121       4 WEEK 4   NA    #> # … with 13 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for BMI — derive_param_bmi","title":"Adds a Parameter for BMI — derive_param_bmi","text":"Adds record BMI/Body Mass Index using Weight Height group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for BMI — derive_param_bmi","text":"","code":"derive_param_bmi(   dataset,   by_vars,   set_values_to = exprs(PARAMCD = \"BMI\"),   weight_code = \"WEIGHT\",   height_code = \"HEIGHT\",   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for BMI — derive_param_bmi","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified weight_code height_code. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs weight_code WEIGHT parameter code observations PARAMCD equals specified value considered WEIGHT. expected WEIGHT measured kg Permitted Values: character value height_code HEIGHT parameter code observations PARAMCD equals specified value considered HEIGHT. expected HEIGHT measured cm Permitted Values: character value get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for BMI — derive_param_bmi","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for BMI — derive_param_bmi","text":"analysis value new parameter derived $$BMI = \\frac{WEIGHT}{HEIGHT^2}$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for BMI — derive_param_bmi","text":"","code":"library(tibble)  advs <- tribble(   ~USUBJID,      ~PARAMCD, ~PARAM,        ~AVAL, ~AVISIT,   \"01-701-1015\", \"HEIGHT\", \"Height (cm)\", 147,   \"SCREENING\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 54.0,  \"SCREENING\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 54.4,  \"BASELINE\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 53.1,  \"WEEK 2\",   \"01-701-1028\", \"HEIGHT\", \"Height (cm)\", 163,   \"SCREENING\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 78.5,  \"SCREENING\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 80.3,  \"BASELINE\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 80.7,  \"WEEK 2\" )  derive_param_bmi(   advs,   by_vars = exprs(USUBJID, AVISIT),   weight_code = \"WEIGHT\",   height_code = \"HEIGHT\",   set_values_to = exprs(     PARAMCD = \"BMI\",     PARAM = \"Body Mass Index (kg/m^2)\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 10 x 5 #>    USUBJID     PARAMCD PARAM                     AVAL AVISIT    #>    <chr>       <chr>   <chr>                    <dbl> <chr>     #>  1 01-701-1015 HEIGHT  Height (cm)              147   SCREENING #>  2 01-701-1015 WEIGHT  Weight (kg)               54   SCREENING #>  3 01-701-1015 WEIGHT  Weight (kg)               54.4 BASELINE  #>  4 01-701-1015 WEIGHT  Weight (kg)               53.1 WEEK 2    #>  5 01-701-1028 HEIGHT  Height (cm)              163   SCREENING #>  6 01-701-1028 WEIGHT  Weight (kg)               78.5 SCREENING #>  7 01-701-1028 WEIGHT  Weight (kg)               80.3 BASELINE  #>  8 01-701-1028 WEIGHT  Weight (kg)               80.7 WEEK 2    #>  9 01-701-1015 BMI     Body Mass Index (kg/m^2)  25.0 SCREENING #> 10 01-701-1028 BMI     Body Mass Index (kg/m^2)  29.5 SCREENING"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","title":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","text":"Adds record BSA (Body Surface Area) using specified derivation method group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","text":"","code":"derive_param_bsa(   dataset,   by_vars,   method,   set_values_to = exprs(PARAMCD = \"BSA\"),   height_code = \"HEIGHT\",   weight_code = \"WEIGHT\",   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified HEIGHT WEIGHT. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables method Derivation method use. Note HEIGHT expected cm WEIGHT expected kg: Mosteller: sqrt(height * weight / 3600) DuBois-DuBois: 0.20247 * (height/100) ^ 0.725 * weight ^ 0.425 Haycock: 0.024265 * height ^ 0.3964 * weight ^ 0.5378 Gehan-George: 0.0235 * height ^ 0.42246 * weight ^ 0.51456 Boyd: 0.0003207 * (height ^ 0.3) * (1000 * weight) ^ (0.7285 - (0.0188 * log10(1000 * weight))) Fujimoto: 0.008883 * height ^ 0.663 * weight ^ 0.444 Takahira: 0.007241 * height ^ 0.725 * weight ^ 0.425 Permitted Values: character value set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs height_code HEIGHT parameter code observations PARAMCD equals specified value considered HEIGHT assessments. expected HEIGHT measured cm. Permitted Values: character value weight_code WEIGHT parameter code observations PARAMCD equals specified value considered WEIGHT assessments. expected WEIGHT measured kg. Permitted Values: character value get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_bsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for BSA (Body Surface Area) Using the Specified Method — derive_param_bsa","text":"","code":"library(tibble)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~VISIT,   \"01-701-1015\", \"HEIGHT\", \"Height (cm)\", 170, \"BASELINE\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 75, \"BASELINE\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 78, \"MONTH 1\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 80, \"MONTH 2\",   \"01-701-1028\", \"HEIGHT\", \"Height (cm)\", 185, \"BASELINE\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 90, \"BASELINE\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 88, \"MONTH 1\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 85, \"MONTH 2\", )  derive_param_bsa(   advs,   by_vars = exprs(USUBJID, VISIT),   method = \"Mosteller\",   set_values_to = exprs(     PARAMCD = \"BSA\",     PARAM = \"Body Surface Area (m^2)\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 10 x 5 #>    USUBJID     PARAMCD PARAM                     AVAL VISIT    #>    <chr>       <chr>   <chr>                    <dbl> <chr>    #>  1 01-701-1015 HEIGHT  Height (cm)             170    BASELINE #>  2 01-701-1015 WEIGHT  Weight (kg)              75    BASELINE #>  3 01-701-1015 WEIGHT  Weight (kg)              78    MONTH 1  #>  4 01-701-1015 WEIGHT  Weight (kg)              80    MONTH 2  #>  5 01-701-1028 HEIGHT  Height (cm)             185    BASELINE #>  6 01-701-1028 WEIGHT  Weight (kg)              90    BASELINE #>  7 01-701-1028 WEIGHT  Weight (kg)              88    MONTH 1  #>  8 01-701-1028 WEIGHT  Weight (kg)              85    MONTH 2  #>  9 01-701-1015 BSA     Body Surface Area (m^2)   1.88 BASELINE #> 10 01-701-1028 BSA     Body Surface Area (m^2)   2.15 BASELINE  derive_param_bsa(   advs,   by_vars = exprs(USUBJID, VISIT),   method = \"Fujimoto\",   set_values_to = exprs(     PARAMCD = \"BSA\",     PARAM = \"Body Surface Area (m^2)\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 10 x 5 #>    USUBJID     PARAMCD PARAM                     AVAL VISIT    #>    <chr>       <chr>   <chr>                    <dbl> <chr>    #>  1 01-701-1015 HEIGHT  Height (cm)             170    BASELINE #>  2 01-701-1015 WEIGHT  Weight (kg)              75    BASELINE #>  3 01-701-1015 WEIGHT  Weight (kg)              78    MONTH 1  #>  4 01-701-1015 WEIGHT  Weight (kg)              80    MONTH 2  #>  5 01-701-1028 HEIGHT  Height (cm)             185    BASELINE #>  6 01-701-1028 WEIGHT  Weight (kg)              90    BASELINE #>  7 01-701-1028 WEIGHT  Weight (kg)              88    MONTH 1  #>  8 01-701-1028 WEIGHT  Weight (kg)              85    MONTH 2  #>  9 01-701-1015 BSA     Body Surface Area (m^2)   1.82 BASELINE #> 10 01-701-1028 BSA     Body Surface Area (m^2)   2.09 BASELINE"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"Adds parameter computed analysis value parameters. expected analysis value new parameter defined expression using analysis values parameters. example mean arterial pressure (MAP) can derived systolic (SYSBP) diastolic blood pressure (DIABP) formula $$MAP = \\frac{SYSBP + 2 DIABP}{3}$$","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"","code":"derive_param_computed(   dataset,   by_vars,   parameters,   analysis_value,   set_values_to,   filter = NULL,   constant_by_vars = NULL,   constant_parameters = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified parameters. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables parameters Required parameter codes expected parameter codes (PARAMCD) required derive new parameter specified parameter constant_parameters parameter. Permitted Values: character vector PARAMCD values analysis_value Definition analysis value expression defining analysis value (AVAL) new parameter expected. analysis values parameters specified parameters can accessed using AVAL.<parameter code>, e.g., AVAL.SYSBP. Permitted Values: unquoted expression set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition constant_by_vars variables constant parameters constant parameters (parameters measured ) merged parameters using specified variables. (Refer Example 2) Permitted Values: list variables constant_parameters Required constant parameter codes expected parameter codes (PARAMCD) required derive new parameter measured specified . example BMI derived height measured weight measured visit. Height specified constant_parameters parameter. (Refer Example 2) Permitted Values: character vector PARAMCD values","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"group (respect variables specified by_vars parameter) observation added output dataset filtered input dataset contains exactly one observation parameter code specified parameters. new observations AVAL set value specified analysis_value variables specified set_values_to set provided values. values variables input dataset set NA.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_computed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter Computed from the Analysis Value of Other Parameters — derive_param_computed","text":"","code":"library(tibble)  # Example 1: Derive MAP advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-701-1015\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 51, \"mmHg\", \"BASELINE\",   \"01-701-1015\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 50, \"mmHg\", \"WEEK 2\",   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 121, \"mmHg\", \"BASELINE\",   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 121, \"mmHg\", \"WEEK 2\",   \"01-701-1028\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 79, \"mmHg\", \"BASELINE\",   \"01-701-1028\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 80, \"mmHg\", \"WEEK 2\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 130, \"mmHg\", \"BASELINE\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 132, \"mmHg\", \"WEEK 2\" )  derive_param_computed(   advs,   by_vars = exprs(USUBJID, VISIT),   parameters = c(\"SYSBP\", \"DIABP\"),   analysis_value = (AVAL.SYSBP + 2 * AVAL.DIABP) / 3,   set_values_to = exprs(     PARAMCD = \"MAP\",     PARAM = \"Mean Arterial Pressure (mmHg)\",     AVALU = \"mmHg\"   ) ) #> # A tibble: 12 x 6 #>    USUBJID     PARAMCD PARAM                            AVAL AVALU VISIT    #>    <chr>       <chr>   <chr>                           <dbl> <chr> <chr>    #>  1 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  51   mmHg  BASELINE #>  2 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  50   mmHg  WEEK 2   #>  3 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   mmHg  BASELINE #>  4 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   mmHg  WEEK 2   #>  5 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  79   mmHg  BASELINE #>  6 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  80   mmHg  WEEK 2   #>  7 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  130   mmHg  BASELINE #>  8 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  132   mmHg  WEEK 2   #>  9 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    74.3 mmHg  BASELINE #> 10 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    73.7 mmHg  WEEK 2   #> 11 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    96   mmHg  BASELINE #> 12 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    97.3 mmHg  WEEK 2    # Example 2: Derive BMI where height is measured only once advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-701-1015\", \"HEIGHT\", \"Height (cm)\", 147, \"cm\", \"SCREENING\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 54.0, \"kg\", \"SCREENING\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 54.4, \"kg\", \"BASELINE\",   \"01-701-1015\", \"WEIGHT\", \"Weight (kg)\", 53.1, \"kg\", \"WEEK 2\",   \"01-701-1028\", \"HEIGHT\", \"Height (cm)\", 163, \"cm\", \"SCREENING\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 78.5, \"kg\", \"SCREENING\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 80.3, \"kg\", \"BASELINE\",   \"01-701-1028\", \"WEIGHT\", \"Weight (kg)\", 80.7, \"kg\", \"WEEK 2\" )  derive_param_computed(   advs,   by_vars = exprs(USUBJID, VISIT),   parameters = \"WEIGHT\",   analysis_value = AVAL.WEIGHT / (AVAL.HEIGHT / 100)^2,   set_values_to = exprs(     PARAMCD = \"BMI\",     PARAM = \"Body Mass Index (kg/m^2)\",     AVALU = \"kg/m^2\"   ),   constant_parameters = c(\"HEIGHT\"),   constant_by_vars = exprs(USUBJID) ) #> # A tibble: 14 x 6 #>    USUBJID     PARAMCD PARAM                     AVAL AVALU  VISIT     #>    <chr>       <chr>   <chr>                    <dbl> <chr>  <chr>     #>  1 01-701-1015 HEIGHT  Height (cm)              147   cm     SCREENING #>  2 01-701-1015 WEIGHT  Weight (kg)               54   kg     SCREENING #>  3 01-701-1015 WEIGHT  Weight (kg)               54.4 kg     BASELINE  #>  4 01-701-1015 WEIGHT  Weight (kg)               53.1 kg     WEEK 2    #>  5 01-701-1028 HEIGHT  Height (cm)              163   cm     SCREENING #>  6 01-701-1028 WEIGHT  Weight (kg)               78.5 kg     SCREENING #>  7 01-701-1028 WEIGHT  Weight (kg)               80.3 kg     BASELINE  #>  8 01-701-1028 WEIGHT  Weight (kg)               80.7 kg     WEEK 2    #>  9 01-701-1015 BMI     Body Mass Index (kg/m^2)  25.0 kg/m^2 SCREENING #> 10 01-701-1015 BMI     Body Mass Index (kg/m^2)  25.2 kg/m^2 BASELINE  #> 11 01-701-1015 BMI     Body Mass Index (kg/m^2)  24.6 kg/m^2 WEEK 2    #> 12 01-701-1028 BMI     Body Mass Index (kg/m^2)  29.5 kg/m^2 SCREENING #> 13 01-701-1028 BMI     Body Mass Index (kg/m^2)  30.2 kg/m^2 BASELINE  #> 14 01-701-1028 BMI     Body Mass Index (kg/m^2)  30.4 kg/m^2 WEEK 2"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Dose Intensity — derive_param_doseint","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"Adds record dose intensity group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"","code":"derive_param_doseint(   dataset,   by_vars,   set_values_to = exprs(PARAMCD = \"TNDOSINT\"),   tadm_code = \"TNDOSE\",   tpadm_code = \"TSNDOSE\",   zero_doses = \"Inf\",   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified tadm_code padm_code. by_vars Grouping variables variables specified by_vars populated newly created records. Permitted Values: list variables set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs tadm_code Total Doses Administered parameter code observations PARAMCD equals specified value considered total dose administered.  AVAL associated PARAMCD numerator dose intensity calculation. Permitted Values: character value tpadm_code Total Doses Planned parameter code observations PARAMCD equals specified value considered total planned dose.  AVAL associated PARAMCD denominator dose intensity calculation. Permitted Values: character value zero_doses Flag indicating logic handling 0 planned administered doses by_vars group Default: Inf Permitted Values: Inf, 100 record returned either planned (tpadm_code) administered (tadm_code) AVAL NA.  record returned record exist tadm_code tpadm_code specified by_var. zero_doses = Inf: planned dose (tpadm_code) 0 administered dose (tadm_code) 0, NaN returned. planned dose (tpadm_code) 0 administered dose (tadm_code) > 0, Inf returned. zero_doses = 100 : planned dose (tpadm_code) 0 administered dose (tadm_code) 0, 0 returned. planned dose (tpadm_code) 0 administered dose (tadm_code) > 0, 100 returned. filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"input dataset new parameter rows added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"analysis value new parameter derived Total Dose / Planned Dose * 100","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_doseint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Dose Intensity — derive_param_doseint","text":"","code":"library(tibble) library(lubridate, warn.conflicts = FALSE)  adex <- tribble(   ~USUBJID, ~PARAMCD, ~VISIT, ~ANL01FL, ~ASTDT, ~AENDT, ~AVAL,   \"P001\", \"TNDOSE\", \"V1\", \"Y\", ymd(\"2020-01-01\"), ymd(\"2020-01-30\"), 59,   \"P001\", \"TSNDOSE\", \"V1\", \"Y\", ymd(\"2020-01-01\"), ymd(\"2020-02-01\"), 96,   \"P001\", \"TNDOSE\", \"V2\", \"Y\", ymd(\"2020-02-01\"), ymd(\"2020-03-15\"), 88,   \"P001\", \"TSNDOSE\", \"V2\", \"Y\", ymd(\"2020-02-05\"), ymd(\"2020-03-01\"), 88,   \"P002\", \"TNDOSE\", \"V1\", \"Y\", ymd(\"2021-01-01\"), ymd(\"2021-01-30\"), 0,   \"P002\", \"TSNDOSE\", \"V1\", \"Y\", ymd(\"2021-01-01\"), ymd(\"2021-02-01\"), 0,   \"P002\", \"TNDOSE\", \"V2\", \"Y\", ymd(\"2021-02-01\"), ymd(\"2021-03-15\"), 52,   \"P002\", \"TSNDOSE\", \"V2\", \"Y\", ymd(\"2021-02-05\"), ymd(\"2021-03-01\"), 0 )  derive_param_doseint(   adex,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(PARAMCD = \"TNDOSINT\"),   tadm_code = \"TNDOSE\",   tpadm_code = \"TSNDOSE\" ) #> # A tibble: 12 x 7 #>    USUBJID PARAMCD  VISIT ANL01FL ASTDT      AENDT       AVAL #>    <chr>   <chr>    <chr> <chr>   <date>     <date>     <dbl> #>  1 P001    TNDOSE   V1    Y       2020-01-01 2020-01-30  59   #>  2 P001    TSNDOSE  V1    Y       2020-01-01 2020-02-01  96   #>  3 P001    TNDOSE   V2    Y       2020-02-01 2020-03-15  88   #>  4 P001    TSNDOSE  V2    Y       2020-02-05 2020-03-01  88   #>  5 P002    TNDOSE   V1    Y       2021-01-01 2021-01-30   0   #>  6 P002    TSNDOSE  V1    Y       2021-01-01 2021-02-01   0   #>  7 P002    TNDOSE   V2    Y       2021-02-01 2021-03-15  52   #>  8 P002    TSNDOSE  V2    Y       2021-02-05 2021-03-01   0   #>  9 P001    TNDOSINT V1    NA      NA         NA          61.5 #> 10 P001    TNDOSINT V2    NA      NA         NA         100   #> 11 P002    TNDOSINT V1    NA      NA         NA         NaN   #> 12 P002    TNDOSINT V2    NA      NA         NA         Inf    derive_param_doseint(   adex,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(PARAMCD = \"TDOSINT2\"),   tadm_code = \"TNDOSE\",   tpadm_code = \"TSNDOSE\",   zero_doses = \"100\" ) #> # A tibble: 12 x 7 #>    USUBJID PARAMCD  VISIT ANL01FL ASTDT      AENDT       AVAL #>    <chr>   <chr>    <chr> <chr>   <date>     <date>     <dbl> #>  1 P001    TNDOSE   V1    Y       2020-01-01 2020-01-30  59   #>  2 P001    TSNDOSE  V1    Y       2020-01-01 2020-02-01  96   #>  3 P001    TNDOSE   V2    Y       2020-02-01 2020-03-15  88   #>  4 P001    TSNDOSE  V2    Y       2020-02-05 2020-03-01  88   #>  5 P002    TNDOSE   V1    Y       2021-01-01 2021-01-30   0   #>  6 P002    TSNDOSE  V1    Y       2021-01-01 2021-02-01   0   #>  7 P002    TNDOSE   V2    Y       2021-02-01 2021-03-15  52   #>  8 P002    TSNDOSE  V2    Y       2021-02-05 2021-03-01   0   #>  9 P001    TDOSINT2 V1    NA      NA         NA          61.5 #> 10 P001    TDOSINT2 V2    NA      NA         NA         100   #> 11 P002    TDOSINT2 V1    NA      NA         NA           0   #> 12 P002    TDOSINT2 V2    NA      NA         NA         100"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Existence Flag Parameter — derive_param_exist_flag","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"Add new parameter indicating certain event exists dataset. AVALC AVAL indicate event occurred . example, function can derive parameter indicating measurable disease baseline.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"","code":"derive_param_exist_flag(   dataset = NULL,   dataset_adsl,   dataset_add,   condition,   true_value = \"Y\",   false_value = NA_character_,   missing_value = NA_character_,   filter_add = NULL,   aval_fun = yn_to_numeric,   subject_keys = get_admiral_option(\"subject_keys\"),   set_values_to )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"dataset Input dataset variables specified subject_keys PARAMCD variable expected. dataset_adsl ADSL input dataset variables specified subject_keys expected. subject (defined subject_keys) specified dataset (dataset_adsl), existence flag calculated added new observation input datasets (dataset) dataset_add Additional dataset variables specified subject_keys parameter expected. dataset used check event occurred . observation dataset fulfilling event condition (condition) considered event. condition Event condition condition evaluated additional dataset (dataset_add). subjects evaluates TRUE least AVALC set true value (true_value) new observations. subjects evaluates FALSE NA observations AVALC set false value (false_value). subjects present additional dataset AVALC set missing value (missing_value). true_value True value subjects least one observations additional dataset (dataset_add) fulfilling event condition (condition), AVALC set specified value (true_value). Default: \"Y\" Permitted Value: character scalar false_value False value subjects least one observations additional dataset (dataset_add) none fulfilling event condition (condition), AVALC set specified value (false_value). Default: NA_character_ Permitted Value: character scalar missing_value Values used missing information subjects without observation additional dataset (dataset_add), AVALC set specified value (missing_value). Default: NA_character_ Permitted Value: character scalar filter_add Filter additional data observations fulfilling specified condition taken account flagging. parameter specified, observations considered. Permitted Values: condition aval_fun Function map character analysis value (AVALC) numeric analysis value (AVAL) (first) argument function must expect character vector function must return numeric vector. Default: yn_to_numeric (see yn_to_numeric() details) subject_keys Variables uniquely identify subject list symbols created using exprs() expected. set_values_to Variables set named list returned exprs() defining variables set new parameter, e.g. exprs(PARAMCD = \"MDIS\", PARAM = \"Measurable Disease Baseline\") expected. values must symbols, character strings, numeric values, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"input dataset new parameter indicating event occurred (AVALC, AVAL, variables specified subject_keys set_value_to populated new parameter)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"additional dataset (dataset_add) restricted observations matching filter_add condition. subject dataset_adsl new observation created. AVALC variable added set true value (true_value) subject least one observation exists (restricted) additional dataset condition evaluates TRUE. set false value (false_value) subject least one observation exists observations condition evaluates FALSE NA. Otherwise, set missing value (missing_value), .e., subject dataset_add. AVAL variable added set aval_fun(AVALC). variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exist_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Existence Flag Parameter — derive_param_exist_flag","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  # Derive a new parameter for measurable disease at baseline adsl <- tribble(   ~USUBJID,   \"1\",   \"2\",   \"3\" ) %>%   mutate(STUDYID = \"XX1234\")  tu <- tribble(   ~USUBJID, ~VISIT,      ~TUSTRESC,   \"1\",      \"SCREENING\", \"TARGET\",   \"1\",      \"WEEK 1\",    \"TARGET\",   \"1\",      \"WEEK 5\",    \"TARGET\",   \"1\",      \"WEEK 9\",    \"NON-TARGET\",   \"2\",      \"SCREENING\", \"NON-TARGET\",   \"2\",      \"SCREENING\", \"NON-TARGET\" ) %>%   mutate(     STUDYID = \"XX1234\",     TUTESTCD = \"TUMIDENT\"   )  derive_param_exist_flag(   dataset_adsl = adsl,   dataset_add = tu,   filter_add = TUTESTCD == \"TUMIDENT\" & VISIT == \"SCREENING\",   condition = TUSTRESC == \"TARGET\",   false_value = \"N\",   missing_value = \"N\",   set_values_to = exprs(     PARAMCD = \"MDIS\",     PARAM = \"Measurable Disease at Baseline\"   ) ) #> # A tibble: 3 x 6 #>   USUBJID STUDYID AVALC  AVAL PARAMCD PARAM                          #>   <chr>   <chr>   <chr> <dbl> <chr>   <chr>                          #> 1 1       XX1234  Y         1 MDIS    Measurable Disease at Baseline #> 2 2       XX1234  N         0 MDIS    Measurable Disease at Baseline #> 3 3       XX1234  N         0 MDIS    Measurable Disease at Baseline"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"Add record computed aggregated analysis value another parameter compute start (ASTDT(M))end date (AENDT(M)) minimum maximum date by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"","code":"derive_param_exposure(   dataset,   by_vars,   input_code,   analysis_var,   summary_fun,   filter = NULL,   set_values_to = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"dataset Input dataset variables specified by_vars,analysis_var parameters PARAMCD expected, Either ASTDTM AENDTM ASTDT AENDT also expected. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables input_code Required parameter code observations PARAMCD equals specified value considered compute summary record. Permitted Values: character PARAMCD value analysis_var Analysis variable. summary_fun Function takes input analysis_var performs calculation. can include built-functions well user defined functions, example mean function(x) mean(x, na.rm = TRUE). filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition set_values_to Variable-value pairs Set list variables specified value new observation(s) LHS refer variable. expected least PARAMCD defined. RHS refers values set variable. can string, symbol, numeric value NA. (e.g.  exprs(PARAMCD = \"TDOSE\",PARCAT1 = \"OVERALL\")). general expression allowed. Permitted Values: List variable-value pairs","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"input dataset new record added group (respect variables specified by_vars parameter). , variable populated new record specified by_vars. new record, variable specified analysis_var computed defined summary_fun, variable(s) specified LHS set_values_to set paired value (RHS). addition, start end date computed minimum/maximum dates by_vars. input datasets contains AxxDTM AxxDT ASTDTM,AENDTM, ASTDT, AENDT computed AxxDTM ASTDTM,AENDTM computed AxxDT ASTDT,AENDT computed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"group (respect variables specified by_vars parameter), observation added output dataset defined values set defined variables","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Aggregated Parameter and Derive the Associated Start and End Dates — derive_param_exposure","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate, warn.conflicts = FALSE) library(stringr, warn.conflicts = FALSE) adex <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~AVALC, ~VISIT, ~ASTDT, ~AENDT,   \"1015\", \"DOSE\", 80, NA_character_, \"BASELINE\", ymd(\"2014-01-02\"), ymd(\"2014-01-16\"),   \"1015\", \"DOSE\", 85, NA_character_, \"WEEK 2\", ymd(\"2014-01-17\"), ymd(\"2014-06-18\"),   \"1015\", \"DOSE\", 82, NA_character_, \"WEEK 24\", ymd(\"2014-06-19\"), ymd(\"2014-07-02\"),   \"1015\", \"ADJ\", NA, NA_character_, \"BASELINE\", ymd(\"2014-01-02\"), ymd(\"2014-01-16\"),   \"1015\", \"ADJ\", NA, NA_character_, \"WEEK 2\", ymd(\"2014-01-17\"), ymd(\"2014-06-18\"),   \"1015\", \"ADJ\", NA, NA_character_, \"WEEK 24\", ymd(\"2014-06-19\"), ymd(\"2014-07-02\"),   \"1017\", \"DOSE\", 80, NA_character_, \"BASELINE\", ymd(\"2014-01-05\"), ymd(\"2014-01-19\"),   \"1017\", \"DOSE\", 50, NA_character_, \"WEEK 2\", ymd(\"2014-01-20\"), ymd(\"2014-05-10\"),   \"1017\", \"DOSE\", 65, NA_character_, \"WEEK 24\", ymd(\"2014-05-10\"), ymd(\"2014-07-02\"),   \"1017\", \"ADJ\", NA, NA_character_, \"BASELINE\", ymd(\"2014-01-05\"), ymd(\"2014-01-19\"),   \"1017\", \"ADJ\", NA, \"ADVERSE EVENT\", \"WEEK 2\", ymd(\"2014-01-20\"), ymd(\"2014-05-10\"),   \"1017\", \"ADJ\", NA, NA_character_, \"WEEK 24\", ymd(\"2014-05-10\"), ymd(\"2014-07-02\") ) %>%   mutate(ASTDTM = ymd_hms(paste(ASTDT, \"00:00:00\")), AENDTM = ymd_hms(paste(AENDT, \"00:00:00\")))  # Cumulative dose adex %>%   derive_param_exposure(     by_vars = exprs(USUBJID),     set_values_to = exprs(PARAMCD = \"TDOSE\", PARCAT1 = \"OVERALL\"),     input_code = \"DOSE\",     analysis_var = AVAL,     summary_fun = function(x) sum(x, na.rm = TRUE)   ) %>%   select(-ASTDTM, -AENDTM) #> # A tibble: 14 x 8 #>    USUBJID PARAMCD  AVAL AVALC         VISIT    ASTDT      AENDT      PARCAT1 #>    <chr>   <chr>   <dbl> <chr>         <chr>    <date>     <date>     <chr>   #>  1 1015    DOSE       80 NA            BASELINE 2014-01-02 2014-01-16 NA      #>  2 1015    DOSE       85 NA            WEEK 2   2014-01-17 2014-06-18 NA      #>  3 1015    DOSE       82 NA            WEEK 24  2014-06-19 2014-07-02 NA      #>  4 1015    ADJ        NA NA            BASELINE 2014-01-02 2014-01-16 NA      #>  5 1015    ADJ        NA NA            WEEK 2   2014-01-17 2014-06-18 NA      #>  6 1015    ADJ        NA NA            WEEK 24  2014-06-19 2014-07-02 NA      #>  7 1017    DOSE       80 NA            BASELINE 2014-01-05 2014-01-19 NA      #>  8 1017    DOSE       50 NA            WEEK 2   2014-01-20 2014-05-10 NA      #>  9 1017    DOSE       65 NA            WEEK 24  2014-05-10 2014-07-02 NA      #> 10 1017    ADJ        NA NA            BASELINE 2014-01-05 2014-01-19 NA      #> 11 1017    ADJ        NA ADVERSE EVENT WEEK 2   2014-01-20 2014-05-10 NA      #> 12 1017    ADJ        NA NA            WEEK 24  2014-05-10 2014-07-02 NA      #> 13 1015    TDOSE     247 NA            NA       2014-01-02 2014-07-02 OVERALL #> 14 1017    TDOSE     195 NA            NA       2014-01-05 2014-07-02 OVERALL  # average dose in w2-24 adex %>%   derive_param_exposure(     by_vars = exprs(USUBJID),     filter = VISIT %in% c(\"WEEK 2\", \"WEEK 24\"),     set_values_to = exprs(PARAMCD = \"AVDW224\", PARCAT1 = \"WEEK2-24\"),     input_code = \"DOSE\",     analysis_var = AVAL,     summary_fun = function(x) mean(x, na.rm = TRUE)   ) %>%   select(-ASTDTM, -AENDTM) #> # A tibble: 14 x 8 #>    USUBJID PARAMCD  AVAL AVALC         VISIT    ASTDT      AENDT      PARCAT1  #>    <chr>   <chr>   <dbl> <chr>         <chr>    <date>     <date>     <chr>    #>  1 1015    DOSE     80   NA            BASELINE 2014-01-02 2014-01-16 NA       #>  2 1015    DOSE     85   NA            WEEK 2   2014-01-17 2014-06-18 NA       #>  3 1015    DOSE     82   NA            WEEK 24  2014-06-19 2014-07-02 NA       #>  4 1015    ADJ      NA   NA            BASELINE 2014-01-02 2014-01-16 NA       #>  5 1015    ADJ      NA   NA            WEEK 2   2014-01-17 2014-06-18 NA       #>  6 1015    ADJ      NA   NA            WEEK 24  2014-06-19 2014-07-02 NA       #>  7 1017    DOSE     80   NA            BASELINE 2014-01-05 2014-01-19 NA       #>  8 1017    DOSE     50   NA            WEEK 2   2014-01-20 2014-05-10 NA       #>  9 1017    DOSE     65   NA            WEEK 24  2014-05-10 2014-07-02 NA       #> 10 1017    ADJ      NA   NA            BASELINE 2014-01-05 2014-01-19 NA       #> 11 1017    ADJ      NA   ADVERSE EVENT WEEK 2   2014-01-20 2014-05-10 NA       #> 12 1017    ADJ      NA   NA            WEEK 24  2014-05-10 2014-07-02 NA       #> 13 1015    AVDW224  83.5 NA            NA       2014-01-17 2014-07-02 WEEK2-24 #> 14 1017    AVDW224  57.5 NA            NA       2014-01-20 2014-07-02 WEEK2-24  # Any dose adjustment? adex %>%   derive_param_exposure(     by_vars = exprs(USUBJID),     set_values_to = exprs(PARAMCD = \"TADJ\", PARCAT1 = \"OVERALL\"),     input_code = \"ADJ\",     analysis_var = AVALC,     summary_fun = function(x) if_else(sum(!is.na(x)) > 0, \"Y\", NA_character_)   ) %>%   select(-ASTDTM, -AENDTM) #> # A tibble: 14 x 8 #>    USUBJID PARAMCD  AVAL AVALC         VISIT    ASTDT      AENDT      PARCAT1 #>    <chr>   <chr>   <dbl> <chr>         <chr>    <date>     <date>     <chr>   #>  1 1015    DOSE       80 NA            BASELINE 2014-01-02 2014-01-16 NA      #>  2 1015    DOSE       85 NA            WEEK 2   2014-01-17 2014-06-18 NA      #>  3 1015    DOSE       82 NA            WEEK 24  2014-06-19 2014-07-02 NA      #>  4 1015    ADJ        NA NA            BASELINE 2014-01-02 2014-01-16 NA      #>  5 1015    ADJ        NA NA            WEEK 2   2014-01-17 2014-06-18 NA      #>  6 1015    ADJ        NA NA            WEEK 24  2014-06-19 2014-07-02 NA      #>  7 1017    DOSE       80 NA            BASELINE 2014-01-05 2014-01-19 NA      #>  8 1017    DOSE       50 NA            WEEK 2   2014-01-20 2014-05-10 NA      #>  9 1017    DOSE       65 NA            WEEK 24  2014-05-10 2014-07-02 NA      #> 10 1017    ADJ        NA NA            BASELINE 2014-01-05 2014-01-19 NA      #> 11 1017    ADJ        NA ADVERSE EVENT WEEK 2   2014-01-20 2014-05-10 NA      #> 12 1017    ADJ        NA NA            WEEK 24  2014-05-10 2014-07-02 NA      #> 13 1015    TADJ       NA NA            NA       2014-01-02 2014-07-02 OVERALL #> 14 1017    TADJ       NA Y             NA       2014-01-05 2014-07-02 OVERALL"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Extreme Event Parameter — derive_param_extreme_event","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"Add new parameter first last event occurring dataset. variable given new_var indicates event occurred . example, function can derive parameter first disease progression.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"","code":"derive_param_extreme_event(   dataset = NULL,   dataset_adsl,   dataset_source,   filter_source,   order = NULL,   new_var = NULL,   true_value = \"Y\",   false_value = \"N\",   mode = \"first\",   subject_keys = get_admiral_option(\"subject_keys\"),   set_values_to,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"dataset Input dataset PARAMCD variable expected. dataset_adsl ADSL input dataset variables specified subject_keys expected. observation specified dataset new observation added input dataset. dataset_source Source dataset observations specified dataset fulfilling condition specified filter_source considered event. variables specified subject_keys order parameter (applicable) expected. filter_source Source filter observations dataset_source fulfilling specified condition considered event. subjects least one event new_var set true_value. subjects new_var set false_value. order Order variable List symbols sorting source dataset (dataset_source). Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)). new_var New variable name variable indicate whether event happened . true_value True value subjects least one observation source dataset (dataset_source) fulfilling event condition (filter_source), new_var set specified value true_value. false_value False value subjects dataset_adsl without event, new_var set specified value false_value. mode Selection mode (first last) \"first\" specified, first observation subject selected. \"last\" specified, last observation subject selected. Permitted Values: \"first\", \"last\" subject_keys Variables uniquely identify subject list symbols created using exprs() expected. set_values_to Variables set named list returned exprs() defining variables set new parameter, e.g. exprs(PARAMCD = \"PD\", PARAM = \"Disease Progression\") expected. values must symbols, character strings, numeric values, NA. Note, require date datetime variable populated, needs defined . check_type Check uniqueness? \"warning\" \"error\" specified, message issued observations input dataset restricted source parameter (source_param) unique respect subject keys (subject_key parameter) order variables (order parameter). Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"input dataset new parameter indicating event occurred","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"source dataset (dataset_source) restricted observations fulfilling filter_source. subject (respect variables specified subject_keys parameter) either first last observation restricted source dataset selected. depending mode, (respect order, applicable) event condition (filter_source parameter) fulfilled. observation dataset_adsl new observation created. subjects event new_var set true_value. subjects new_var set false_value. subjects event variables dataset_source kept. subjects without event variables dataset_adsl dataset_source kept. variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_extreme_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Extreme Event Parameter — derive_param_extreme_event","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  # Derive a new parameter for the first disease progression (PD) adsl <- tribble(   ~USUBJID, ~DTHDT,   \"1\",      ymd(\"2022-05-13\"),   \"2\",      ymd(\"\"),   \"3\",      ymd(\"\") ) %>%   mutate(STUDYID = \"XX1234\")  adrs <- tribble(   ~USUBJID, ~ADTC,        ~AVALC,   \"1\",      \"2020-01-02\", \"PR\",   \"1\",      \"2020-02-01\", \"CR\",   \"1\",      \"2020-03-01\", \"CR\",   \"1\",      \"2020-04-01\", \"SD\",   \"2\",      \"2021-06-15\", \"SD\",   \"2\",      \"2021-07-16\", \"PD\",   \"2\",      \"2021-09-14\", \"PD\" ) %>%   mutate(     STUDYID = \"XX1234\",     ADT = ymd(ADTC),     PARAMCD = \"OVR\",     PARAM = \"Overall Response\",     ANL01FL = \"Y\"   ) %>%   select(-ADTC)  derive_param_extreme_event(   adrs,   dataset_adsl = adsl,   dataset_source = adrs,   filter_source = PARAMCD == \"OVR\" & AVALC == \"PD\",   order = exprs(ADT),   new_var = AVALC,   true_value = \"Y\",   false_value = \"N\",   mode = \"first\",   set_values_to = exprs(     PARAMCD = \"PD\",     PARAM = \"Disease Progression\",     ANL01FL = \"Y\",     ADT = ADT   ) ) #> # A tibble: 10 x 7 #>    USUBJID AVALC STUDYID ADT        PARAMCD PARAM               ANL01FL #>    <chr>   <chr> <chr>   <date>     <chr>   <chr>               <chr>   #>  1 1       PR    XX1234  2020-01-02 OVR     Overall Response    Y       #>  2 1       CR    XX1234  2020-02-01 OVR     Overall Response    Y       #>  3 1       CR    XX1234  2020-03-01 OVR     Overall Response    Y       #>  4 1       SD    XX1234  2020-04-01 OVR     Overall Response    Y       #>  5 2       SD    XX1234  2021-06-15 OVR     Overall Response    Y       #>  6 2       PD    XX1234  2021-07-16 OVR     Overall Response    Y       #>  7 2       PD    XX1234  2021-09-14 OVR     Overall Response    Y       #>  8 2       Y     XX1234  2021-07-16 PD      Disease Progression Y       #>  9 1       N     XX1234  NA         PD      Disease Progression Y       #> 10 3       N     XX1234  NA         PD      Disease Progression Y        # derive parameter indicating death derive_param_extreme_event(   dataset_adsl = adsl,   dataset_source = adsl,   filter_source = !is.na(DTHDT),   new_var = AVALC,   true_value = \"Y\",   false_value = \"N\",   mode = \"first\",   set_values_to = exprs(     PARAMCD = \"DEATH\",     PARAM = \"Death\",     ANL01FL = \"Y\",     ADT = DTHDT   ) ) #> # A tibble: 3 x 8 #>   USUBJID DTHDT      STUDYID AVALC PARAMCD PARAM ANL01FL ADT        #>   <chr>   <date>     <chr>   <chr> <chr>   <chr> <chr>   <date>     #> 1 1       2022-05-13 XX1234  Y     DEATH   Death Y       2022-05-13 #> 2 2       NA         XX1234  N     DEATH   Death Y       NA         #> 3 3       NA         XX1234  N     DEATH   Death Y       NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_first_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a First Event Parameter — derive_param_first_event","title":"Add a First Event Parameter — derive_param_first_event","text":"function deprecated, please use derive_param_extreme_event() instead order argument instead date_var argument.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_first_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a First Event Parameter — derive_param_first_event","text":"","code":"derive_param_first_event(   dataset,   dataset_adsl,   dataset_source,   filter_source,   date_var,   subject_keys = exprs(STUDYID, USUBJID),   set_values_to,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_first_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a First Event Parameter — derive_param_first_event","text":"dataset Input dataset PARAMCD variable expected. dataset_adsl ADSL input dataset variables specified subject_keys expected. observation specified dataset new observation added input dataset. dataset_source Source dataset observations specified dataset fulfilling condition specified filter_source considered event. variables specified subject_keys date_var parameter expected. filter_source Source filter observations dataset_source fulfilling specified condition considered event. subjects least one event AVALC set \"Y\", AVAL 1, ADT first date condition fulfilled. subjects AVALC set \"N\", AVAL 0, ADT NA. date_var Date variable Date variable source dataset (dataset_source). variable used sort source dataset. ADT set specified variable events. subject_keys Variables uniquely identify subject list symbols created using exprs() expected. set_values_to Variables set named list returned exprs() defining variables set new parameter, e.g. exprs(PARAMCD = \"PD\", PARAM = \"Disease Progression\") expected. values must symbols, character strings, numeric values, NA. check_type Check uniqueness? \"warning\" \"error\" specified, message issued observations input dataset restricted source parameter (source_param) unique respect subject keys (subject_key parameter) ADT. Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_first_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a First Event Parameter — derive_param_first_event","text":"input dataset new parameter indicating event occurred","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_first_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a First Event Parameter — derive_param_first_event","text":"input dataset restricted observations fulfilling filter_source. subject (respect variables specified subject_keys parameter) first observation (respect date_var) event condition (filter_source parameter) fulfilled selected. observation dataset_adsl new observation created. subjects event AVALC set \"Y\", AVAL 1, ADT first date event condition fulfilled. subjects AVALC set \"N\", AVAL 0, ADT NA. subjects event variables dataset_source kept. subjects without event variables dataset_adsl dataset_source kept. variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"Adds record framingham score (FCVD101) group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"","code":"derive_param_framingham(   dataset,   by_vars,   set_values_to = exprs(PARAMCD = \"FCVD101\"),   sysbp_code = \"SYSBP\",   chol_code = \"CHOL\",   cholhdl_code = \"CHOLHDL\",   age = AGE,   sex = SEX,   smokefl = SMOKEFL,   diabetfl = DIABETFL,   trthypfl = TRTHYPFL,   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified sysbp_code, chol_code hdl_code. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs sysbp_code Systolic blood pressure parameter code observations PARAMCD equals specified value considered systolic blood pressure assessments. Permitted Values: character value chol_code Total serum cholesterol code observations PARAMCD equals specified value considered total cholesterol assessments. must measured mg/dL. Permitted Values: character value cholhdl_code HDL serum cholesterol code observations PARAMCD equals specified value considered HDL cholesterol assessments. must measured mg/dL. Permitted Values: character value age Subject age variable containing subject's age. Permitted Values: numeric variable name refers subject age column input dataset sex Subject sex variable containing subject's sex. Permitted Values: character variable name refers subject sex column input dataset smokefl Smoking status flag flag indicating smoking status. Permitted Values: character variable name refers smoking status column input dataset. diabetfl Diabetic flag flag indicating diabetic status. Permitted Values: character variable name refers diabetic status column input dataset trthypfl Treated hypertension medication flag flag indicating subject treated hypertension medication. Permitted Values: character variable name refers column indicates whether subject treated high blood pressure get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"input dataset new parameter added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"values age, sex, smokefl, diabetfl trthypfl added by_vars list. predicted probability cardiovascular disease (CVD) within 10-years according Framingham formula. See AHA Journal article General Cardiovascular Risk Profile Use Primary Care reference. Women: Men: equation calculating risk: $$RiskFactors = (log(Age) * AgeFactor) + (log(TotalChol) * TotalCholFactor) + (log(CholHDL) * CholHDLFactor) \\\\ + (log(SysBP) * SysBPFactor) + Smoker + Diabetes Present - AvgRisk$$ $$Risk = 100 * (1 - RiskPeriodFactor^{RiskFactors})$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_framingham.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Framingham Heart Study Cardiovascular Disease\n10-Year Risk Score — derive_param_framingham","text":"","code":"library(tibble)  adcvrisk <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU,   ~VISIT, ~AGE, ~SEX, ~SMOKEFL, ~DIABETFL, ~TRTHYPFL,   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 121,   \"mmHg\", \"BASELINE\", 44, \"F\", \"N\", \"N\", \"N\",   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 115,   \"mmHg\", \"WEEK 2\", 44, \"F\", \"N\", \"N\", \"Y\",   \"01-701-1015\", \"CHOL\", \"Total Cholesterol (mg/dL)\", 216.16,   \"mg/dL\", \"BASELINE\", 44, \"F\", \"N\", \"N\", \"N\",   \"01-701-1015\", \"CHOL\", \"Total Cholesterol (mg/dL)\", 210.78,   \"mg/dL\", \"WEEK 2\", 44, \"F\", \"N\", \"N\", \"Y\",   \"01-701-1015\", \"CHOLHDL\", \"Cholesterol/HDL-Cholesterol (mg/dL)\", 54.91,   \"mg/dL\", \"BASELINE\", 44, \"F\", \"N\", \"N\", \"N\",   \"01-701-1015\", \"CHOLHDL\", \"Cholesterol/HDL-Cholesterol (mg/dL)\", 26.72,   \"mg/dL\", \"WEEK 2\", 44, \"F\", \"N\", \"N\", \"Y\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 119,   \"mmHg\", \"BASELINE\", 55, \"M\", \"Y\", \"Y\", \"Y\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 101,   \"mmHg\", \"WEEK 2\", 55, \"M\", \"Y\", \"Y\", \"Y\",   \"01-701-1028\", \"CHOL\", \"Total Cholesterol (mg/dL)\", 292.01,   \"mg/dL\", \"BASELINE\", 55, \"M\", \"Y\", \"Y\", \"Y\",   \"01-701-1028\", \"CHOL\", \"Total Cholesterol (mg/dL)\", 246.73,   \"mg/dL\", \"WEEK 2\", 55, \"M\", \"Y\", \"Y\", \"Y\",   \"01-701-1028\", \"CHOLHDL\", \"Cholesterol/HDL-Cholesterol (mg/dL)\", 65.55,   \"mg/dL\", \"BASELINE\", 55, \"M\", \"Y\", \"Y\", \"Y\",   \"01-701-1028\", \"CHOLHDL\", \"Cholesterol/HDL-Cholesterol (mg/dL)\", 44.62,   \"mg/dL\", \"WEEK 2\", 55, \"M\", \"Y\", \"Y\", \"Y\" )   adcvrisk %>%   derive_param_framingham(     by_vars = exprs(USUBJID, VISIT),     set_values_to = exprs(       PARAMCD = \"FCVD101\",       PARAM = \"FCVD1-Framingham CVD 10-Year Risk Score (%)\"     ),     get_unit_expr = AVALU   ) #> # A tibble: 16 x 11 #>    USUBJID  PARAMCD PARAM          AVAL AVALU VISIT   AGE SEX   SMOKEFL DIABETFL #>    <chr>    <chr>   <chr>         <dbl> <chr> <chr> <dbl> <chr> <chr>   <chr>    #>  1 01-701-… SYSBP   Systolic Bl… 121    mmHg  BASE…    44 F     N       N        #>  2 01-701-… SYSBP   Systolic Bl… 115    mmHg  WEEK…    44 F     N       N        #>  3 01-701-… CHOL    Total Chole… 216.   mg/dL BASE…    44 F     N       N        #>  4 01-701-… CHOL    Total Chole… 211.   mg/dL WEEK…    44 F     N       N        #>  5 01-701-… CHOLHDL Cholesterol…  54.9  mg/dL BASE…    44 F     N       N        #>  6 01-701-… CHOLHDL Cholesterol…  26.7  mg/dL WEEK…    44 F     N       N        #>  7 01-701-… SYSBP   Systolic Bl… 119    mmHg  BASE…    55 M     Y       Y        #>  8 01-701-… SYSBP   Systolic Bl… 101    mmHg  WEEK…    55 M     Y       Y        #>  9 01-701-… CHOL    Total Chole… 292.   mg/dL BASE…    55 M     Y       Y        #> 10 01-701-… CHOL    Total Chole… 247.   mg/dL WEEK…    55 M     Y       Y        #> 11 01-701-… CHOLHDL Cholesterol…  65.6  mg/dL BASE…    55 M     Y       Y        #> 12 01-701-… CHOLHDL Cholesterol…  44.6  mg/dL WEEK…    55 M     Y       Y        #> 13 01-701-… FCVD101 FCVD1-Frami…   3.14 NA    BASE…    44 F     N       N        #> 14 01-701-… FCVD101 FCVD1-Frami…   5.80 NA    WEEK…    44 F     N       N        #> 15 01-701-… FCVD101 FCVD1-Frami…  42.3  NA    BASE…    55 M     Y       Y        #> 16 01-701-… FCVD101 FCVD1-Frami…  37.5  NA    WEEK…    55 M     Y       Y        #> # … with 1 more variable: TRTHYPFL <chr>  derive_param_framingham(   adcvrisk,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(     PARAMCD = \"FCVD101\",     PARAM = \"FCVD1-Framingham CVD 10-Year Risk Score (%)\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 16 x 11 #>    USUBJID  PARAMCD PARAM          AVAL AVALU VISIT   AGE SEX   SMOKEFL DIABETFL #>    <chr>    <chr>   <chr>         <dbl> <chr> <chr> <dbl> <chr> <chr>   <chr>    #>  1 01-701-… SYSBP   Systolic Bl… 121    mmHg  BASE…    44 F     N       N        #>  2 01-701-… SYSBP   Systolic Bl… 115    mmHg  WEEK…    44 F     N       N        #>  3 01-701-… CHOL    Total Chole… 216.   mg/dL BASE…    44 F     N       N        #>  4 01-701-… CHOL    Total Chole… 211.   mg/dL WEEK…    44 F     N       N        #>  5 01-701-… CHOLHDL Cholesterol…  54.9  mg/dL BASE…    44 F     N       N        #>  6 01-701-… CHOLHDL Cholesterol…  26.7  mg/dL WEEK…    44 F     N       N        #>  7 01-701-… SYSBP   Systolic Bl… 119    mmHg  BASE…    55 M     Y       Y        #>  8 01-701-… SYSBP   Systolic Bl… 101    mmHg  WEEK…    55 M     Y       Y        #>  9 01-701-… CHOL    Total Chole… 292.   mg/dL BASE…    55 M     Y       Y        #> 10 01-701-… CHOL    Total Chole… 247.   mg/dL WEEK…    55 M     Y       Y        #> 11 01-701-… CHOLHDL Cholesterol…  65.6  mg/dL BASE…    55 M     Y       Y        #> 12 01-701-… CHOLHDL Cholesterol…  44.6  mg/dL WEEK…    55 M     Y       Y        #> 13 01-701-… FCVD101 FCVD1-Frami…   3.14 NA    BASE…    44 F     N       N        #> 14 01-701-… FCVD101 FCVD1-Frami…   5.80 NA    WEEK…    44 F     N       N        #> 15 01-701-… FCVD101 FCVD1-Frami…  42.3  NA    BASE…    55 M     Y       Y        #> 16 01-701-… FCVD101 FCVD1-Frami…  37.5  NA    WEEK…    55 M     Y       Y        #> # … with 1 more variable: TRTHYPFL <chr>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"Adds record mean arterial pressure (MAP) group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"","code":"derive_param_map(   dataset,   by_vars,   set_values_to = exprs(PARAMCD = \"MAP\"),   sysbp_code = \"SYSBP\",   diabp_code = \"DIABP\",   hr_code = NULL,   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified sysbp_code, diabp_code hr_code. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs sysbp_code Systolic blood pressure parameter code observations PARAMCD equals specified value considered systolic blood pressure assessments. Permitted Values: character value diabp_code Diastolic blood pressure parameter code observations PARAMCD equals specified value considered diastolic blood pressure assessments. Permitted Values: character value hr_code Heart rate parameter code observations PARAMCD equals specified value considered heart rate assessments. Permitted Values: character value get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"analysis value new parameter derived $$\\frac{2DIABP + SYSBP}{3}$$ based diastolic systolic blood pressure $$DIABP + 0.01 e^{4.14 - \\frac{40.74}{HR}} (SYSBP - DIABP)$$ based diastolic, systolic blood pressure, heart rate.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Mean Arterial Pressure — derive_param_map","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~VISIT,   \"01-701-1015\", \"PULSE\", \"Pulse (beats/min)\", 59, \"BASELINE\",   \"01-701-1015\", \"PULSE\", \"Pulse (beats/min)\", 61, \"WEEK 2\",   \"01-701-1015\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 51, \"BASELINE\",   \"01-701-1015\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 50, \"WEEK 2\",   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 121, \"BASELINE\",   \"01-701-1015\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 121, \"WEEK 2\",   \"01-701-1028\", \"PULSE\", \"Pulse (beats/min)\", 62, \"BASELINE\",   \"01-701-1028\", \"PULSE\", \"Pulse (beats/min)\", 77, \"WEEK 2\",   \"01-701-1028\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 79, \"BASELINE\",   \"01-701-1028\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 80, \"WEEK 2\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 130, \"BASELINE\",   \"01-701-1028\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 132, \"WEEK 2\" )  # Derive MAP based on diastolic and systolic blood pressure advs %>%   derive_param_map(     by_vars = exprs(USUBJID, VISIT),     set_values_to = exprs(       PARAMCD = \"MAP\",       PARAM = \"Mean Arterial Pressure (mmHg)\"     ),     get_unit_expr = extract_unit(PARAM)   ) %>%   filter(PARAMCD != \"PULSE\") #> # A tibble: 12 x 5 #>    USUBJID     PARAMCD PARAM                            AVAL VISIT    #>    <chr>       <chr>   <chr>                           <dbl> <chr>    #>  1 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  51   BASELINE #>  2 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  50   WEEK 2   #>  3 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   BASELINE #>  4 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   WEEK 2   #>  5 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  79   BASELINE #>  6 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  80   WEEK 2   #>  7 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  130   BASELINE #>  8 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  132   WEEK 2   #>  9 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    74.3 BASELINE #> 10 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    73.7 WEEK 2   #> 11 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    96   BASELINE #> 12 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    97.3 WEEK 2    # Derive MAP based on diastolic and systolic blood pressure and heart rate derive_param_map(   advs,   by_vars = exprs(USUBJID, VISIT),   hr_code = \"PULSE\",   set_values_to = exprs(     PARAMCD = \"MAP\",     PARAM = \"Mean Arterial Pressure (mmHg)\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 16 x 5 #>    USUBJID     PARAMCD PARAM                            AVAL VISIT    #>    <chr>       <chr>   <chr>                           <dbl> <chr>    #>  1 01-701-1015 PULSE   Pulse (beats/min)                59   BASELINE #>  2 01-701-1015 PULSE   Pulse (beats/min)                61   WEEK 2   #>  3 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  51   BASELINE #>  4 01-701-1015 DIABP   Diastolic Blood Pressure (mmHg)  50   WEEK 2   #>  5 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   BASELINE #>  6 01-701-1015 SYSBP   Systolic Blood Pressure (mmHg)  121   WEEK 2   #>  7 01-701-1028 PULSE   Pulse (beats/min)                62   BASELINE #>  8 01-701-1028 PULSE   Pulse (beats/min)                77   WEEK 2   #>  9 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  79   BASELINE #> 10 01-701-1028 DIABP   Diastolic Blood Pressure (mmHg)  80   WEEK 2   #> 11 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  130   BASELINE #> 12 01-701-1028 SYSBP   Systolic Blood Pressure (mmHg)  132   WEEK 2   #> 13 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    73.0 BASELINE #> 14 01-701-1015 MAP     Mean Arterial Pressure (mmHg)    72.9 WEEK 2   #> 15 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    95.6 BASELINE #> 16 01-701-1028 MAP     Mean Arterial Pressure (mmHg)    99.2 WEEK 2"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_qtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","title":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","text":"Adds record corrected QT using either Bazett's, Fridericia's Sagie's formula group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_qtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","text":"","code":"derive_param_qtc(   dataset,   by_vars,   method,   set_values_to = default_qtc_paramcd(method),   qt_code = \"QT\",   rr_code = \"RR\",   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_qtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","text":"dataset Input dataset variables specified by_vars unit_var parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified qt_code rr_code. by_vars Grouping variables variables specified by_vars populated newly created records. Permitted Values: list variables method Method used QT correction Permitted Values: \"Bazett\", \"Fridericia\", \"Sagie\" set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs qt_code QT parameter code observations PARAMCD equals specified value considered QT interval assessments. expected QT measured msec. Permitted Values: character value rr_code RR parameter code observations PARAMCD equals specified value considered RR interval assessments. expected RR measured msec. Permitted Values: character value get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_qtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_qtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Corrected QT (an ECG measurement) — derive_param_qtc","text":"","code":"library(tibble)  adeg <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-701-1015\", \"HR\", \"Heart Rate (beats/min)\", 70.14, \"beats/min\", \"BASELINE\",   \"01-701-1015\", \"QT\", \"QT Duration (msec)\", 370, \"msec\", \"WEEK 2\",   \"01-701-1015\", \"HR\", \"Heart Rate (beats/min)\", 62.66, \"beats/min\", \"WEEK 1\",   \"01-701-1015\", \"RR\", \"RR Duration (msec)\", 710, \"msec\", \"WEEK 2\",   \"01-701-1028\", \"HR\", \"Heart Rate (beats/min)\", 85.45, \"beats/min\", \"BASELINE\",   \"01-701-1028\", \"QT\", \"QT Duration (msec)\", 480, \"msec\", \"WEEK 2\",   \"01-701-1028\", \"QT\", \"QT Duration (msec)\", 350, \"msec\", \"WEEK 3\",   \"01-701-1028\", \"HR\", \"Heart Rate (beats/min)\", 56.54, \"beats/min\", \"WEEK 3\",   \"01-701-1028\", \"RR\", \"RR Duration (msec)\", 842, \"msec\", \"WEEK 2\", )  derive_param_qtc(   adeg,   by_vars = exprs(USUBJID, VISIT),   method = \"Bazett\",   set_values_to = exprs(     PARAMCD = \"QTCBR\",     PARAM = \"QTcB - Bazett's Correction Formula Rederived (msec)\",     AVALU = \"msec\"   ),   get_unit_expr = AVALU ) #> # A tibble: 11 x 6 #>    USUBJID    PARAMCD PARAM                                 AVAL AVALU   VISIT   #>    <chr>      <chr>   <chr>                                <dbl> <chr>   <chr>   #>  1 01-701-10… HR      Heart Rate (beats/min)                70.1 beats/… BASELI… #>  2 01-701-10… QT      QT Duration (msec)                   370   msec    WEEK 2  #>  3 01-701-10… HR      Heart Rate (beats/min)                62.7 beats/… WEEK 1  #>  4 01-701-10… RR      RR Duration (msec)                   710   msec    WEEK 2  #>  5 01-701-10… HR      Heart Rate (beats/min)                85.4 beats/… BASELI… #>  6 01-701-10… QT      QT Duration (msec)                   480   msec    WEEK 2  #>  7 01-701-10… QT      QT Duration (msec)                   350   msec    WEEK 3  #>  8 01-701-10… HR      Heart Rate (beats/min)                56.5 beats/… WEEK 3  #>  9 01-701-10… RR      RR Duration (msec)                   842   msec    WEEK 2  #> 10 01-701-10… QTCBR   QTcB - Bazett's Correction Formula … 439.  msec    WEEK 2  #> 11 01-701-10… QTCBR   QTcB - Bazett's Correction Formula … 523.  msec    WEEK 2   derive_param_qtc(   adeg,   by_vars = exprs(USUBJID, VISIT),   method = \"Fridericia\",   set_values_to = exprs(     PARAMCD = \"QTCFR\",     PARAM = \"QTcF - Fridericia's Correction Formula Rederived (msec)\",     AVALU = \"msec\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 11 x 6 #>    USUBJID    PARAMCD PARAM                                  AVAL AVALU   VISIT  #>    <chr>      <chr>   <chr>                                 <dbl> <chr>   <chr>  #>  1 01-701-10… HR      Heart Rate (beats/min)                 70.1 beats/… BASEL… #>  2 01-701-10… QT      QT Duration (msec)                    370   msec    WEEK 2 #>  3 01-701-10… HR      Heart Rate (beats/min)                 62.7 beats/… WEEK 1 #>  4 01-701-10… RR      RR Duration (msec)                    710   msec    WEEK 2 #>  5 01-701-10… HR      Heart Rate (beats/min)                 85.4 beats/… BASEL… #>  6 01-701-10… QT      QT Duration (msec)                    480   msec    WEEK 2 #>  7 01-701-10… QT      QT Duration (msec)                    350   msec    WEEK 3 #>  8 01-701-10… HR      Heart Rate (beats/min)                 56.5 beats/… WEEK 3 #>  9 01-701-10… RR      RR Duration (msec)                    842   msec    WEEK 2 #> 10 01-701-10… QTCFR   QTcF - Fridericia's Correction Formu… 415.  msec    WEEK 2 #> 11 01-701-10… QTCFR   QTcF - Fridericia's Correction Formu… 508.  msec    WEEK 2  derive_param_qtc(   adeg,   by_vars = exprs(USUBJID, VISIT),   method = \"Sagie\",   set_values_to = exprs(     PARAMCD = \"QTLCR\",     PARAM = \"QTlc - Sagie's Correction Formula Rederived (msec)\",     AVALU = \"msec\"   ),   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 11 x 6 #>    USUBJID    PARAMCD PARAM                                 AVAL AVALU   VISIT   #>    <chr>      <chr>   <chr>                                <dbl> <chr>   <chr>   #>  1 01-701-10… HR      Heart Rate (beats/min)                70.1 beats/… BASELI… #>  2 01-701-10… QT      QT Duration (msec)                   370   msec    WEEK 2  #>  3 01-701-10… HR      Heart Rate (beats/min)                62.7 beats/… WEEK 1  #>  4 01-701-10… RR      RR Duration (msec)                   710   msec    WEEK 2  #>  5 01-701-10… HR      Heart Rate (beats/min)                85.4 beats/… BASELI… #>  6 01-701-10… QT      QT Duration (msec)                   480   msec    WEEK 2  #>  7 01-701-10… QT      QT Duration (msec)                   350   msec    WEEK 3  #>  8 01-701-10… HR      Heart Rate (beats/min)                56.5 beats/… WEEK 3  #>  9 01-701-10… RR      RR Duration (msec)                   842   msec    WEEK 2  #> 10 01-701-10… QTLCR   QTlc - Sagie's Correction Formula R… 415.  msec    WEEK 2  #> 11 01-701-10… QTLCR   QTlc - Sagie's Correction Formula R… 504.  msec    WEEK 2"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"Adds record derived RR based heart rate group (e.g., subject visit) source parameters available.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"","code":"derive_param_rr(   dataset,   by_vars,   set_values_to = exprs(PARAMCD = \"RRR\"),   hr_code = \"HR\",   get_unit_expr,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"dataset Input dataset variables specified by_vars parameter, PARAMCD, AVAL expected. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter parameter) parameters specified hr_code. by_vars Grouping variables group defined by_vars observation added output dataset. variables specified by_vars populated newly created records. Permitted Values: list variables set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"MAP\") defines parameter code new parameter. Permitted Values: List variable-value pairs hr_code HR parameter code observations PARAMCD equals specified value considered heart rate assessments. Permitted Values: character value get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable input dataset function call filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"analysis value new parameter derived $$\\frac{60000}{HR}$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_rr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Derived RR (an ECG measurement) — derive_param_rr","text":"","code":"library(tibble)  adeg <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-701-1015\", \"HR\", \"Heart Rate\", 70.14, \"beats/min\", \"BASELINE\",   \"01-701-1015\", \"QT\", \"QT Duration\", 370, \"msec\", \"WEEK 2\",   \"01-701-1015\", \"HR\", \"Heart Rate\", 62.66, \"beats/min\", \"WEEK 1\",   \"01-701-1015\", \"RR\", \"RR Duration\", 710, \"msec\", \"WEEK 2\",   \"01-701-1028\", \"HR\", \"Heart Rate\", 85.45, \"beats/min\", \"BASELINE\",   \"01-701-1028\", \"QT\", \"QT Duration\", 480, \"msec\", \"WEEK 2\",   \"01-701-1028\", \"QT\", \"QT Duration\", 350, \"msec\", \"WEEK 3\",   \"01-701-1028\", \"HR\", \"Heart Rate\", 56.54, \"beats/min\", \"WEEK 3\",   \"01-701-1028\", \"RR\", \"RR Duration\", 842, \"msec\", \"WEEK 2\" )  derive_param_rr(   adeg,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(     PARAMCD = \"RRR\",     PARAM = \"RR Duration Rederived (msec)\",     AVALU = \"msec\"   ),   get_unit_expr = AVALU ) #> # A tibble: 13 x 6 #>    USUBJID     PARAMCD PARAM                          AVAL AVALU     VISIT    #>    <chr>       <chr>   <chr>                         <dbl> <chr>     <chr>    #>  1 01-701-1015 HR      Heart Rate                     70.1 beats/min BASELINE #>  2 01-701-1015 QT      QT Duration                   370   msec      WEEK 2   #>  3 01-701-1015 HR      Heart Rate                     62.7 beats/min WEEK 1   #>  4 01-701-1015 RR      RR Duration                   710   msec      WEEK 2   #>  5 01-701-1028 HR      Heart Rate                     85.4 beats/min BASELINE #>  6 01-701-1028 QT      QT Duration                   480   msec      WEEK 2   #>  7 01-701-1028 QT      QT Duration                   350   msec      WEEK 3   #>  8 01-701-1028 HR      Heart Rate                     56.5 beats/min WEEK 3   #>  9 01-701-1028 RR      RR Duration                   842   msec      WEEK 2   #> 10 01-701-1015 RRR     RR Duration Rederived (msec)  855.  msec      BASELINE #> 11 01-701-1015 RRR     RR Duration Rederived (msec)  958.  msec      WEEK 1   #> 12 01-701-1028 RRR     RR Duration Rederived (msec)  702.  msec      BASELINE #> 13 01-701-1028 RRR     RR Duration Rederived (msec) 1061.  msec      WEEK 3"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive a Time-to-Event Parameter — derive_param_tte","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"Add time--event parameter input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"","code":"derive_param_tte(   dataset = NULL,   dataset_adsl,   source_datasets,   by_vars = NULL,   start_date = TRTSDT,   event_conditions,   censor_conditions,   create_datetime = FALSE,   set_values_to,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"dataset Input dataset PARAMCD variable expected. dataset_adsl ADSL input dataset variables specified start_date, start_imputation_flag, subject_keys expected. source_datasets Source datasets named list datasets expected. dataset_name field tte_source() refers dataset provided list. by_vars variables parameter specified, separate time event parameters derived group. variables must least one source datasets. source dataset must contain either variables none variables. variables included output dataset. start_date Time event origin date variable STARTDT set specified date. value taken ADSL dataset. event censoring date origin date, ADT set origin date. specified variable imputed, corresponding date imputation flag must specified start_imputation_flag. event_conditions Sources conditions defining events list event_source() objects expected. censor_conditions Sources conditions defining censorings list censor_source() objects expected. create_datetime Create datetime variables? set TRUE, variables ADTM STARTDTM created. Otherwise, variables ADT STARTDT created. set_values_to Variables set named list returned exprs() defining variables set new parameter, e.g. exprs(PARAMCD = \"OS\", PARAM = \"Overall Survival\") expected. values must symbols, character strings, numeric values, expressions, NA. subject_keys Variables uniquely identify subject list symbols created using exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"input dataset new parameter added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"following steps performed create observations new parameter: Deriving events: event source dataset observations specified filter element selected. patient first observation (respect date) selected. ADT variable set variable specified date element. date variable datetime variable, datepart copied. CNSR variable added set censor element. variables specified set_values_to element added. selected observations event source datasets combined single dataset. patient first observation (respect ADT variable) single dataset selected. Deriving censoring observations: censoring source dataset observations specified filter element selected. patient last observation (respect date) selected. ADT variable set variable specified date element. date variable datetime variable, datepart copied. CNSR variable added set censor element. variables specified set_values_to element added. selected observations censoring source datasets combined single dataset. patient last observation (respect ADT variable) single dataset selected. subject (defined subject_keys parameter) observation selected. event available, event observation selected. Otherwise censoring observation selected. Finally: variables specified start_date start_imputation_flag joined ADSL dataset. subjects datasets kept, .e., subjects event censoring observation dataset_adsl. variables defined set_values_to parameter added. ADT/ADTM variable set maximum ADT/ADTM STARTDT/STARTDTM (depending create_datetime parameter). new observations added output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_tte.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive a Time-to-Event Parameter — derive_param_tte","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate) data(\"admiral_adsl\")  adsl <- admiral_adsl  # derive overall survival parameter death <- event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT,   set_values_to = exprs(     EVNTDESC = \"DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) )  last_alive_dt <- censor_source(   dataset_name = \"adsl\",   date = LSTALVDT,   set_values_to = exprs(     EVNTDESC = \"LAST DATE KNOWN ALIVE\",     SRCDOM = \"ADSL\",     SRCVAR = \"LSTALVDT\"   ) )  derive_param_tte(   dataset_adsl = adsl,   event_conditions = list(death),   censor_conditions = list(last_alive_dt),   source_datasets = list(adsl = adsl),   set_values_to = exprs(     PARAMCD = \"OS\",     PARAM = \"Overall Survival\"   ) ) %>%   select(-STUDYID) %>%   filter(row_number() %in% 20:30) #> # A tibble: 11 x 9 #>    USUBJID  EVNTDESC    SRCDOM SRCVAR  CNSR ADT        STARTDT    PARAMCD PARAM  #>    <chr>    <chr>       <chr>  <chr>  <int> <date>     <date>     <chr>   <chr>  #>  1 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-08-03 2013-02-02 OS      Overa… #>  2 01-701-… DEATH       ADSL   DTHDT      0 2013-01-14 2012-11-15 OS      Overa… #>  3 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-09-22 2013-03-30 OS      Overa… #>  4 01-701-… LAST DATE … ADSL   LSTAL…     1 2014-07-11 2014-01-11 OS      Overa… #>  5 01-701-… LAST DATE … ADSL   LSTAL…     1 2014-06-14 2014-02-07 OS      Overa… #>  6 01-701-… LAST DATE … ADSL   LSTAL…     1 2014-07-26 2014-01-25 OS      Overa… #>  7 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-06-14 2013-03-24 OS      Overa… #>  8 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-11-05 2013-08-29 OS      Overa… #>  9 01-701-… LAST DATE … ADSL   LSTAL…     1 2014-11-20 2014-05-22 OS      Overa… #> 10 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-04-02 2012-10-02 OS      Overa… #> 11 01-701-… LAST DATE … ADSL   LSTAL…     1 2013-02-07 2013-01-05 OS      Overa…  # derive duration of response # only observations for subjects in dataset_adsl are created adsl <- tribble(   ~USUBJID, ~DTHFL, ~DTHDT,            ~RSPDT,   \"01\",     \"Y\",    ymd(\"2021-06-12\"), ymd(\"2021-03-04\"),   \"02\",     \"N\",    NA,                NA,   \"03\",     \"Y\",    ymd(\"2021-08-21\"), NA,   \"04\",     \"N\",    NA,                ymd(\"2021-04-14\") ) %>%   mutate(STUDYID = \"AB42\")  adrs <- tribble(   ~USUBJID, ~AVALC, ~ADT,              ~ASEQ,   \"01\",     \"SD\",   ymd(\"2021-01-03\"), 1,   \"01\",     \"PR\",   ymd(\"2021-03-04\"), 2,   \"01\",     \"PD\",   ymd(\"2021-05-05\"), 3,   \"02\",     \"PD\",   ymd(\"2021-02-03\"), 1,   \"04\",     \"SD\",   ymd(\"2021-02-13\"), 1,   \"04\",     \"PR\",   ymd(\"2021-04-14\"), 2,   \"04\",     \"CR\",   ymd(\"2021-05-15\"), 3 ) %>%   mutate(STUDYID = \"AB42\", PARAMCD = \"OVR\")  pd <- event_source(   dataset_name = \"adrs\",   filter = AVALC == \"PD\",   date = ADT,   set_values_to = exprs(     EVENTDESC = \"PD\",     SRCDOM = \"ADRS\",     SRCVAR = \"ADTM\",     SRCSEQ = ASEQ   ) )  death <- event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT,   set_values_to = exprs(     EVENTDESC = \"DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) )  lastvisit <- censor_source(   dataset_name = \"adrs\",   date = ADT,   censor = 1,   set_values_to = exprs(     EVENTDESC = \"LAST TUMOR ASSESSMENT\",     SRCDOM = \"ADRS\",     SRCVAR = \"ADTM\",     SRCSEQ = ASEQ   ) )  first_response <- censor_source(   dataset_name = \"adsl\",   date = RSPDT,   censor = 1,   set_values_to = exprs(     EVENTDESC = \"FIRST RESPONSE\",     SRCDOM = \"ADSL\",     SRCVAR = \"RSPDT\"   ) )  derive_param_tte(   dataset_adsl = filter(adsl, !is.na(RSPDT)),   start_date = RSPDT,   event_conditions = list(pd, death),   censor_conditions = list(lastvisit, first_response),   source_datasets = list(adsl = adsl, adrs = adrs),   set_values_to = exprs(     PARAMCD = \"DURRSP\",     PARAM = \"Duration of Response\"   ) ) #> # A tibble: 2 x 11 #>   STUDYID USUBJID EVENTDESC     SRCDOM SRCVAR SRCSEQ  CNSR ADT        STARTDT    #>   <chr>   <chr>   <chr>         <chr>  <chr>   <dbl> <int> <date>     <date>     #> 1 AB42    01      PD            ADRS   ADTM        3     0 2021-05-05 2021-03-04 #> 2 AB42    04      LAST TUMOR A… ADRS   ADTM        3     1 2021-05-15 2021-04-14 #> # … with 2 more variables: PARAMCD <chr>, PARAM <chr>  # derive time to adverse event for each preferred term adsl <- tribble(   ~USUBJID, ~TRTSDT,           ~EOSDT,   \"01\",     ymd(\"2020-12-06\"), ymd(\"2021-03-06\"),   \"02\",     ymd(\"2021-01-16\"), ymd(\"2021-02-03\") ) %>%   mutate(STUDYID = \"AB42\")  ae <- tribble(   ~USUBJID, ~AESTDTC,           ~AESEQ, ~AEDECOD,   \"01\",     \"2021-01-03T10:56\", 1,      \"Flu\",   \"01\",     \"2021-03-04\",       2,      \"Cough\",   \"01\",     \"2021\",             3,      \"Flu\" ) %>%   mutate(STUDYID = \"AB42\")  ae_ext <- derive_vars_dt(   ae,   dtc = AESTDTC,   new_vars_prefix = \"AEST\",   highest_imputation = \"M\",   flag_imputation = \"none\" )  ttae <- event_source(   dataset_name = \"ae\",   date = AESTDT,   set_values_to = exprs(     EVNTDESC = \"AE\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\",     SRCSEQ = AESEQ   ) )  eos <- censor_source(   dataset_name = \"adsl\",   date = EOSDT,   set_values_to = exprs(     EVNTDESC = \"END OF STUDY\",     SRCDOM = \"ADSL\",     SRCVAR = \"EOSDT\"   ) )  derive_param_tte(   dataset_adsl = adsl,   by_vars = exprs(AEDECOD),   start_date = TRTSDT,   event_conditions = list(ttae),   censor_conditions = list(eos),   source_datasets = list(adsl = adsl, ae = ae_ext),   set_values_to = exprs(     PARAMCD = paste0(\"TTAE\", as.numeric(as.factor(AEDECOD))),     PARAM = paste(\"Time to First\", AEDECOD, \"Adverse Event\"),     PARCAT1 = \"TTAE\",     PARCAT2 = AEDECOD   ) ) %>%   select(USUBJID, STARTDT, PARAMCD, PARAM, ADT, CNSR, SRCSEQ) #> # A tibble: 4 x 7 #>   USUBJID STARTDT    PARAMCD PARAM                       ADT         CNSR SRCSEQ #>   <chr>   <date>     <chr>   <chr>                       <date>     <int>  <dbl> #> 1 01      2020-12-06 TTAE1   Time to First Cough Advers… 2021-03-04     0      2 #> 2 01      2020-12-06 TTAE2   Time to First Flu Adverse … 2021-01-01     0      3 #> 3 02      2021-01-16 TTAE1   Time to First Cough Advers… 2021-02-03     1     NA #> 4 02      2021-01-16 TTAE2   Time to First Flu Adverse … 2021-02-03     1     NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"Add parameter converting lab differentials fraction percentage absolute values","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"","code":"derive_param_wbc_abs(   dataset,   by_vars,   set_values_to,   get_unit_expr,   wbc_unit = \"10^9/L\",   wbc_code = \"WBC\",   diff_code,   diff_type = \"fraction\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"dataset Input dataset variables specified by_vars argument, PARAMCD, AVAL expected present. variable specified by_vars PARAMCD must unique key input dataset, parameters specified wbc_code diff_code. by_vars Grouping variables Permitted Values: list variables set_values_to Variables set named list returned exprs() defining variables set new parameter, e.g. exprs(PARAMCD = \"LYMPH\", PARAM = \"Lymphocytes Abs (10^9/L)\") expected. get_unit_expr expression providing unit parameter result used check units input parameters. Permitted Values: variable containing unit input dataset, function call, example, get_unit_expr = extract_unit(PARAM). wbc_unit string containing required unit WBC parameter Default: \"10^9/L\" wbc_code White Blood Cell (WBC) parameter observations PARAMCD equals specified value considered WBC absolute results use converting differentials. Default: \"WBC\" Permitted Values: character value diff_code white blood differential parameter observations PARAMCD equals specified value considered white blood differential lab results fraction percentage value converted absolute value. diff_type string specifying type differential Permitted Values: \"percent\", \"fraction\" Default: fraction","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"input dataset new parameter added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"diff_type \"percent\", analysis value new parameter derived $$\\frac{White Blood Cell Count  * Percentage Value}{100}$$ diff_type \"fraction\", analysis value new parameter derived $$White Blood Cell Count  * Fraction Value$$ New records created group records (grouped by_vars) 1) white blood cell component absolute value already available input dataset, 2) white blood cell absolute value (identified wbc_code) white blood cell differential (identified diff_code) present.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_param_wbc_abs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a parameter for lab differentials converted to absolute values — derive_param_wbc_abs","text":"","code":"library(tibble)  test_lb <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~PARAM, ~VISIT,   \"P01\", \"WBC\", 33, \"Leukocyte Count (10^9/L)\", \"CYCLE 1 DAY 1\",   \"P01\", \"WBC\", 38, \"Leukocyte Count (10^9/L)\", \"CYCLE 2 DAY 1\",   \"P01\", \"LYMLE\", 0.90, \"Lymphocytes (fraction of 1)\", \"CYCLE 1 DAY 1\",   \"P01\", \"LYMLE\", 0.70, \"Lymphocytes (fraction of 1)\", \"CYCLE 2 DAY 1\",   \"P01\", \"ALB\", 36, \"Albumin (g/dL)\", \"CYCLE 2 DAY 1\",   \"P02\", \"WBC\", 33, \"Leukocyte Count (10^9/L)\", \"CYCLE 1 DAY 1\",   \"P02\", \"LYMPH\", 29, \"Lymphocytes Abs (10^9/L)\", \"CYCLE 1 DAY 1\",   \"P02\", \"LYMLE\", 0.87, \"Lymphocytes (fraction of 1)\", \"CYCLE 1 DAY 1\",   \"P03\", \"LYMLE\", 0.89, \"Lymphocytes (fraction of 1)\", \"CYCLE 1 DAY 1\" )  derive_param_wbc_abs(   dataset = test_lb,   by_vars = exprs(USUBJID, VISIT),   set_values_to = exprs(     PARAMCD = \"LYMPH\",     PARAM = \"Lymphocytes Abs (10^9/L)\",     DTYPE = \"CALCULATION\"   ),   get_unit_expr = extract_unit(PARAM),   wbc_code = \"WBC\",   diff_code = \"LYMLE\",   diff_type = \"fraction\" ) #> # A tibble: 11 x 6 #>    USUBJID PARAMCD  AVAL PARAM                       VISIT         DTYPE       #>    <chr>   <chr>   <dbl> <chr>                       <chr>         <chr>       #>  1 P01     WBC     33    Leukocyte Count (10^9/L)    CYCLE 1 DAY 1 NA          #>  2 P01     WBC     38    Leukocyte Count (10^9/L)    CYCLE 2 DAY 1 NA          #>  3 P01     LYMLE    0.9  Lymphocytes (fraction of 1) CYCLE 1 DAY 1 NA          #>  4 P01     LYMLE    0.7  Lymphocytes (fraction of 1) CYCLE 2 DAY 1 NA          #>  5 P01     ALB     36    Albumin (g/dL)              CYCLE 2 DAY 1 NA          #>  6 P02     WBC     33    Leukocyte Count (10^9/L)    CYCLE 1 DAY 1 NA          #>  7 P02     LYMPH   29    Lymphocytes Abs (10^9/L)    CYCLE 1 DAY 1 NA          #>  8 P02     LYMLE    0.87 Lymphocytes (fraction of 1) CYCLE 1 DAY 1 NA          #>  9 P03     LYMLE    0.89 Lymphocytes (fraction of 1) CYCLE 1 DAY 1 NA          #> 10 P01     LYMPH   29.7  Lymphocytes Abs (10^9/L)    CYCLE 1 DAY 1 CALCULATION #> 11 P01     LYMPH   26.6  Lymphocytes Abs (10^9/L)    CYCLE 2 DAY 1 CALCULATION"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"uncommon analysis need whereby one needs derive analysis value (AVAL) multiple records. ADaM basic dataset structure variable DTYPE available indicate new derived records added dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"","code":"derive_summary_records(   dataset,   by_vars,   filter = NULL,   analysis_var,   summary_fun,   set_values_to = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"dataset data frame. by_vars Variables consider generation groupwise summary records. Providing names variables exprs() create groupwise summary generate summary records specified groups. filter Filter condition logical expression apply summary calculation. default, filtering expressions computed within by_vars help aggregating, lagging, ranking function involved. example, filter = (AVAL > mean(AVAL, na.rm = TRUE)) filter AVAL values greater mean AVAL by_vars. filter = (dplyr::n() > 2) filter n count by_vars greater 2. analysis_var Analysis variable. summary_fun Function takes input analysis_var performs calculation. can include built-functions well user defined functions, example mean function(x) mean(x, na.rm = TRUE). set_values_to Variables set specified variables set specified values new observations. list variable name-value pairs expected. LHS refers variable. RHS refers values set variable. can string, symbol, numeric value NA, e.g., exprs(PARAMCD = \"TDOSE\", PARCAT1 =   \"OVERALL\"). general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"data frame derived records appended original dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"records values within by_vars function retain common values newly derived records. Otherwise new value set NA.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_summary_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add New Records Within By Groups Using Aggregation Functions — derive_summary_records","text":"","code":"library(tibble) library(dplyr, warn.conflicts = TRUE)  adeg <- tribble(   ~USUBJID, ~EGSEQ, ~PARAM, ~AVISIT, ~EGDTC, ~AVAL, ~TRTA,   \"XYZ-1001\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:50\", 385, \"\",   \"XYZ-1001\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:52\", 399, \"\",   \"XYZ-1001\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:56\", 396, \"\",   \"XYZ-1001\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:45\", 384, \"Placebo\",   \"XYZ-1001\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:48\", 393, \"Placebo\",   \"XYZ-1001\", 6, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:51\", 388, \"Placebo\",   \"XYZ-1001\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:45\", 385, \"Placebo\",   \"XYZ-1001\", 8, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:48\", 394, \"Placebo\",   \"XYZ-1001\", 9, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:51\", 402, \"Placebo\",   \"XYZ-1002\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 399, \"\",   \"XYZ-1002\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 410, \"\",   \"XYZ-1002\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T08:01\", 392, \"\",   \"XYZ-1002\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:50\", 401, \"Active 20mg\",   \"XYZ-1002\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:53\", 407, \"Active 20mg\",   \"XYZ-1002\", 6, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:56\", 400, \"Active 20mg\",   \"XYZ-1002\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:50\", 412, \"Active 20mg\",   \"XYZ-1002\", 8, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:53\", 414, \"Active 20mg\",   \"XYZ-1002\", 9, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:56\", 402, \"Active 20mg\", )  # Summarize the average of the triplicate ECG interval values (AVAL) derive_summary_records(   adeg,   by_vars = exprs(USUBJID, PARAM, AVISIT),   analysis_var = AVAL,   summary_fun = function(x) mean(x, na.rm = TRUE),   set_values_to = exprs(DTYPE = \"AVERAGE\") ) #> # A tibble: 24 x 8 #>    USUBJID  EGSEQ PARAM            AVISIT   EGDTC            AVAL TRTA     DTYPE #>    <chr>    <dbl> <chr>            <chr>    <chr>           <dbl> <chr>    <chr> #>  1 XYZ-1001     1 QTcF Int. (msec) Baseline 2016-02-24T07:…   385 \"\"       NA    #>  2 XYZ-1001     2 QTcF Int. (msec) Baseline 2016-02-24T07:…   399 \"\"       NA    #>  3 XYZ-1001     3 QTcF Int. (msec) Baseline 2016-02-24T07:…   396 \"\"       NA    #>  4 XYZ-1001     4 QTcF Int. (msec) Visit 2  2016-03-08T09:…   384 \"Placeb… NA    #>  5 XYZ-1001     5 QTcF Int. (msec) Visit 2  2016-03-08T09:…   393 \"Placeb… NA    #>  6 XYZ-1001     6 QTcF Int. (msec) Visit 2  2016-03-08T09:…   388 \"Placeb… NA    #>  7 XYZ-1001     7 QTcF Int. (msec) Visit 3  2016-03-22T10:…   385 \"Placeb… NA    #>  8 XYZ-1001     8 QTcF Int. (msec) Visit 3  2016-03-22T10:…   394 \"Placeb… NA    #>  9 XYZ-1001     9 QTcF Int. (msec) Visit 3  2016-03-22T10:…   402 \"Placeb… NA    #> 10 XYZ-1002     1 QTcF Int. (msec) Baseline 2016-02-22T07:…   399 \"\"       NA    #> # … with 14 more rows  advs <- tribble(   ~USUBJID, ~VSSEQ, ~PARAM, ~AVAL, ~VSSTRESU, ~VISIT, ~VSDTC,   \"XYZ-001-001\", 1164, \"Weight\", 99, \"kg\", \"Screening\", \"2018-03-19\",   \"XYZ-001-001\", 1165, \"Weight\", 101, \"kg\", \"Run-In\", \"2018-03-26\",   \"XYZ-001-001\", 1166, \"Weight\", 100, \"kg\", \"Baseline\", \"2018-04-16\",   \"XYZ-001-001\", 1167, \"Weight\", 94, \"kg\", \"Week 24\", \"2018-09-30\",   \"XYZ-001-001\", 1168, \"Weight\", 92, \"kg\", \"Week 48\", \"2019-03-17\",   \"XYZ-001-001\", 1169, \"Weight\", 95, \"kg\", \"Week 52\", \"2019-04-14\", )  # Set new values to any variable. Here, `DTYPE = MAXIMUM` refers to `max()` records # and `DTYPE = AVERAGE` refers to `mean()` records. derive_summary_records(   advs,   by_vars = exprs(USUBJID, PARAM),   analysis_var = AVAL,   summary_fun = max,   set_values_to = exprs(DTYPE = \"MAXIMUM\") ) %>%   derive_summary_records(     by_vars = exprs(USUBJID, PARAM),     analysis_var = AVAL,     summary_fun = mean,     set_values_to = exprs(DTYPE = \"AVERAGE\")   ) #> # A tibble: 8 x 8 #>   USUBJID     VSSEQ PARAM   AVAL VSSTRESU VISIT     VSDTC      DTYPE   #>   <chr>       <dbl> <chr>  <dbl> <chr>    <chr>     <chr>      <chr>   #> 1 XYZ-001-001  1164 Weight  99   kg       Screening 2018-03-19 NA      #> 2 XYZ-001-001  1165 Weight 101   kg       Run-In    2018-03-26 NA      #> 3 XYZ-001-001  1166 Weight 100   kg       Baseline  2018-04-16 NA      #> 4 XYZ-001-001  1167 Weight  94   kg       Week 24   2018-09-30 NA      #> 5 XYZ-001-001  1168 Weight  92   kg       Week 48   2019-03-17 NA      #> 6 XYZ-001-001  1169 Weight  95   kg       Week 52   2019-04-14 NA      #> 7 XYZ-001-001    NA Weight 101   NA       NA        NA         MAXIMUM #> 8 XYZ-001-001    NA Weight  97.4 NA       NA        NA         AVERAGE  # Sample ADEG dataset with triplicate record for only AVISIT = 'Baseline' adeg <- tribble(   ~USUBJID, ~EGSEQ, ~PARAM, ~AVISIT, ~EGDTC, ~AVAL, ~TRTA,   \"XYZ-1001\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:50\", 385, \"\",   \"XYZ-1001\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:52\", 399, \"\",   \"XYZ-1001\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:56\", 396, \"\",   \"XYZ-1001\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:48\", 393, \"Placebo\",   \"XYZ-1001\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:51\", 388, \"Placebo\",   \"XYZ-1001\", 6, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:48\", 394, \"Placebo\",   \"XYZ-1001\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:51\", 402, \"Placebo\",   \"XYZ-1002\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 399, \"\",   \"XYZ-1002\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 410, \"\",   \"XYZ-1002\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T08:01\", 392, \"\",   \"XYZ-1002\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:53\", 407, \"Active 20mg\",   \"XYZ-1002\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:56\", 400, \"Active 20mg\",   \"XYZ-1002\", 6, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:53\", 414, \"Active 20mg\",   \"XYZ-1002\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:56\", 402, \"Active 20mg\", )  # Compute the average of AVAL only if there are more than 2 records within the # by group derive_summary_records(   adeg,   by_vars = exprs(USUBJID, PARAM, AVISIT),   filter = n() > 2,   analysis_var = AVAL,   summary_fun = function(x) mean(x, na.rm = TRUE),   set_values_to = exprs(DTYPE = \"AVERAGE\") ) #> # A tibble: 16 x 8 #>    USUBJID  EGSEQ PARAM          AVISIT   EGDTC          AVAL TRTA        DTYPE  #>    <chr>    <dbl> <chr>          <chr>    <chr>         <dbl> <chr>       <chr>  #>  1 XYZ-1001     1 QTcF Int. (ms… Baseline 2016-02-24T0…  385  \"\"          NA     #>  2 XYZ-1001     2 QTcF Int. (ms… Baseline 2016-02-24T0…  399  \"\"          NA     #>  3 XYZ-1001     3 QTcF Int. (ms… Baseline 2016-02-24T0…  396  \"\"          NA     #>  4 XYZ-1001     4 QTcF Int. (ms… Visit 2  2016-03-08T0…  393  \"Placebo\"   NA     #>  5 XYZ-1001     5 QTcF Int. (ms… Visit 2  2016-03-08T0…  388  \"Placebo\"   NA     #>  6 XYZ-1001     6 QTcF Int. (ms… Visit 3  2016-03-22T1…  394  \"Placebo\"   NA     #>  7 XYZ-1001     7 QTcF Int. (ms… Visit 3  2016-03-22T1…  402  \"Placebo\"   NA     #>  8 XYZ-1002     1 QTcF Int. (ms… Baseline 2016-02-22T0…  399  \"\"          NA     #>  9 XYZ-1002     2 QTcF Int. (ms… Baseline 2016-02-22T0…  410  \"\"          NA     #> 10 XYZ-1002     3 QTcF Int. (ms… Baseline 2016-02-22T0…  392  \"\"          NA     #> 11 XYZ-1002     4 QTcF Int. (ms… Visit 2  2016-03-06T0…  407  \"Active 20… NA     #> 12 XYZ-1002     5 QTcF Int. (ms… Visit 2  2016-03-06T0…  400  \"Active 20… NA     #> 13 XYZ-1002     6 QTcF Int. (ms… Visit 3  2016-03-24T1…  414  \"Active 20… NA     #> 14 XYZ-1002     7 QTcF Int. (ms… Visit 3  2016-03-24T1…  402  \"Active 20… NA     #> 15 XYZ-1001    NA QTcF Int. (ms… Baseline NA             393.  NA         AVERA… #> 16 XYZ-1002    NA QTcF Int. (ms… Baseline NA             400.  NA         AVERA…"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Age in Years — derive_var_age_years","title":"Derive Age in Years — derive_var_age_years","text":"Converts given age variable (age_var) unit 'years' current units given age_var+U variable age_unit argument stores new variable (new_var).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Age in Years — derive_var_age_years","text":"","code":"derive_var_age_years(dataset, age_var, age_unit = NULL, new_var)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Age in Years — derive_var_age_years","text":"dataset Input dataset. column specified age_var argument expected. age_var Age variable. numeric object expected. age_unit Age unit. age_unit argument expected variable age_var+U dataset. gives unit age_var variable used convert AGE 'years' grouping can occur. Default: NULL Permitted Values: 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds' new_var New age variable created years. returned values doubles integers. '","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Age in Years — derive_var_age_years","text":"input dataset (dataset) new_var variable added years.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Age in Years — derive_var_age_years","text":"function used convert age variable unit 'years' can used create age groups. resulting column contains equivalent years double. Note, underlying computations assume equal number days year (365.25).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Age in Years — derive_var_age_years","text":"Michael Thorpe","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_age_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Age in Years — derive_var_age_years","text":"","code":"library(tibble)  # Derive age with age units specified data <- tribble(   ~AGE, ~AGEU,   27, \"days\",   24, \"months\",   3, \"years\",   4, \"weeks\",   1, \"years\" )  derive_var_age_years(data, AGE, new_var = AAGE) #> # A tibble: 5 x 3 #>     AGE AGEU     AAGE #>   <dbl> <chr>   <dbl> #> 1    27 days   0.0739 #> 2    24 months 2      #> 3     3 years  3      #> 4     4 weeks  0.0767 #> 5     1 years  1       # Derive age without age units variable specified data <- tribble(   ~AGE,   12,   24,   36,   48 ) derive_var_age_years(data, AGE, age_unit = \"months\", new_var = AAGE) #> # A tibble: 4 x 2 #>     AGE  AAGE #>   <dbl> <dbl> #> 1    12     1 #> 2    24     2 #> 3    36     3 #> 4    48     4"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_agegr_fda.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Age Groups — derive_var_agegr_fda","title":"Derive Age Groups — derive_var_agegr_fda","text":"function deprecated, please create user defined function instead.  function deprecated, please create user defined function instead.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_agegr_fda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Age Groups — derive_var_agegr_fda","text":"","code":"derive_var_agegr_fda(dataset, age_var, age_unit = NULL, new_var)  derive_var_agegr_ema(dataset, age_var, age_unit = NULL, new_var)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_agegr_fda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Age Groups — derive_var_agegr_fda","text":"dataset Input dataset age_var AGE variable age_unit AGE unit variable new_var New variable create inside dataset","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Ratio Variable — derive_var_analysis_ratio","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"Derives ratio variable BDS dataset based user specified variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"","code":"derive_var_analysis_ratio(dataset, numer_var, denom_var, new_var = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"dataset Input dataset numer_var Variable containing numeric values used numerator ratio calculation. denom_var Variable containing numeric values used denominator ratio calculation. new_var user-defined variable appended dataset. default behavior take denominator variable prefix R2 append dataset. Using argument override default behavior. Default NULL.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"input dataset ratio variable appended","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"user wishing calculate Ratio Baseline, AVAL / BASE returned new variable R2BASE appended input dataset. Ratio Analysis Range Lower Limit AVAL / ANRLO return new variable R2ANRLO, Ratio Analysis Range  Upper Limit AVAL / ANRHI return new variable R2ANRLO. Please note denominator variable prefix R2----. user can override default returned variables using new_var argument. Also, values 0 denominator return NA derivation. Reference CDISC ADaM Implementation Guide Version 1.1 Section 3.3.4 Analysis Parameter Variables BDS Datasets","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_analysis_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Ratio Variable — derive_var_analysis_ratio","text":"","code":"library(tibble)  data <- tribble(   ~USUBJID, ~PARAMCD, ~SEQ, ~AVAL, ~BASE, ~ANRLO, ~ANRHI,   \"P01\", \"ALT\", 1, 27, 27, 6, 34,   \"P01\", \"ALT\", 2, 41, 27, 6, 34,   \"P01\", \"ALT\", 3, 17, 27, 6, 34,   \"P02\", \"ALB\", 1, 38, 38, 33, 49,   \"P02\", \"ALB\", 2, 39, 38, 33, 49,   \"P02\", \"ALB\", 3, 37, 38, 33, 49 )  # Returns \"R2\" prefixed variables data %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = BASE) %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = ANRLO) %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = ANRHI) #> # A tibble: 6 x 10 #>   USUBJID PARAMCD   SEQ  AVAL  BASE ANRLO ANRHI R2BASE R2ANRLO R2ANRHI #>   <chr>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl>   <dbl> #> 1 P01     ALT         1    27    27     6    34  1        4.5    0.794 #> 2 P01     ALT         2    41    27     6    34  1.52     6.83   1.21  #> 3 P01     ALT         3    17    27     6    34  0.630    2.83   0.5   #> 4 P02     ALB         1    38    38    33    49  1        1.15   0.776 #> 5 P02     ALB         2    39    38    33    49  1.03     1.18   0.796 #> 6 P02     ALB         3    37    38    33    49  0.974    1.12   0.755  # Returns user-defined variables data %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = BASE, new_var = R01BASE) %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = ANRLO, new_var = R01ANRLO) %>%   derive_var_analysis_ratio(numer_var = AVAL, denom_var = ANRHI, new_var = R01ANRHI) #> # A tibble: 6 x 10 #>   USUBJID PARAMCD   SEQ  AVAL  BASE ANRLO ANRHI R01BASE R01ANRLO R01ANRHI #>   <chr>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl>    <dbl> #> 1 P01     ALT         1    27    27     6    34   1         4.5     0.794 #> 2 P01     ALT         2    41    27     6    34   1.52      6.83    1.21  #> 3 P01     ALT         3    17    27     6    34   0.630     2.83    0.5   #> 4 P02     ALB         1    38    38    33    49   1         1.15    0.776 #> 5 P02     ALB         2    39    38    33    49   1.03      1.18    0.796 #> 6 P02     ALB         3    37    38    33    49   0.974     1.12    0.755"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Reference Range Indicator — derive_var_anrind","title":"Derive Reference Range Indicator — derive_var_anrind","text":"Derive Reference Range Indicator","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Reference Range Indicator — derive_var_anrind","text":"","code":"derive_var_anrind(dataset)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Reference Range Indicator — derive_var_anrind","text":"dataset input dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Reference Range Indicator — derive_var_anrind","text":"input dataset additional column ANRIND","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Reference Range Indicator — derive_var_anrind","text":"ANRIND set \"NORMAL\" AVAL greater equal ANRLO less equal ANRHI; AVAL greater equal ANRLO ANRHI missing; AVAL less equal ANRHI ANRLO missing \"LOW\" AVAL less ANRLO either A1LO missing AVAL greater equal A1LO \"HIGH\" AVAL greater ANRHI either A1HI missing AVAL less equal A1HI \"LOW LOW\" AVAL less A1LO \"HIGH HIGH\" AVAL greater A1HI","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Reference Range Indicator — derive_var_anrind","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_vs)  ref_ranges <- tribble(   ~PARAMCD, ~ANRLO, ~ANRHI, ~A1LO, ~A1HI,   \"DIABP\",      60,     80,    40,    90,   \"PULSE\",      60,    100,    40,   110 )  admiral_vs %>%   mutate(     PARAMCD = VSTESTCD,     AVAL = VSSTRESN   ) %>%   filter(PARAMCD %in% c(\"PULSE\", \"DIABP\")) %>%   derive_vars_merged(ref_ranges, by_vars = exprs(PARAMCD)) %>%   derive_var_anrind() %>%   select(USUBJID, PARAMCD, AVAL, ANRLO:ANRIND) #> # A tibble: 16,411 x 8 #>    USUBJID     PARAMCD  AVAL ANRLO ANRHI  A1LO  A1HI ANRIND #>    <chr>       <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  #>  1 01-701-1015 DIABP      64    60    80    40    90 NORMAL #>  2 01-701-1015 DIABP      83    60    80    40    90 HIGH   #>  3 01-701-1015 DIABP      57    60    80    40    90 LOW    #>  4 01-701-1015 DIABP      68    60    80    40    90 NORMAL #>  5 01-701-1015 DIABP      59    60    80    40    90 LOW    #>  6 01-701-1015 DIABP      71    60    80    40    90 NORMAL #>  7 01-701-1015 DIABP      56    60    80    40    90 LOW    #>  8 01-701-1015 DIABP      51    60    80    40    90 LOW    #>  9 01-701-1015 DIABP      61    60    80    40    90 NORMAL #> 10 01-701-1015 DIABP      67    60    80    40    90 NORMAL #> # … with 16,401 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"Derives character lab grade based high low severity/toxicity grade(s).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"","code":"derive_var_atoxgr(   dataset,   lotox_description_var = ATOXDSCL,   hitox_description_var = ATOXDSCH )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"dataset Input data set columns ATOXGRL, ATOXGRH specified lotox_description_var, hitox_description_var parameters expected. lotox_description_var Variable containing toxicity grade description low values, eg. \"Anemia\" hitox_description_var Variable containing toxicity grade description low values, eg. \"Hemoglobin Increased\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"input data set character variable added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"Created variable ATOXGR contain values \"-4\", \"-3\", \"-2\", \"-1\" low values \"1\", \"2\", \"3\", \"4\" high values, contain \"0\" value gradable satisfy criteria high low values. ATOXGR set missing information available give grade. Function applies following rules: High low missing - overall missing Low grade missing > 0 - overall holds low grade High grade missing > 0 - overall holds high grade (high direction low direction NORMAL) high grade normal - overall NORMAL (low direction high direction NORMAL) low grade normal - overall NORMAL otherwise set missing","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Lab High toxicity Grade 0 - 4 and Low Toxicity Grades 0 - (-4) — derive_var_atoxgr","text":"","code":"library(tibble)  adlb <- tribble(   ~ATOXDSCL,          ~ATOXDSCH,        ~ATOXGRL,      ~ATOXGRH,   \"Hypoglycemia\",     \"Hyperglycemia\",  NA_character_, \"0\",   \"Hypoglycemia\",     \"Hyperglycemia\",  \"0\",           \"1\",   \"Hypoglycemia\",     \"Hyperglycemia\",  \"0\",           \"0\",   NA_character_,      \"INR Increased\",  NA_character_, \"0\",   \"Hypophosphatemia\", NA_character_,    \"1\",           NA_character_ )  derive_var_atoxgr(adlb) #> # A tibble: 5 x 5 #>   ATOXDSCL         ATOXDSCH      ATOXGRL ATOXGRH ATOXGR #>   <chr>            <chr>         <chr>   <chr>   <chr>  #> 1 Hypoglycemia     Hyperglycemia NA      0       NA     #> 2 Hypoglycemia     Hyperglycemia 0       1       1      #> 3 Hypoglycemia     Hyperglycemia 0       0       0      #> 4 NA               INR Increased NA      0       0      #> 5 Hypophosphatemia NA            1       NA      -1"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"Derives character lab grade based severity/toxicity criteria.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"","code":"derive_var_atoxgr_dir(   dataset,   new_var,   tox_description_var,   meta_criteria,   criteria_direction,   get_unit_expr )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"dataset Input data set columns specified tox_description_var parameter expected. new_var Name character grade variable create, example, ATOXGRH ATOXGRL. tox_description_var Variable containing description grading criteria. example: \"Anemia\" \"INR Increased\". meta_criteria Metadata data set holding criteria (normally case statement) Permitted Values: atoxgr_criteria_ctcv4, atoxgr_criteria_ctcv5 admiral metadata data set atoxgr_criteria_ctcv4 implements Common Terminology Criteria Adverse Events (CTCAE) v4.0 admiral metadata data set atoxgr_criteria_ctcv5 implements Common Terminology Criteria Adverse Events (CTCAE) v5.0 metadata following variables: TERM: variable hold term describing criteria applied particular lab test, eg. \"Anemia\" \"INR Increased\". Note: variable case insensitive. DIRECTION: variable hold direction abnormality particular lab test value. \"L\" LOW values, \"H\" HIGH values. Note: variable case insensitive. SI_UNIT_CHECK: variable hold unit particular lab test. Used check input data criteria based absolute values. VAR_CHECK: variable hold comma separated list variables used criteria. Used check input data variables exist. GRADE_CRITERIA_CODE: variable hold code creates grade based defined criteria. criteria_direction Direction (L= Low, H = High) toxicity grade. Permitted Values: \"L\", \"H\" get_unit_expr expression providing unit parameter result used check units input parameters. Compared SI_UNIT_CHECK metadata (see meta_criteria parameter). Permitted Values: variable containing unit input dataset, function call, example, get_unit_expr = extract_unit(PARAM).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"input dataset character variable added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"new_var derived values NA, \"0\", \"1\", \"2\", \"3\", \"4\", \"4\" severe grade \"4\" lab value satisfies criteria grade 4. \"3\" lab value satisfies criteria grade 3. \"2\" lab value satisfies criteria grade 2. \"1\" lab value satisfies criteria grade 1. \"0\" grade can derived grade \"1\", \"2\", \"3\" \"4\". NA grade derived.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Lab Toxicity Grade 0 - 4 — derive_var_atoxgr_dir","text":"","code":"library(tibble)  data <- tribble(   ~ATOXDSCL,                     ~AVAL,  ~ANRLO,   ~ANRHI, ~PARAM,   \"Hypoglycemia\",                119,    4,        7,      \"Glucose (mmol/L)\",   \"Hypoglycemia\",                120,    4,        7,      \"Glucose (mmol/L)\",   \"Anemia\",                      129,    120,      180,    \"Hemoglobin (g/L)\",   \"White blood cell decreased\",  10,     5,        20,     \"White blood cell (10^9/L)\",   \"White blood cell decreased\",  15,     5,        20,     \"White blood cell (10^9/L)\",   \"Anemia\",                      140,    120,      180,    \"Hemoglobin (g/L)\" )  derive_var_atoxgr_dir(data,   new_var = ATOXGRL,   tox_description_var = ATOXDSCL,   meta_criteria = atoxgr_criteria_ctcv4,   criteria_direction = \"L\",   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 6 x 6 #>   ATOXDSCL                    AVAL ANRLO ANRHI PARAM                     ATOXGRL #>   <chr>                      <dbl> <dbl> <dbl> <chr>                     <chr>   #> 1 Anemia                       129   120   180 Hemoglobin (g/L)          0       #> 2 Anemia                       140   120   180 Hemoglobin (g/L)          0       #> 3 Hypoglycemia                 119     4     7 Glucose (mmol/L)          0       #> 4 Hypoglycemia                 120     4     7 Glucose (mmol/L)          0       #> 5 White blood cell decreased    10     5    20 White blood cell (10^9/L) 0       #> 6 White blood cell decreased    15     5    20 White blood cell (10^9/L) 0        data <- tribble(   ~ATOXDSCH,                     ~AVAL,  ~ANRLO,   ~ANRHI, ~PARAM,   \"Hyperglycemia\",               119,    4,        7,      \"Glucose (mmol/L)\",   \"Hyperglycemia\",               120,    4,        7,      \"Glucose  (mmol/L)\",   \"GGT increased\",               129,    0,        30,     \"Gamma Glutamyl Transferase (U/L)\",   \"Lymphocyte count increased\",  4,      1,        4,      \"Lymphocytes Abs (10^9/L)\",   \"Lymphocyte count increased\",  2,      1,        4,      \"Lymphocytes Abs (10^9/L)\",   \"GGT increased\",               140,    120,      180,    \"Gamma Glutamyl Transferase (U/L)\" )  derive_var_atoxgr_dir(data,   new_var = ATOXGRH,   tox_description_var = ATOXDSCH,   meta_criteria = atoxgr_criteria_ctcv4,   criteria_direction = \"H\",   get_unit_expr = extract_unit(PARAM) ) #> # A tibble: 6 x 6 #>   ATOXDSCH                  AVAL ANRLO ANRHI PARAM                       ATOXGRH #>   <chr>                    <dbl> <dbl> <dbl> <chr>                       <chr>   #> 1 GGT increased              129     0    30 Gamma Glutamyl Transferase… 2       #> 2 GGT increased              140   120   180 Gamma Glutamyl Transferase… 0       #> 3 Hyperglycemia              119     4     7 Glucose (mmol/L)            4       #> 4 Hyperglycemia              120     4     7 Glucose  (mmol/L)           4       #> 5 Lymphocyte count increa…     4     1     4 Lymphocytes Abs (10^9/L)    0       #> 6 Lymphocyte count increa…     2     1     4 Lymphocytes Abs (10^9/L)    0"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Baseline Variables — derive_var_base","title":"Derive Baseline Variables — derive_var_base","text":"Derive baseline variables, e.g. BASE BNRIND, BDS dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Baseline Variables — derive_var_base","text":"","code":"derive_var_base(   dataset,   by_vars,   source_var = AVAL,   new_var = BASE,   filter = ABLFL == \"Y\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Baseline Variables — derive_var_base","text":"dataset input dataset by_vars Grouping variables uniquely identifying set records calculate new_var source_var column extract baseline value, e.g. AVAL new_var name newly created baseline column, e.g. BASE filter condition used filter dataset baseline records. default ABLFL == \"Y\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Baseline Variables — derive_var_base","text":"new data.frame containing records variables input dataset plus new_var variable","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Baseline Variables — derive_var_base","text":"by_vars group, baseline record identified condition specified filter defaults ABLFL == \"Y\". Subsequently, every value new_var variable by_vars group set value source_var variable baseline record. case multiple baseline records within by_vars error issued.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Baseline Variables — derive_var_base","text":"","code":"library(tibble)  dataset <- tribble(   ~STUDYID, ~USUBJID,   ~PARAMCD, ~AVAL,   ~AVALC,      ~AVISIT, ~ABLFL,  ~ANRIND,   \"TEST01\",  \"PAT01\",  \"PARAM01\", 10.12,       NA,   \"Baseline\",    \"Y\", \"NORMAL\",   \"TEST01\",  \"PAT01\",  \"PARAM01\", 9.700,       NA,      \"Day 7\",    \"N\",    \"LOW\",   \"TEST01\",  \"PAT01\",  \"PARAM01\", 15.01,       NA,     \"Day 14\",    \"N\",   \"HIGH\",   \"TEST01\",  \"PAT01\",  \"PARAM02\", 8.350,       NA,   \"Baseline\",    \"Y\",    \"LOW\",   \"TEST01\",  \"PAT01\",  \"PARAM02\",    NA,       NA,      \"Day 7\",    \"N\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM02\", 8.350,       NA,     \"Day 14\",    \"N\",    \"LOW\",   \"TEST01\",  \"PAT01\",  \"PARAM03\",    NA,    \"LOW\",   \"Baseline\",    \"Y\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM03\",    NA,    \"LOW\",      \"Day 7\",    \"N\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM03\",    NA, \"MEDIUM\",     \"Day 14\",    \"N\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM04\",    NA,   \"HIGH\",   \"Baseline\",    \"Y\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM04\",    NA,   \"HIGH\",      \"Day 7\",    \"N\",       NA,   \"TEST01\",  \"PAT01\",  \"PARAM04\",    NA, \"MEDIUM\",     \"Day 14\",    \"N\",       NA )  ## Derive `BASE` variable from `AVAL` derive_var_base(   dataset,   by_vars = exprs(USUBJID, PARAMCD),   source_var = AVAL,   new_var = BASE ) #> # A tibble: 12 x 9 #>    STUDYID USUBJID PARAMCD  AVAL AVALC  AVISIT   ABLFL ANRIND  BASE #>    <chr>   <chr>   <chr>   <dbl> <chr>  <chr>    <chr> <chr>  <dbl> #>  1 TEST01  PAT01   PARAM01 10.1  NA     Baseline Y     NORMAL 10.1  #>  2 TEST01  PAT01   PARAM01  9.7  NA     Day 7    N     LOW    10.1  #>  3 TEST01  PAT01   PARAM01 15.0  NA     Day 14   N     HIGH   10.1  #>  4 TEST01  PAT01   PARAM02  8.35 NA     Baseline Y     LOW     8.35 #>  5 TEST01  PAT01   PARAM02 NA    NA     Day 7    N     NA      8.35 #>  6 TEST01  PAT01   PARAM02  8.35 NA     Day 14   N     LOW     8.35 #>  7 TEST01  PAT01   PARAM03 NA    LOW    Baseline Y     NA     NA    #>  8 TEST01  PAT01   PARAM03 NA    LOW    Day 7    N     NA     NA    #>  9 TEST01  PAT01   PARAM03 NA    MEDIUM Day 14   N     NA     NA    #> 10 TEST01  PAT01   PARAM04 NA    HIGH   Baseline Y     NA     NA    #> 11 TEST01  PAT01   PARAM04 NA    HIGH   Day 7    N     NA     NA    #> 12 TEST01  PAT01   PARAM04 NA    MEDIUM Day 14   N     NA     NA     ## Derive `BASEC` variable from `AVALC` derive_var_base(   dataset,   by_vars = exprs(USUBJID, PARAMCD),   source_var = AVALC,   new_var = BASEC ) #> # A tibble: 12 x 9 #>    STUDYID USUBJID PARAMCD  AVAL AVALC  AVISIT   ABLFL ANRIND BASEC #>    <chr>   <chr>   <chr>   <dbl> <chr>  <chr>    <chr> <chr>  <chr> #>  1 TEST01  PAT01   PARAM01 10.1  NA     Baseline Y     NORMAL NA    #>  2 TEST01  PAT01   PARAM01  9.7  NA     Day 7    N     LOW    NA    #>  3 TEST01  PAT01   PARAM01 15.0  NA     Day 14   N     HIGH   NA    #>  4 TEST01  PAT01   PARAM02  8.35 NA     Baseline Y     LOW    NA    #>  5 TEST01  PAT01   PARAM02 NA    NA     Day 7    N     NA     NA    #>  6 TEST01  PAT01   PARAM02  8.35 NA     Day 14   N     LOW    NA    #>  7 TEST01  PAT01   PARAM03 NA    LOW    Baseline Y     NA     LOW   #>  8 TEST01  PAT01   PARAM03 NA    LOW    Day 7    N     NA     LOW   #>  9 TEST01  PAT01   PARAM03 NA    MEDIUM Day 14   N     NA     LOW   #> 10 TEST01  PAT01   PARAM04 NA    HIGH   Baseline Y     NA     HIGH  #> 11 TEST01  PAT01   PARAM04 NA    HIGH   Day 7    N     NA     HIGH  #> 12 TEST01  PAT01   PARAM04 NA    MEDIUM Day 14   N     NA     HIGH   ## Derive `BNRIND` variable from `ANRIND` derive_var_base(   dataset,   by_vars = exprs(USUBJID, PARAMCD),   source_var = ANRIND,   new_var = BNRIND ) #> # A tibble: 12 x 9 #>    STUDYID USUBJID PARAMCD  AVAL AVALC  AVISIT   ABLFL ANRIND BNRIND #>    <chr>   <chr>   <chr>   <dbl> <chr>  <chr>    <chr> <chr>  <chr>  #>  1 TEST01  PAT01   PARAM01 10.1  NA     Baseline Y     NORMAL NORMAL #>  2 TEST01  PAT01   PARAM01  9.7  NA     Day 7    N     LOW    NORMAL #>  3 TEST01  PAT01   PARAM01 15.0  NA     Day 14   N     HIGH   NORMAL #>  4 TEST01  PAT01   PARAM02  8.35 NA     Baseline Y     LOW    LOW    #>  5 TEST01  PAT01   PARAM02 NA    NA     Day 7    N     NA     LOW    #>  6 TEST01  PAT01   PARAM02  8.35 NA     Day 14   N     LOW    LOW    #>  7 TEST01  PAT01   PARAM03 NA    LOW    Baseline Y     NA     NA     #>  8 TEST01  PAT01   PARAM03 NA    LOW    Day 7    N     NA     NA     #>  9 TEST01  PAT01   PARAM03 NA    MEDIUM Day 14   N     NA     NA     #> 10 TEST01  PAT01   PARAM04 NA    HIGH   Baseline Y     NA     NA     #> 11 TEST01  PAT01   PARAM04 NA    HIGH   Day 7    N     NA     NA     #> 12 TEST01  PAT01   PARAM04 NA    MEDIUM Day 14   N     NA     NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Basetype Variable — derive_var_basetype","title":"Derive Basetype Variable — derive_var_basetype","text":"Baseline Type BASETYPE needed one definition baseline given Analysis Parameter PARAM dataset.  given parameter, Baseline Value BASE populated, one definition baseline, BASETYPE must non-null records type parameter. value BASETYPE refers definition baseline characterizes value BASE row.  Please see section 4.2.1.6 ADaM Implementation Guide, version 1.3 background.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Basetype Variable — derive_var_basetype","text":"","code":"derive_var_basetype(dataset, basetypes)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Basetype Variable — derive_var_basetype","text":"dataset Input dataset columns specified expressions inside basetypes required. basetypes named list expressions created using rlang::exprs() function names corresponds values newly created BASETYPE variables expressions used subset input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Basetype Variable — derive_var_basetype","text":"input dataset variable BASETYPE added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Basetype Variable — derive_var_basetype","text":"Adds BASETYPE variable dataset duplicates records based upon provided conditions. element basetypes input dataset subset based upon provided expression BASETYPE variable set name expression. , subsets stacked. Records match condition kept BASETYPE set NA.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_basetype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Basetype Variable — derive_var_basetype","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(rlang)  bds <- tribble(   ~USUBJID, ~EPOCH,         ~PARAMCD,  ~ASEQ, ~AVAL,   \"P01\",    \"RUN-IN\",       \"PARAM01\",     1,  10.0,   \"P01\",    \"RUN-IN\",       \"PARAM01\",     2,   9.8,   \"P01\",    \"DOUBLE-BLIND\", \"PARAM01\",     3,   9.2,   \"P01\",    \"DOUBLE-BLIND\", \"PARAM01\",     4,  10.1,   \"P01\",    \"OPEN-LABEL\",   \"PARAM01\",     5,  10.4,   \"P01\",    \"OPEN-LABEL\",   \"PARAM01\",     6,   9.9,   \"P02\",    \"RUN-IN\",       \"PARAM01\",     1,  12.1,   \"P02\",    \"DOUBLE-BLIND\", \"PARAM01\",     2,  10.2,   \"P02\",    \"DOUBLE-BLIND\", \"PARAM01\",     3,  10.8,   \"P02\",    \"OPEN-LABEL\",   \"PARAM01\",     4,  11.4,   \"P02\",    \"OPEN-LABEL\",   \"PARAM01\",     5,  10.8 )  bds_with_basetype <- derive_var_basetype(   dataset = bds,   basetypes = exprs(     \"RUN-IN\" = EPOCH %in% c(\"RUN-IN\", \"STABILIZATION\", \"DOUBLE-BLIND\", \"OPEN-LABEL\"),     \"DOUBLE-BLIND\" = EPOCH %in% c(\"DOUBLE-BLIND\", \"OPEN-LABEL\"),     \"OPEN-LABEL\" = EPOCH == \"OPEN-LABEL\"   ) )   # Below print statement will print all 23 records in the data frame # bds_with_basetype print(bds_with_basetype, n = Inf) #> # A tibble: 23 x 6 #>    USUBJID EPOCH        PARAMCD  ASEQ  AVAL BASETYPE     #>    <chr>   <chr>        <chr>   <dbl> <dbl> <chr>        #>  1 P01     RUN-IN       PARAM01     1  10   RUN-IN       #>  2 P01     RUN-IN       PARAM01     2   9.8 RUN-IN       #>  3 P01     DOUBLE-BLIND PARAM01     3   9.2 RUN-IN       #>  4 P01     DOUBLE-BLIND PARAM01     4  10.1 RUN-IN       #>  5 P01     OPEN-LABEL   PARAM01     5  10.4 RUN-IN       #>  6 P01     OPEN-LABEL   PARAM01     6   9.9 RUN-IN       #>  7 P02     RUN-IN       PARAM01     1  12.1 RUN-IN       #>  8 P02     DOUBLE-BLIND PARAM01     2  10.2 RUN-IN       #>  9 P02     DOUBLE-BLIND PARAM01     3  10.8 RUN-IN       #> 10 P02     OPEN-LABEL   PARAM01     4  11.4 RUN-IN       #> 11 P02     OPEN-LABEL   PARAM01     5  10.8 RUN-IN       #> 12 P01     DOUBLE-BLIND PARAM01     3   9.2 DOUBLE-BLIND #> 13 P01     DOUBLE-BLIND PARAM01     4  10.1 DOUBLE-BLIND #> 14 P01     OPEN-LABEL   PARAM01     5  10.4 DOUBLE-BLIND #> 15 P01     OPEN-LABEL   PARAM01     6   9.9 DOUBLE-BLIND #> 16 P02     DOUBLE-BLIND PARAM01     2  10.2 DOUBLE-BLIND #> 17 P02     DOUBLE-BLIND PARAM01     3  10.8 DOUBLE-BLIND #> 18 P02     OPEN-LABEL   PARAM01     4  11.4 DOUBLE-BLIND #> 19 P02     OPEN-LABEL   PARAM01     5  10.8 DOUBLE-BLIND #> 20 P01     OPEN-LABEL   PARAM01     5  10.4 OPEN-LABEL   #> 21 P01     OPEN-LABEL   PARAM01     6   9.9 OPEN-LABEL   #> 22 P02     OPEN-LABEL   PARAM01     4  11.4 OPEN-LABEL   #> 23 P02     OPEN-LABEL   PARAM01     5  10.8 OPEN-LABEL    count(bds_with_basetype, BASETYPE, name = \"Number of Records\") #> # A tibble: 3 x 2 #>   BASETYPE     `Number of Records` #>   <chr>                      <int> #> 1 DOUBLE-BLIND                   8 #> 2 OPEN-LABEL                     4 #> 3 RUN-IN                        11  # An example where all parameter records need to be included for 2 different # baseline type derivations (such as LAST and WORST) bds <- tribble(   ~USUBJID, ~EPOCH,         ~PARAMCD,  ~ASEQ, ~AVAL,   \"P01\",    \"RUN-IN\",       \"PARAM01\",     1,  10.0,   \"P01\",    \"RUN-IN\",       \"PARAM01\",     2,   9.8,   \"P01\",    \"DOUBLE-BLIND\", \"PARAM01\",     3,   9.2,   \"P01\",    \"DOUBLE-BLIND\", \"PARAM01\",     4,  10.1 )  bds_with_basetype <- derive_var_basetype(   dataset = bds,   basetypes = exprs(     \"LAST\" = TRUE,     \"WORST\" = TRUE   ) )  print(bds_with_basetype, n = Inf) #> # A tibble: 8 x 6 #>   USUBJID EPOCH        PARAMCD  ASEQ  AVAL BASETYPE #>   <chr>   <chr>        <chr>   <dbl> <dbl> <chr>    #> 1 P01     RUN-IN       PARAM01     1  10   LAST     #> 2 P01     RUN-IN       PARAM01     2   9.8 LAST     #> 3 P01     DOUBLE-BLIND PARAM01     3   9.2 LAST     #> 4 P01     DOUBLE-BLIND PARAM01     4  10.1 LAST     #> 5 P01     RUN-IN       PARAM01     1  10   WORST    #> 6 P01     RUN-IN       PARAM01     2   9.8 WORST    #> 7 P01     DOUBLE-BLIND PARAM01     3   9.2 WORST    #> 8 P01     DOUBLE-BLIND PARAM01     4  10.1 WORST     count(bds_with_basetype, BASETYPE, name = \"Number of Records\") #> # A tibble: 2 x 2 #>   BASETYPE `Number of Records` #>   <chr>                  <int> #> 1 LAST                       4 #> 2 WORST                      4"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Change from Baseline — derive_var_chg","title":"Derive Change from Baseline — derive_var_chg","text":"Derive change baseline (CHG) BDS dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Change from Baseline — derive_var_chg","text":"","code":"derive_var_chg(dataset)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Change from Baseline — derive_var_chg","text":"dataset input dataset. Required variables AVAL BASE.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Change from Baseline — derive_var_chg","text":"input dataset additional column named CHG","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Change from Baseline — derive_var_chg","text":"Change baseline calculated subtracting baseline value analysis value.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_chg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Change from Baseline — derive_var_chg","text":"","code":"library(tibble)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~ABLFL, ~BASE,   \"P01\",    \"WEIGHT\", 80,    \"Y\",    80,   \"P01\",    \"WEIGHT\", 80.8,  \"\",     80,   \"P01\",    \"WEIGHT\", 81.4,  \"\",     80,   \"P02\",    \"WEIGHT\", 75.3,  \"Y\",    75.3,   \"P02\",    \"WEIGHT\", 76,    \"\",     75.3 ) derive_var_chg(advs) #> # A tibble: 5 x 6 #>   USUBJID PARAMCD  AVAL ABLFL  BASE   CHG #>   <chr>   <chr>   <dbl> <chr> <dbl> <dbl> #> 1 P01     WEIGHT   80   \"Y\"    80   0     #> 2 P01     WEIGHT   80.8 \"\"     80   0.800 #> 3 P01     WEIGHT   81.4 \"\"     80   1.4   #> 4 P02     WEIGHT   75.3 \"Y\"    75.3 0     #> 5 P02     WEIGHT   76   \"\"     75.3 0.7"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Confirmation Flag — derive_var_confirmation_flag","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"function deprecated, please use derive_var_joined_exist_flag() instead.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"","code":"derive_var_confirmation_flag(   dataset,   by_vars,   order,   new_var,   tmp_obs_nr_var = NULL,   join_vars,   join_type,   first_cond = NULL,   filter,   true_value = \"Y\",   false_value = NA_character_,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"dataset Input dataset variables specified by_vars join_vars parameter expected. by_vars variables specified variables used variables joining input dataset . order Order observations ordered specified order. new_var New variable specified variable added input dataset. tmp_obs_nr_var Temporary observation number specified variable added input dataset set observation number respect order. group (by_vars) observation number starts 1. variable can used conditions (filter, first_cond). included output dataset. can used flag consecutive observations last observation (see last example ). join_vars Variables keep joined dataset variables needed observations specified parameter. specified variables added joined dataset suffix \".join\". example flag observations AVALC == \"Y\" AVALC == \"Y\" least one subsequent visit join_vars = exprs(AVALC, AVISITN) filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join specified. *.join variables included output dataset. join_type Observations keep joining argument determines joined observations kept respect original observation. example, join_type = \"\" specified observations original observations kept. example confirmed response BOR oncology setting confirmed deterioration questionnaires confirmatory assessment must assessment flagged. Thus join_type = \"\" used. Whereas, sometimes might allow confirmatory observations occur prior observation flagged. example, flag AEs occurring seven days COVID AE. Thus join_type = \"\" used. Permitted Values: \"\", \"\", \"\" first_cond Condition selecting range data argument specified, observations restricted first observation specified condition fulfilled. condition fulfilled observations, observations considered, .e., observation flagged. parameter specified filter contains summary functions apply observations confirmation assessment. example see third example . filter Condition selecting observations filter applied joined dataset flagging confirmed observations. condition can include summary functions. joined dataset grouped original observations. .e., summary function applied observations confirmation observation. example, filter = AVALC == \"CR\" & (AVALC.join %% c(\"CR\", \"NE\")) & count_vals(var = AVALC.join, val = \"NE\") <= 1 selects observations response \"CR\" observations confirmation observation response \"CR\" \"NE\" one \"NE\". true_value Value new_var flagged observations Default: \"Y\" false_value Value new_var observations flagged Default: NA_character_ check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"input dataset variable specified new_var added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"following steps performed produce output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step-","dir":"Reference","previous_headings":"","what":"Step 1","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"input dataset joined variables specified by_vars. right hand side join variables specified join_vars kept. suffix \".join\" added variables. example, by_vars = USUBJID, join_vars = exprs(AVISITN, AVALC) input dataset   joined dataset ","code":"# A tibble: 2 x 4 USUBJID AVISITN AVALC  AVAL <chr>     <dbl> <chr> <dbl> 1             1 Y         1 1             2 N         0 A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            1 Y 1             1 Y         1            2 N 1             2 N         0            1 Y 1             2 N         0            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step--1","dir":"Reference","previous_headings":"","what":"Step 2","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"joined dataset restricted observations respect join_type order. dataset example previous step join_type = \"\" order = exprs(AVISITN) restricted ","code":"A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step--2","dir":"Reference","previous_headings":"","what":"Step 3","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"first_cond specified, observation input dataset joined dataset restricted observations first observation first_cond fulfilled (observation fulfilling condition included). observation input dataset condition fulfilled, observation removed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step--3","dir":"Reference","previous_headings":"","what":"Step 4","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"joined dataset grouped observations input dataset restricted observations fulfilling condition specified filter.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step--4","dir":"Reference","previous_headings":"","what":"Step 5","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"first observation group selected","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_confirmation_flag.html","id":"step--5","dir":"Reference","previous_headings":"","what":"Step 6","title":"Derive Confirmation Flag — derive_var_confirmation_flag","text":"variable specified new_var added input dataset. set true_value observations selected previous step. observations set false_value.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_disposition_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive a Disposition Status at a Specific Timepoint — derive_var_disposition_status","title":"Derive a Disposition Status at a Specific Timepoint — derive_var_disposition_status","text":"function deprecated, Please define function use input cat_fun argument derive_var_merged_cat() instead. Derive disposition status relevant records disposition domain.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_disposition_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive a Disposition Status at a Specific Timepoint — derive_var_disposition_status","text":"","code":"derive_var_disposition_status(   dataset,   dataset_ds,   new_var,   status_var,   format_new_var = format_eoxxstt_default,   filter_ds,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_disposition_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive a Disposition Status at a Specific Timepoint — derive_var_disposition_status","text":"dataset Input dataset. dataset_ds Dataset containing disposition information (e.g.: ds). must contain: STUDYID, USUBJID, variable(s) specified status_var variables used filter_ds. new_var Name disposition status variable. variable name expected (e.g. EOSSTT). status_var variable used derive disposition status. variable name expected (e.g. DSDECOD). format_new_var format used derive status. Default: format_eoxxstt_default() defined :   status status_var. filter_ds Filter condition disposition data. one observation per patient. error issued otherwise. Permitted Values: logical expression. subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":"format_eoxxstt_default <- function(status) {   case_when(     status %in% c(\"SCREEN FAILURE\", \"SCREENING NOT COMPLETED\") ~ \"NOT STARTED\",     status == \"COMPLETED\" ~ \"COMPLETED\",     !status %in% c(\"COMPLETED\", \"SCREEN FAILURE\", \"SCREENING NOT COMPLETED\")     & !is.na(status) ~ \"DISCONTINUED\",     TRUE ~ \"ONGOING\"   ) }"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_disposition_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive a Disposition Status at a Specific Timepoint — derive_var_disposition_status","text":"input dataset disposition status (new_var) added. new_var derived based values given status_var according format defined format_new_var (e.g. default format used, function derive new_var : \"STARTED\" status \"SCREEN FAILURE\" \"SCREENING COMPLETED\", \"COMPLETED\" status_var == \"COMPLETED\", \"DISCONTINUED\" status (\"COMPLETED\",\"SCREEN FAILURE\", \"SCREENING COMPLETED\") NA, \"ONGOING\" otherwise).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Death Cause — derive_var_dthcaus","title":"Derive Death Cause — derive_var_dthcaus","text":"Derive death cause (DTHCAUS) add traceability variables required.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Death Cause — derive_var_dthcaus","text":"","code":"derive_var_dthcaus(   dataset,   ...,   source_datasets,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Death Cause — derive_var_dthcaus","text":"dataset Input dataset. variables specified subject_keys required. ... Objects class \"dthcaus_source\" created dthcaus_source(). source_datasets named list containing datasets search death cause subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Death Cause — derive_var_dthcaus","text":"input dataset DTHCAUS variable added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Death Cause — derive_var_dthcaus","text":"function derives DTHCAUS along user-defined traceability variables, required. subject death info multiple sources, one source earliest death date used. dates equivalent, first source kept, user provide inputs preferred order.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_dthcaus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Death Cause — derive_var_dthcaus","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adsl <- tribble(   ~STUDYID,  ~USUBJID,   \"STUDY01\", \"PAT01\",   \"STUDY01\", \"PAT02\",   \"STUDY01\", \"PAT03\" ) ae <- tribble(   ~STUDYID,  ~USUBJID, ~AESEQ, ~AEDECOD,       ~AEOUT,  ~AEDTHDTC,   \"STUDY01\", \"PAT01\",  12,     \"SUDDEN DEATH\", \"FATAL\", \"2021-04-04\" ) %>%   mutate(     AEDTHDT = ymd(AEDTHDTC)   ) ds <- tribble(   ~STUDYID, ~USUBJID, ~DSSEQ, ~DSDECOD, ~DSTERM, ~DSSTDTC,   \"STUDY01\", \"PAT02\", 1, \"INFORMED CONSENT OBTAINED\", \"INFORMED CONSENT OBTAINED\", \"2021-04-03\",   \"STUDY01\", \"PAT02\", 2, \"RANDOMIZATION\", \"RANDOMIZATION\", \"2021-04-11\",   \"STUDY01\", \"PAT02\", 3, \"DEATH\", \"DEATH DUE TO PROGRESSION OF DISEASE\", \"2022-02-01\",   \"STUDY01\", \"PAT03\", 1, \"DEATH\", \"POST STUDY REPORTING OF DEATH\", \"2022-03-03\" ) %>%   mutate(     DSSTDT = ymd(DSSTDTC)   )  # Derive `DTHCAUS` only - for on-study deaths only src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AEDTHDT,   mode = \"first\",   dthcaus = AEDECOD )  src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & grepl(\"DEATH DUE TO\", DSTERM),   date = DSSTDT,   mode = \"first\",   dthcaus = DSTERM )  derive_var_dthcaus(adsl, src_ae, src_ds, source_datasets = list(ae = ae, ds = ds)) #> # A tibble: 3 x 3 #>   STUDYID USUBJID DTHCAUS                             #>   <chr>   <chr>   <chr>                               #> 1 STUDY01 PAT01   SUDDEN DEATH                        #> 2 STUDY01 PAT02   DEATH DUE TO PROGRESSION OF DISEASE #> 3 STUDY01 PAT03   NA                                   # Derive `DTHCAUS` and add traceability variables - for on-study deaths only src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AEDTHDT,   mode = \"first\",   dthcaus = AEDECOD,   traceability_vars = exprs(DTHDOM = \"AE\", DTHSEQ = AESEQ) )  src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & grepl(\"DEATH DUE TO\", DSTERM),   date = DSSTDT,   mode = \"first\",   dthcaus = DSTERM,   traceability_vars = exprs(DTHDOM = \"DS\", DTHSEQ = DSSEQ) )  derive_var_dthcaus(adsl, src_ae, src_ds, source_datasets = list(ae = ae, ds = ds)) #> # A tibble: 3 x 5 #>   STUDYID USUBJID DTHCAUS                             DTHDOM DTHSEQ #>   <chr>   <chr>   <chr>                               <chr>   <dbl> #> 1 STUDY01 PAT01   SUDDEN DEATH                        AE         12 #> 2 STUDY01 PAT02   DEATH DUE TO PROGRESSION OF DISEASE DS          3 #> 3 STUDY01 PAT03   NA                                  NA         NA  # Derive `DTHCAUS` as above - now including post-study deaths with different `DTHCAUS` value src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AEDTHDT,   mode = \"first\",   dthcaus = AEDECOD,   traceability_vars = exprs(DTHDOM = \"AE\", DTHSEQ = AESEQ) )  src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & grepl(\"DEATH DUE TO\", DSTERM),   date = DSSTDT,   mode = \"first\",   dthcaus = DSTERM,   traceability_vars = exprs(DTHDOM = \"DS\", DTHSEQ = DSSEQ) )  src_ds_post <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\" & DSTERM == \"POST STUDY REPORTING OF DEATH\",   date = DSSTDT,   mode = \"first\",   dthcaus = \"POST STUDY: UNKNOWN CAUSE\",   traceability_vars = exprs(DTHDOM = \"DS\", DTHSEQ = DSSEQ) )  derive_var_dthcaus(adsl, src_ae, src_ds, src_ds_post, source_datasets = list(ae = ae, ds = ds)) #> # A tibble: 3 x 5 #>   STUDYID USUBJID DTHCAUS                             DTHDOM DTHSEQ #>   <chr>   <chr>   <chr>                               <chr>   <dbl> #> 1 STUDY01 PAT01   SUDDEN DEATH                        AE         12 #> 2 STUDY01 PAT02   DEATH DUE TO PROGRESSION OF DISEASE DS          3 #> 3 STUDY01 PAT03   POST STUDY: UNKNOWN CAUSE           DS          1"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"Add first last date multiple sources dataset, e.g., last known alive date (LSTALVDT).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"","code":"derive_var_extreme_dt(   dataset,   new_var,   ...,   source_datasets,   mode,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"dataset Input dataset variables specified subject_keys required. new_var Name variable create ... Source(s) dates. One date_source() objects expected. source_datasets named list containing datasets search first last date mode Selection mode (first last) \"first\" specified, first date subject selected. \"last\" specified, last date subject selected. Permitted Values:  \"first\", \"last\" subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"input dataset new variable added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"following steps performed create output dataset: source dataset observations specified filter element selected observations date NA removed. patient first last observation (respect date mode) selected. new variable set variable specified date element. variables specified traceability_vars element added. selected observations source datasets combined single dataset. patient first last observation (respect new variable mode) single dataset selected new variable merged input dataset. time part removed new variable.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive First or Last Date from Multiple Sources — derive_var_extreme_dt","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(\"admiral_dm\") data(\"admiral_ae\") data(\"admiral_lb\") data(\"admiral_adsl\")  # derive last known alive date (LSTALVDT) ae_start <- date_source(   dataset_name = \"ae\",   date = AESTDT ) ae_end <- date_source(   dataset_name = \"ae\",   date = AEENDT )  ae_ext <- admiral_ae %>%   derive_vars_dt(     dtc = AESTDTC,     new_vars_prefix = \"AEST\",     highest_imputation = \"M\"   ) %>%   derive_vars_dt(     dtc = AEENDTC,     new_vars_prefix = \"AEEN\",     highest_imputation = \"M\"   )  lb_date <- date_source(   dataset_name = \"lb\",   date = LBDT,   filter = !is.na(LBDT), )  lb_ext <- derive_vars_dt(   admiral_lb,   dtc = LBDTC,   new_vars_prefix = \"LB\" )  adsl_date <- date_source(dataset_name = \"adsl\", date = TRTEDT)  admiral_dm %>%   derive_var_extreme_dt(     new_var = LSTALVDT,     ae_start, ae_end, lb_date, adsl_date,     source_datasets = list(       adsl = admiral_adsl,       ae = ae_ext,       lb = lb_ext     ),     mode = \"last\"   ) %>%   select(USUBJID, LSTALVDT) #> # A tibble: 306 x 2 #>    USUBJID     LSTALVDT   #>    <chr>       <date>     #>  1 01-701-1015 2014-07-02 #>  2 01-701-1023 2012-09-02 #>  3 01-701-1028 2014-01-14 #>  4 01-701-1033 2014-04-14 #>  5 01-701-1034 2014-12-30 #>  6 01-701-1047 2013-04-07 #>  7 01-701-1057 NA         #>  8 01-701-1097 2014-07-09 #>  9 01-701-1111 2012-09-17 #> 10 01-701-1115 2013-01-23 #> # … with 296 more rows  # derive last alive date and traceability variables ae_start <- date_source(   dataset_name = \"ae\",   date = AESTDT,   traceability_vars = exprs(     LALVDOM = \"AE\",     LALVSEQ = AESEQ,     LALVVAR = \"AESTDTC\"   ) )  ae_end <- date_source(   dataset_name = \"ae\",   date = AEENDT,   traceability_vars = exprs(     LALVDOM = \"AE\",     LALVSEQ = AESEQ,     LALVVAR = \"AEENDTC\"   ) ) lb_date <- date_source(   dataset_name = \"lb\",   date = LBDT,   filter = !is.na(LBDT),   traceability_vars = exprs(     LALVDOM = \"LB\",     LALVSEQ = LBSEQ,     LALVVAR = \"LBDTC\"   ) )  adsl_date <- date_source(   dataset_name = \"adsl\",   date = TRTEDT,   traceability_vars = exprs(     LALVDOM = \"ADSL\",     LALVSEQ = NA_integer_,     LALVVAR = \"TRTEDT\"   ) )  admiral_dm %>%   derive_var_extreme_dt(     new_var = LSTALVDT,     ae_start, ae_end, lb_date, adsl_date,     source_datasets = list(       adsl = admiral_adsl,       ae = ae_ext,       lb = lb_ext     ),     mode = \"last\"   ) %>%   select(USUBJID, LSTALVDT, LALVDOM, LALVSEQ, LALVVAR) #> # A tibble: 306 x 5 #>    USUBJID     LSTALVDT   LALVDOM LALVSEQ LALVVAR #>    <chr>       <date>     <chr>     <dbl> <chr>   #>  1 01-701-1015 2014-07-02 ADSL         NA TRTEDT  #>  2 01-701-1023 2012-09-02 LB          107 LBDTC   #>  3 01-701-1028 2014-01-14 ADSL         NA TRTEDT  #>  4 01-701-1033 2014-04-14 LB          107 LBDTC   #>  5 01-701-1034 2014-12-30 ADSL         NA TRTEDT  #>  6 01-701-1047 2013-04-07 LB          134 LBDTC   #>  7 01-701-1057 NA         NA           NA NA      #>  8 01-701-1097 2014-07-09 ADSL         NA TRTEDT  #>  9 01-701-1111 2012-09-17 LB           73 LBDTC   #> 10 01-701-1115 2013-01-23 ADSL         NA TRTEDT  #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"Add first last datetime multiple sources dataset, e.g., last known alive datetime (LSTALVDTM).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"","code":"derive_var_extreme_dtm(   dataset,   new_var,   ...,   source_datasets,   mode,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"dataset Input dataset variables specified subject_keys required. new_var Name variable create ... Source(s) dates. One date_source() objects expected. source_datasets named list containing datasets search first last date mode Selection mode (first last) \"first\" specified, first date subject selected. \"last\" specified, last date subject selected. Permitted Values:  \"first\", \"last\" subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"input dataset new variable added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"following steps performed create output dataset: source dataset observations specified filter element selected observations date NA removed. patient first last observation (respect date mode) selected. new variable set variable specified date element. date variable (rather datetime), time imputed \"00:00:00\". variables specified traceability_vars element added. selected observations source datasets combined single dataset. patient first last observation (respect new variable mode) single dataset selected new variable merged input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive First or Last Datetime from Multiple Sources — derive_var_extreme_dtm","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(\"admiral_dm\") data(\"admiral_ae\") data(\"admiral_lb\") data(\"admiral_adsl\")  # derive last known alive datetime (LSTALVDTM) ae_start <- date_source(   dataset_name = \"ae\",   date = AESTDTM ) ae_end <- date_source(   dataset_name = \"ae\",   date = AEENDTM )  ae_ext <- admiral_ae %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AEST\",     highest_imputation = \"M\"   ) %>%   derive_vars_dtm(     dtc = AEENDTC,     new_vars_prefix = \"AEEN\",     highest_imputation = \"M\"   )  lb_date <- date_source(   dataset_name = \"lb\",   date = LBDTM,   filter = !is.na(LBDTM) )  lb_ext <- derive_vars_dtm(   admiral_lb,   dtc = LBDTC,   new_vars_prefix = \"LB\" )  adsl_date <- date_source(dataset_name = \"adsl\", date = TRTEDTM)  admiral_dm %>%   derive_var_extreme_dtm(     new_var = LSTALVDTM,     ae_start, ae_end, lb_date, adsl_date,     source_datasets = list(       adsl = admiral_adsl,       ae = ae_ext, lb = lb_ext     ),     mode = \"last\"   ) %>%   select(USUBJID, LSTALVDTM) #> # A tibble: 306 x 2 #>    USUBJID     LSTALVDTM           #>    <chr>       <dttm>              #>  1 01-701-1015 2014-07-02 23:59:59 #>  2 01-701-1023 2012-09-02 10:15:00 #>  3 01-701-1028 2014-01-14 23:59:59 #>  4 01-701-1033 2014-04-14 10:38:00 #>  5 01-701-1034 2014-12-30 23:59:59 #>  6 01-701-1047 2013-04-07 11:20:00 #>  7 01-701-1057 NA                  #>  8 01-701-1097 2014-07-09 23:59:59 #>  9 01-701-1111 2012-09-17 11:48:00 #> 10 01-701-1115 2013-01-23 23:59:59 #> # … with 296 more rows  # derive last alive datetime and traceability variables ae_start <- date_source(   dataset_name = \"ae\",   date = AESTDTM,   traceability_vars = exprs(     LALVDOM = \"AE\",     LALVSEQ = AESEQ,     LALVVAR = \"AESTDTC\"   ) )  ae_end <- date_source(   dataset_name = \"ae\",   date = AEENDTM,   traceability_vars = exprs(     LALVDOM = \"AE\",     LALVSEQ = AESEQ,     LALVVAR = \"AEENDTC\"   ) ) lb_date <- date_source(   dataset_name = \"lb\",   date = LBDTM,   filter = !is.na(LBDTM),   traceability_vars = exprs(     LALVDOM = \"LB\",     LALVSEQ = LBSEQ,     LALVVAR = \"LBDTC\"   ) )  adsl_date <- date_source(   dataset_name = \"adsl\",   date = TRTEDTM,   traceability_vars = exprs(     LALVDOM = \"ADSL\",     LALVSEQ = NA_integer_,     LALVVAR = \"TRTEDTM\"   ) )  admiral_dm %>%   derive_var_extreme_dtm(     new_var = LSTALVDTM,     ae_start, ae_end, lb_date, adsl_date,     source_datasets = list(       adsl = admiral_adsl,       ae = ae_ext,       lb = lb_ext     ),     mode = \"last\"   ) %>%   select(USUBJID, LSTALVDTM, LALVDOM, LALVSEQ, LALVVAR) #> # A tibble: 306 x 5 #>    USUBJID     LSTALVDTM           LALVDOM LALVSEQ LALVVAR #>    <chr>       <dttm>              <chr>     <dbl> <chr>   #>  1 01-701-1015 2014-07-02 23:59:59 ADSL         NA TRTEDTM #>  2 01-701-1023 2012-09-02 10:15:00 LB          107 LBDTC   #>  3 01-701-1028 2014-01-14 23:59:59 ADSL         NA TRTEDTM #>  4 01-701-1033 2014-04-14 10:38:00 LB          107 LBDTC   #>  5 01-701-1034 2014-12-30 23:59:59 ADSL         NA TRTEDTM #>  6 01-701-1047 2013-04-07 11:20:00 LB          134 LBDTC   #>  7 01-701-1057 NA                  NA           NA NA      #>  8 01-701-1097 2014-07-09 23:59:59 ADSL         NA TRTEDTM #>  9 01-701-1111 2012-09-17 11:48:00 LB           73 LBDTC   #> 10 01-701-1115 2013-01-23 23:59:59 ADSL         NA TRTEDTM #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"Add variable flagging first last observation within group","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"","code":"derive_var_extreme_flag(   dataset,   by_vars,   order,   new_var,   mode,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"dataset Input dataset variables specified by_vars parameter expected. by_vars Grouping variables Permitted Values: list variables order Sort order first last observation determined respect specified order. Permitted Values: list variables functions variables new_var Variable add specified variable added output dataset. set \"Y\" first last observation (depending mode) group. Permitted Values: list name-value pairs mode Flag mode Determines first last observation flagged. Permitted Values: \"first\", \"last\" check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"input dataset new flag variable added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"group (respect variables specified by_vars parameter), new_var set \"Y\" first last observation (respect order specified order parameter flag mode specified mode parameter). observations included filter parameter considered flagging. Otherwise, new_var set NA. Thus, direction \"worst\" considered fixed parameters dataset depending order mode, .e. every parameter first last record flagged across whole dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_extreme_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Variable Flagging the First or Last Observation Within Each By Group — derive_var_extreme_flag","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(\"admiral_vs\")  # Flag last value for each patient, test, and visit, baseline observations are ignored admiral_vs %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(USUBJID, VSTESTCD, VISIT),       order = exprs(VSTPTNUM),       new_var = LASTFL,       mode = \"last\"     ),     filter = VISIT != \"BASELINE\"   ) %>%   arrange(USUBJID, VSTESTCD, VISITNUM, VSTPTNUM) %>%   select(USUBJID, VSTESTCD, VISIT, VSTPTNUM, VSSTRESN, LASTFL) #> # A tibble: 29,643 x 6 #>    USUBJID     VSTESTCD VISIT               VSTPTNUM VSSTRESN LASTFL #>    <chr>       <chr>    <chr>                  <dbl>    <dbl> <chr>  #>  1 01-701-1015 DIABP    SCREENING 1              815       64 NA     #>  2 01-701-1015 DIABP    SCREENING 1              816       83 NA     #>  3 01-701-1015 DIABP    SCREENING 1              817       57 Y      #>  4 01-701-1015 DIABP    SCREENING 2              815       68 NA     #>  5 01-701-1015 DIABP    SCREENING 2              816       59 NA     #>  6 01-701-1015 DIABP    SCREENING 2              817       71 Y      #>  7 01-701-1015 DIABP    BASELINE                 815       56 NA     #>  8 01-701-1015 DIABP    BASELINE                 816       51 NA     #>  9 01-701-1015 DIABP    BASELINE                 817       61 NA     #> 10 01-701-1015 DIABP    AMBUL ECG PLACEMENT      815       67 NA     #> # … with 29,633 more rows  # Baseline (ABLFL) examples:  input <- tribble(   ~STUDYID, ~USUBJID,  ~PARAMCD,     ~AVISIT,                  ~ADT, ~AVAL,    ~DTYPE,   \"TEST01\",  \"PAT01\", \"PARAM01\",  \"BASELINE\", as.Date(\"2021-04-27\"),  15.0,        NA,   \"TEST01\",  \"PAT01\", \"PARAM01\",  \"BASELINE\", as.Date(\"2021-04-25\"),  14.0,        NA,   \"TEST01\",  \"PAT01\", \"PARAM01\",  \"BASELINE\", as.Date(\"2021-04-23\"),  15.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM01\",    \"WEEK 1\", as.Date(\"2021-04-27\"),  10.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM01\",    \"WEEK 2\", as.Date(\"2021-04-30\"),  12.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM01\", \"SCREENING\", as.Date(\"2021-04-27\"),  15.0, \"AVERAGE\",   \"TEST01\",  \"PAT02\", \"PARAM01\",  \"BASELINE\", as.Date(\"2021-04-25\"),  14.0, \"AVERAGE\",   \"TEST01\",  \"PAT02\", \"PARAM01\",  \"BASELINE\", as.Date(\"2021-04-23\"),  15.0, \"AVERAGE\",   \"TEST01\",  \"PAT02\", \"PARAM01\",    \"WEEK 1\", as.Date(\"2021-04-27\"),  10.0, \"AVERAGE\",   \"TEST01\",  \"PAT02\", \"PARAM01\",    \"WEEK 2\", as.Date(\"2021-04-30\"),  12.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM02\", \"SCREENING\", as.Date(\"2021-04-27\"),  15.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM02\", \"SCREENING\", as.Date(\"2021-04-25\"),  14.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM02\", \"SCREENING\", as.Date(\"2021-04-23\"),  15.0,        NA,   \"TEST01\",  \"PAT01\", \"PARAM02\",  \"BASELINE\", as.Date(\"2021-04-27\"),  10.0, \"AVERAGE\",   \"TEST01\",  \"PAT01\", \"PARAM02\",    \"WEEK 2\", as.Date(\"2021-04-30\"),  12.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM02\", \"SCREENING\", as.Date(\"2021-04-27\"),  15.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM02\",  \"BASELINE\", as.Date(\"2021-04-25\"),  14.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM02\",    \"WEEK 1\", as.Date(\"2021-04-23\"),  15.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM02\",    \"WEEK 1\", as.Date(\"2021-04-27\"),  10.0,        NA,   \"TEST01\",  \"PAT02\", \"PARAM02\",  \"BASELINE\", as.Date(\"2021-04-30\"),  12.0,        NA )  # Last observation restrict_derivation(   input,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT),     new_var = ABLFL,     mode = \"last\"   ),   filter = AVISIT == \"BASELINE\" ) #> # A tibble: 20 x 8 #>    STUDYID USUBJID PARAMCD AVISIT    ADT         AVAL DTYPE   ABLFL #>    <chr>   <chr>   <chr>   <chr>     <date>     <dbl> <chr>   <chr> #>  1 TEST01  PAT01   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  2 TEST01  PAT01   PARAM01 BASELINE  2021-04-25    14 NA      NA    #>  3 TEST01  PAT01   PARAM01 BASELINE  2021-04-27    15 NA      Y     #>  4 TEST01  PAT01   PARAM02 BASELINE  2021-04-27    10 AVERAGE Y     #>  5 TEST01  PAT02   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  6 TEST01  PAT02   PARAM01 BASELINE  2021-04-25    14 AVERAGE Y     #>  7 TEST01  PAT02   PARAM02 BASELINE  2021-04-25    14 NA      NA    #>  8 TEST01  PAT02   PARAM02 BASELINE  2021-04-30    12 NA      Y     #>  9 TEST01  PAT01   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 10 TEST01  PAT01   PARAM01 WEEK 2    2021-04-30    12 NA      NA    #> 11 TEST01  PAT02   PARAM01 SCREENING 2021-04-27    15 AVERAGE NA    #> 12 TEST01  PAT02   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 13 TEST01  PAT02   PARAM01 WEEK 2    2021-04-30    12 AVERAGE NA    #> 14 TEST01  PAT01   PARAM02 SCREENING 2021-04-27    15 AVERAGE NA    #> 15 TEST01  PAT01   PARAM02 SCREENING 2021-04-25    14 AVERAGE NA    #> 16 TEST01  PAT01   PARAM02 SCREENING 2021-04-23    15 NA      NA    #> 17 TEST01  PAT01   PARAM02 WEEK 2    2021-04-30    12 NA      NA    #> 18 TEST01  PAT02   PARAM02 SCREENING 2021-04-27    15 NA      NA    #> 19 TEST01  PAT02   PARAM02 WEEK 1    2021-04-23    15 NA      NA    #> 20 TEST01  PAT02   PARAM02 WEEK 1    2021-04-27    10 NA      NA     # Worst observation - Direction = High restrict_derivation(   input,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(AVAL, ADT),     new_var = ABLFL,     mode = \"last\"   ),   filter = AVISIT == \"BASELINE\" ) #> # A tibble: 20 x 8 #>    STUDYID USUBJID PARAMCD AVISIT    ADT         AVAL DTYPE   ABLFL #>    <chr>   <chr>   <chr>   <chr>     <date>     <dbl> <chr>   <chr> #>  1 TEST01  PAT01   PARAM01 BASELINE  2021-04-25    14 NA      NA    #>  2 TEST01  PAT01   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  3 TEST01  PAT01   PARAM01 BASELINE  2021-04-27    15 NA      Y     #>  4 TEST01  PAT01   PARAM02 BASELINE  2021-04-27    10 AVERAGE Y     #>  5 TEST01  PAT02   PARAM01 BASELINE  2021-04-25    14 AVERAGE NA    #>  6 TEST01  PAT02   PARAM01 BASELINE  2021-04-23    15 AVERAGE Y     #>  7 TEST01  PAT02   PARAM02 BASELINE  2021-04-30    12 NA      NA    #>  8 TEST01  PAT02   PARAM02 BASELINE  2021-04-25    14 NA      Y     #>  9 TEST01  PAT01   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 10 TEST01  PAT01   PARAM01 WEEK 2    2021-04-30    12 NA      NA    #> 11 TEST01  PAT02   PARAM01 SCREENING 2021-04-27    15 AVERAGE NA    #> 12 TEST01  PAT02   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 13 TEST01  PAT02   PARAM01 WEEK 2    2021-04-30    12 AVERAGE NA    #> 14 TEST01  PAT01   PARAM02 SCREENING 2021-04-27    15 AVERAGE NA    #> 15 TEST01  PAT01   PARAM02 SCREENING 2021-04-25    14 AVERAGE NA    #> 16 TEST01  PAT01   PARAM02 SCREENING 2021-04-23    15 NA      NA    #> 17 TEST01  PAT01   PARAM02 WEEK 2    2021-04-30    12 NA      NA    #> 18 TEST01  PAT02   PARAM02 SCREENING 2021-04-27    15 NA      NA    #> 19 TEST01  PAT02   PARAM02 WEEK 1    2021-04-23    15 NA      NA    #> 20 TEST01  PAT02   PARAM02 WEEK 1    2021-04-27    10 NA      NA     # Worst observation - Direction = Lo restrict_derivation(   input,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(desc(AVAL), ADT),     new_var = ABLFL,     mode = \"last\"   ),   filter = AVISIT == \"BASELINE\" ) #> # A tibble: 20 x 8 #>    STUDYID USUBJID PARAMCD AVISIT    ADT         AVAL DTYPE   ABLFL #>    <chr>   <chr>   <chr>   <chr>     <date>     <dbl> <chr>   <chr> #>  1 TEST01  PAT01   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  2 TEST01  PAT01   PARAM01 BASELINE  2021-04-27    15 NA      NA    #>  3 TEST01  PAT01   PARAM01 BASELINE  2021-04-25    14 NA      Y     #>  4 TEST01  PAT01   PARAM02 BASELINE  2021-04-27    10 AVERAGE Y     #>  5 TEST01  PAT02   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  6 TEST01  PAT02   PARAM01 BASELINE  2021-04-25    14 AVERAGE Y     #>  7 TEST01  PAT02   PARAM02 BASELINE  2021-04-25    14 NA      NA    #>  8 TEST01  PAT02   PARAM02 BASELINE  2021-04-30    12 NA      Y     #>  9 TEST01  PAT01   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 10 TEST01  PAT01   PARAM01 WEEK 2    2021-04-30    12 NA      NA    #> 11 TEST01  PAT02   PARAM01 SCREENING 2021-04-27    15 AVERAGE NA    #> 12 TEST01  PAT02   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 13 TEST01  PAT02   PARAM01 WEEK 2    2021-04-30    12 AVERAGE NA    #> 14 TEST01  PAT01   PARAM02 SCREENING 2021-04-27    15 AVERAGE NA    #> 15 TEST01  PAT01   PARAM02 SCREENING 2021-04-25    14 AVERAGE NA    #> 16 TEST01  PAT01   PARAM02 SCREENING 2021-04-23    15 NA      NA    #> 17 TEST01  PAT01   PARAM02 WEEK 2    2021-04-30    12 NA      NA    #> 18 TEST01  PAT02   PARAM02 SCREENING 2021-04-27    15 NA      NA    #> 19 TEST01  PAT02   PARAM02 WEEK 1    2021-04-23    15 NA      NA    #> 20 TEST01  PAT02   PARAM02 WEEK 1    2021-04-27    10 NA      NA     # Average observation restrict_derivation(   input,   derivation = derive_var_extreme_flag,   args = params(     by_vars = exprs(USUBJID, PARAMCD),     order = exprs(ADT, desc(AVAL)),     new_var = ABLFL,     mode = \"last\"   ),   filter = AVISIT == \"BASELINE\" & DTYPE == \"AVERAGE\" ) #> # A tibble: 20 x 8 #>    STUDYID USUBJID PARAMCD AVISIT    ADT         AVAL DTYPE   ABLFL #>    <chr>   <chr>   <chr>   <chr>     <date>     <dbl> <chr>   <chr> #>  1 TEST01  PAT01   PARAM01 BASELINE  2021-04-23    15 AVERAGE Y     #>  2 TEST01  PAT01   PARAM02 BASELINE  2021-04-27    10 AVERAGE Y     #>  3 TEST01  PAT02   PARAM01 BASELINE  2021-04-23    15 AVERAGE NA    #>  4 TEST01  PAT02   PARAM01 BASELINE  2021-04-25    14 AVERAGE Y     #>  5 TEST01  PAT01   PARAM01 BASELINE  2021-04-27    15 NA      NA    #>  6 TEST01  PAT01   PARAM01 BASELINE  2021-04-25    14 NA      NA    #>  7 TEST01  PAT01   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #>  8 TEST01  PAT01   PARAM01 WEEK 2    2021-04-30    12 NA      NA    #>  9 TEST01  PAT02   PARAM01 SCREENING 2021-04-27    15 AVERAGE NA    #> 10 TEST01  PAT02   PARAM01 WEEK 1    2021-04-27    10 AVERAGE NA    #> 11 TEST01  PAT02   PARAM01 WEEK 2    2021-04-30    12 AVERAGE NA    #> 12 TEST01  PAT01   PARAM02 SCREENING 2021-04-27    15 AVERAGE NA    #> 13 TEST01  PAT01   PARAM02 SCREENING 2021-04-25    14 AVERAGE NA    #> 14 TEST01  PAT01   PARAM02 SCREENING 2021-04-23    15 NA      NA    #> 15 TEST01  PAT01   PARAM02 WEEK 2    2021-04-30    12 NA      NA    #> 16 TEST01  PAT02   PARAM02 SCREENING 2021-04-27    15 NA      NA    #> 17 TEST01  PAT02   PARAM02 BASELINE  2021-04-25    14 NA      NA    #> 18 TEST01  PAT02   PARAM02 WEEK 1    2021-04-23    15 NA      NA    #> 19 TEST01  PAT02   PARAM02 WEEK 1    2021-04-27    10 NA      NA    #> 20 TEST01  PAT02   PARAM02 BASELINE  2021-04-30    12 NA      NA     # OCCURDS Examples data(\"admiral_ae\")  # Most severe AE first occurrence per patient admiral_ae %>%   mutate(     TEMP_AESEVN =       as.integer(factor(AESEV, levels = c(\"SEVERE\", \"MODERATE\", \"MILD\")))   ) %>%   derive_var_extreme_flag(     new_var = AOCCIFL,     by_vars = exprs(USUBJID),     order = exprs(TEMP_AESEVN, AESTDY, AESEQ),     mode = \"first\"   ) %>%   arrange(USUBJID, AESTDY, AESEQ) %>%   select(USUBJID, AEDECOD, AESEV, AESTDY, AESEQ, AOCCIFL) #> # A tibble: 1,191 x 6 #>    USUBJID     AEDECOD                              AESEV   AESTDY AESEQ AOCCIFL #>    <chr>       <chr>                                <chr>    <dbl> <dbl> <chr>   #>  1 01-701-1015 APPLICATION SITE ERYTHEMA            MILD         2     1 Y       #>  2 01-701-1015 APPLICATION SITE PRURITUS            MILD         2     2 NA      #>  3 01-701-1015 DIARRHOEA                            MILD         8     3 NA      #>  4 01-701-1023 ERYTHEMA                             MILD         3     1 NA      #>  5 01-701-1023 ERYTHEMA                             MODERA…      3     2 Y       #>  6 01-701-1023 ERYTHEMA                             MILD         3     4 NA      #>  7 01-701-1023 ATRIOVENTRICULAR BLOCK SECOND DEGREE MILD        22     3 NA      #>  8 01-701-1028 APPLICATION SITE ERYTHEMA            MILD         3     1 Y       #>  9 01-701-1028 APPLICATION SITE PRURITUS            MILD        21     2 NA      #> 10 01-701-1034 APPLICATION SITE PRURITUS            MILD        58     1 Y       #> # … with 1,181 more rows  # Most severe AE first occurrence per patient per body system admiral_ae %>%   mutate(     TEMP_AESEVN =       as.integer(factor(AESEV, levels = c(\"SEVERE\", \"MODERATE\", \"MILD\")))   ) %>%   derive_var_extreme_flag(     new_var = AOCCSIFL,     by_vars = exprs(USUBJID, AEBODSYS),     order = exprs(TEMP_AESEVN, AESTDY, AESEQ),     mode = \"first\"   ) %>%   arrange(USUBJID, AESTDY, AESEQ) %>%   select(USUBJID, AEBODSYS, AESEV, AESTDY, AOCCSIFL) #> # A tibble: 1,191 x 5 #>    USUBJID     AEBODSYS                                  AESEV   AESTDY AOCCSIFL #>    <chr>       <chr>                                     <chr>    <dbl> <chr>    #>  1 01-701-1015 GENERAL DISORDERS AND ADMINISTRATION SIT… MILD         2 Y        #>  2 01-701-1015 GENERAL DISORDERS AND ADMINISTRATION SIT… MILD         2 NA       #>  3 01-701-1015 GASTROINTESTINAL DISORDERS                MILD         8 Y        #>  4 01-701-1023 SKIN AND SUBCUTANEOUS TISSUE DISORDERS    MILD         3 NA       #>  5 01-701-1023 SKIN AND SUBCUTANEOUS TISSUE DISORDERS    MODERA…      3 Y        #>  6 01-701-1023 SKIN AND SUBCUTANEOUS TISSUE DISORDERS    MILD         3 NA       #>  7 01-701-1023 CARDIAC DISORDERS                         MILD        22 Y        #>  8 01-701-1028 GENERAL DISORDERS AND ADMINISTRATION SIT… MILD         3 Y        #>  9 01-701-1028 GENERAL DISORDERS AND ADMINISTRATION SIT… MILD        21 NA       #> 10 01-701-1034 GENERAL DISORDERS AND ADMINISTRATION SIT… MILD        58 Y        #> # … with 1,181 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"Derive flag depends observations dataset. example, flagging events need confirmed second event.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"","code":"derive_var_joined_exist_flag(   dataset,   by_vars,   order,   new_var,   tmp_obs_nr_var = NULL,   join_vars,   join_type,   first_cond = NULL,   filter,   true_value = \"Y\",   false_value = NA_character_,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"dataset Input dataset variables specified by_vars join_vars parameter expected. by_vars variables specified variables used variables joining input dataset . order Order observations ordered specified order. new_var New variable specified variable added input dataset. tmp_obs_nr_var Temporary observation number specified variable added input dataset set observation number respect order. group (by_vars) observation number starts 1. variable can used conditions (filter, first_cond). included output dataset. can used flag consecutive observations last observation (see last example ). join_vars Variables keep joined dataset variables needed observations specified parameter. specified variables added joined dataset suffix \".join\". example flag observations AVALC == \"Y\" AVALC == \"Y\" least one subsequent visit join_vars = exprs(AVALC, AVISITN) filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join specified. *.join variables included output dataset. join_type Observations keep joining argument determines joined observations kept respect original observation. example, join_type = \"\" specified observations original observations kept. example confirmed response BOR oncology setting confirmed deterioration questionnaires confirmatory assessment must assessment flagged. Thus join_type = \"\" used. Whereas, sometimes might allow confirmatory observations occur prior observation flagged. example, flag AEs occurring seven days COVID AE. Thus join_type = \"\" used. Permitted Values: \"\", \"\", \"\" first_cond Condition selecting range data argument specified, observations restricted first observation specified condition fulfilled. condition fulfilled observations, observations considered, .e., observation flagged. parameter specified filter contains summary functions apply observations confirmation assessment. example see third example . filter Condition selecting observations filter applied joined dataset flagging confirmed observations. condition can include summary functions. joined dataset grouped original observations. .e., summary function applied observations confirmation observation. example, filter = AVALC == \"CR\" & (AVALC.join %% c(\"CR\", \"NE\")) & count_vals(var = AVALC.join, val = \"NE\") <= 1 selects observations response \"CR\" observations confirmation observation response \"CR\" \"NE\" one \"NE\". true_value Value new_var flagged observations Default: \"Y\" false_value Value new_var observations flagged Default: NA_character_ check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"input dataset variable specified new_var added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"example usage might flagging patient received two required medications within certain timeframe . oncology setting, example, function used flag response value can confirmed assessment. commonly used endpoints best overall response. following steps performed produce output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step-","dir":"Reference","previous_headings":"","what":"Step 1","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"input dataset joined variables specified by_vars. right hand side join variables specified join_vars kept. suffix \".join\" added variables. example, by_vars = USUBJID, join_vars = exprs(AVISITN, AVALC) input dataset   joined dataset ","code":"# A tibble: 2 x 4 USUBJID AVISITN AVALC  AVAL <chr>     <dbl> <chr> <dbl> 1             1 Y         1 1             2 N         0 A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            1 Y 1             1 Y         1            2 N 1             2 N         0            1 Y 1             2 N         0            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step--1","dir":"Reference","previous_headings":"","what":"Step 2","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"joined dataset restricted observations respect join_type order. dataset example previous step join_type = \"\" order = exprs(AVISITN) restricted ","code":"A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step--2","dir":"Reference","previous_headings":"","what":"Step 3","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"first_cond specified, observation input dataset joined dataset restricted observations first observation first_cond fulfilled (observation fulfilling condition included). observation input dataset condition fulfilled, observation removed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step--3","dir":"Reference","previous_headings":"","what":"Step 4","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"joined dataset grouped observations input dataset restricted observations fulfilling condition specified filter.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step--4","dir":"Reference","previous_headings":"","what":"Step 5","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"first observation group selected","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"step--5","dir":"Reference","previous_headings":"","what":"Step 6","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"variable specified new_var added input dataset. set true_value observations selected previous step. observations set false_value.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_joined_exist_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derives a Flag Based on an Existing Flag — derive_var_joined_exist_flag","text":"","code":"library(tibble) library(admiral)  # flag observations with a duration longer than 30 and # at, after, or up to 7 days before a COVID AE (ACOVFL == \"Y\") adae <- tribble(   ~USUBJID, ~ADY, ~ACOVFL, ~ADURN,   \"1\",        10, \"N\",          1,   \"1\",        21, \"N\",         50,   \"1\",        23, \"Y\",         14,   \"1\",        32, \"N\",         31,   \"1\",        42, \"N\",         20,   \"2\",        11, \"Y\",         13,   \"2\",        23, \"N\",          2,   \"3\",        13, \"Y\",         12,   \"4\",        14, \"N\",         32,   \"4\",        21, \"N\",         41 )  derive_var_joined_exist_flag(   adae,   new_var = ALCOVFL,   by_vars = exprs(USUBJID),   join_vars = exprs(ACOVFL, ADY),   join_type = \"all\",   order = exprs(ADY),   filter = ADURN > 30 & ACOVFL.join == \"Y\" & ADY >= ADY.join - 7 ) #> # A tibble: 10 x 5 #>    USUBJID   ADY ACOVFL ADURN ALCOVFL #>    <chr>   <dbl> <chr>  <dbl> <chr>   #>  1 1          10 N          1 NA      #>  2 1          21 N         50 Y       #>  3 1          23 Y         14 NA      #>  4 1          32 N         31 Y       #>  5 1          42 N         20 NA      #>  6 2          11 Y         13 NA      #>  7 2          23 N          2 NA      #>  8 3          13 Y         12 NA      #>  9 4          14 N         32 NA      #> 10 4          21 N         41 NA       # flag observations with AVALC == \"Y\" and AVALC == \"Y\" at one subsequent visit data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"Y\",   \"1\",      2,        \"N\",   \"1\",      3,        \"Y\",   \"1\",      4,        \"N\",   \"2\",      1,        \"Y\",   \"2\",      2,        \"N\",   \"3\",      1,        \"Y\",   \"4\",      1,        \"N\",   \"4\",      2,        \"N\", )  derive_var_joined_exist_flag(   data,   by_vars = exprs(USUBJID),   new_var = CONFFL,   join_vars = exprs(AVALC, AVISITN),   join_type = \"after\",   order = exprs(AVISITN),   filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join ) #> # A tibble: 9 x 4 #>   USUBJID AVISITN AVALC CONFFL #>   <chr>     <dbl> <chr> <chr>  #> 1 1             1 Y     Y      #> 2 1             2 N     NA     #> 3 1             3 Y     NA     #> 4 1             4 N     NA     #> 5 2             1 Y     NA     #> 6 2             2 N     NA     #> 7 3             1 Y     NA     #> 8 4             1 N     NA     #> 9 4             2 N     NA      # select observations with AVALC == \"CR\", AVALC == \"CR\" at a subsequent visit, # only \"CR\" or \"NE\" in between, and at most one \"NE\" in between data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"NE\",   \"1\",      4,        \"CR\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"CR\",   \"2\",      2,        \"PR\",   \"2\",      3,        \"CR\",   \"3\",      1,        \"CR\",   \"4\",      1,        \"CR\",   \"4\",      2,        \"NE\",   \"4\",      3,        \"NE\",   \"4\",      4,        \"CR\",   \"4\",      5,        \"PR\" )  derive_var_joined_exist_flag(   data,   by_vars = exprs(USUBJID),   join_vars = exprs(AVALC),   join_type = \"after\",   order = exprs(AVISITN),   new_var = CONFFL,   first_cond = AVALC.join == \"CR\",   filter = AVALC == \"CR\" & all(AVALC.join %in% c(\"CR\", \"NE\")) &     count_vals(var = AVALC.join, val = \"NE\") <= 1 ) #> # A tibble: 14 x 4 #>    USUBJID AVISITN AVALC CONFFL #>    <chr>     <dbl> <chr> <chr>  #>  1 1             1 PR    NA     #>  2 1             2 CR    Y      #>  3 1             3 NE    NA     #>  4 1             4 CR    NA     #>  5 1             5 NE    NA     #>  6 2             1 CR    NA     #>  7 2             2 PR    NA     #>  8 2             3 CR    NA     #>  9 3             1 CR    NA     #> 10 4             1 CR    NA     #> 11 4             2 NE    NA     #> 12 4             3 NE    NA     #> 13 4             4 CR    NA     #> 14 4             5 PR    NA      # flag observations with AVALC == \"PR\", AVALC == \"CR\" or AVALC == \"PR\" # at a subsequent visit at least 20 days later, only \"CR\", \"PR\", or \"NE\" # in between, at most one \"NE\" in between, and \"CR\" is not followed by \"PR\" data <- tribble(   ~USUBJID, ~ADY, ~AVALC,   \"1\",         6, \"PR\",   \"1\",        12, \"CR\",   \"1\",        24, \"NE\",   \"1\",        32, \"CR\",   \"1\",        48, \"PR\",   \"2\",         3, \"PR\",   \"2\",        21, \"CR\",   \"2\",        33, \"PR\",   \"3\",        11, \"PR\",   \"4\",         7, \"PR\",   \"4\",        12, \"NE\",   \"4\",        24, \"NE\",   \"4\",        32, \"PR\",   \"4\",        55, \"PR\" )  derive_var_joined_exist_flag(   data,   by_vars = exprs(USUBJID),   join_vars = exprs(AVALC, ADY),   join_type = \"after\",   order = exprs(ADY),   new_var = CONFFL,   first_cond = AVALC.join %in% c(\"CR\", \"PR\") & ADY.join - ADY >= 20,   filter = AVALC == \"PR\" &     all(AVALC.join %in% c(\"CR\", \"PR\", \"NE\")) &     count_vals(var = AVALC.join, val = \"NE\") <= 1 &     (       min_cond(var = ADY.join, cond = AVALC.join == \"CR\") >         max_cond(var = ADY.join, cond = AVALC.join == \"PR\") |         count_vals(var = AVALC.join, val = \"CR\") == 0     ) ) #> # A tibble: 14 x 4 #>    USUBJID   ADY AVALC CONFFL #>    <chr>   <dbl> <chr> <chr>  #>  1 1           6 PR    NA     #>  2 1          12 CR    NA     #>  3 1          24 NE    NA     #>  4 1          32 CR    NA     #>  5 1          48 PR    NA     #>  6 2           3 PR    NA     #>  7 2          21 CR    NA     #>  8 2          33 PR    NA     #>  9 3          11 PR    NA     #> 10 4           7 PR    NA     #> 11 4          12 NE    NA     #> 12 4          24 NE    NA     #> 13 4          32 PR    Y      #> 14 4          55 PR    NA      # flag observations with CRIT1FL == \"Y\" at two consecutive visits or at the last visit data <- tribble(   ~USUBJID, ~AVISITN, ~CRIT1FL,   \"1\",      1,        \"Y\",   \"1\",      2,        \"N\",   \"1\",      3,        \"Y\",   \"1\",      5,        \"N\",   \"2\",      1,        \"Y\",   \"2\",      3,        \"Y\",   \"2\",      5,        \"N\",   \"3\",      1,        \"Y\",   \"4\",      1,        \"Y\",   \"4\",      2,        \"N\", )  derive_var_joined_exist_flag(   data,   by_vars = exprs(USUBJID),   new_var = CONFFL,   tmp_obs_nr_var = tmp_obs_nr,   join_vars = exprs(CRIT1FL),   join_type = \"all\",   order = exprs(AVISITN),   filter = CRIT1FL == \"Y\" & CRIT1FL.join == \"Y\" &     (tmp_obs_nr + 1 == tmp_obs_nr.join | tmp_obs_nr == max(tmp_obs_nr.join)) ) #> # A tibble: 10 x 4 #>    USUBJID AVISITN CRIT1FL CONFFL #>    <chr>     <dbl> <chr>   <chr>  #>  1 1             1 Y       NA     #>  2 1             2 N       NA     #>  3 1             3 Y       NA     #>  4 1             5 N       NA     #>  5 2             1 Y       Y      #>  6 2             3 Y       NA     #>  7 2             5 N       NA     #>  8 3             1 Y       Y      #>  9 4             1 Y       NA     #> 10 4             2 N       NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Last Dose Amount — derive_var_last_dose_amt","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"Add variable dose amount last dose input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"","code":"derive_var_last_dose_amt(   dataset,   dataset_ex,   filter_ex = NULL,   by_vars = exprs(STUDYID, USUBJID),   dose_id = exprs(),   dose_date,   analysis_date,   single_dose_condition = (EXDOSFRQ == \"ONCE\"),   new_var,   dose_var = EXDOSE,   traceability_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"dataset Input dataset. variables specified by_vars analysis_date parameters expected. dataset_ex Input EX dataset. variables specified by_vars, dose_date, new_vars parameters, source variables traceability_vars parameter expected. filter_ex Filtering condition applied EX dataset. example, can used filter valid dose. Defaults NULL. by_vars Variables join (created rlang::exprs). dose_id Variables identify unique dose (created rlang::exprs). Defaults empty exprs(). dose_date EX dose date variable. date date-time object expected. analysis_date analysis date variable. date date-time object expected. single_dose_condition condition checking dataset_ex single dose. error issued condition true. Defaults (EXDOSFRQ == \"\"). new_var new variable added dataset. dose_var EX source dose amount variable. Defaults EXDOSE. traceability_vars named list returned exprs() listing traceability variables, e.g. exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ). left-hand side (names list elements) gives names traceability variables returned dataset. right-hand side (values list elements) gives values traceability variables returned dataset. can either strings symbols referring existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"Input dataset additional column new_var.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"last dose amount derived dose amount maximum dose_date lower equal analysis_date per by_vars observation dataset. dose information aggregated (.e. dosing frequency \"\" period defined start end date) function create_single_dose_dataset() can used generate single doses aggregate dose information satisfy single_dose_condition.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_amt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Last Dose Amount — derive_var_last_dose_amt","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(ex_single)  ex_single <- derive_vars_dtm(   head(ex_single, 100),   dtc = EXENDTC,   new_vars_prefix = \"EXEN\",   flag_imputation = \"none\" )  adae <- admiral_ae %>%   head(100) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\"   )  adae %>%   derive_var_last_dose_amt(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXENDTM),     dose_date = EXENDTM,     analysis_date = ASTDTM,     new_var = LDOSE,     dose_var = EXDOSE   ) %>%   select(STUDYID, USUBJID, AESEQ, AESTDTC, LDOSE) #> # A tibble: 100 x 5 #>    STUDYID      USUBJID     AESEQ AESTDTC    LDOSE #>    <chr>        <chr>       <dbl> <chr>      <dbl> #>  1 CDISCPILOT01 01-701-1015     1 2014-01-03    NA #>  2 CDISCPILOT01 01-701-1015     2 2014-01-03    NA #>  3 CDISCPILOT01 01-701-1015     3 2014-01-09    NA #>  4 CDISCPILOT01 01-701-1023     3 2012-08-26     0 #>  5 CDISCPILOT01 01-701-1023     1 2012-08-07     0 #>  6 CDISCPILOT01 01-701-1023     2 2012-08-07     0 #>  7 CDISCPILOT01 01-701-1023     4 2012-08-07     0 #>  8 CDISCPILOT01 01-701-1028     1 2013-07-21    NA #>  9 CDISCPILOT01 01-701-1028     2 2013-08-08    NA #> 10 CDISCPILOT01 01-701-1034     1 2014-08-27    NA #> # … with 90 more rows  # or with traceability variables adae %>%   derive_var_last_dose_amt(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXENDTM),     dose_date = EXENDTM,     analysis_date = ASTDTM,     new_var = LDOSE,     dose_var = EXDOSE,     traceability_vars = exprs(       LDOSEDOM = \"EX\",       LDOSESEQ = EXSEQ,       LDOSEVAR = \"EXDOSE\"     )   ) %>%   select(STUDYID, USUBJID, AESEQ, AESTDTC, LDOSEDOM, LDOSESEQ, LDOSEVAR, LDOSE) #> # A tibble: 100 x 8 #>    STUDYID      USUBJID     AESEQ AESTDTC    LDOSEDOM LDOSESEQ LDOSEVAR LDOSE #>    <chr>        <chr>       <dbl> <chr>      <chr>       <int> <chr>    <dbl> #>  1 CDISCPILOT01 01-701-1015     1 2014-01-03 NA             NA NA          NA #>  2 CDISCPILOT01 01-701-1015     2 2014-01-03 NA             NA NA          NA #>  3 CDISCPILOT01 01-701-1015     3 2014-01-09 NA             NA NA          NA #>  4 CDISCPILOT01 01-701-1023     3 2012-08-26 EX              7 EXDOSE       0 #>  5 CDISCPILOT01 01-701-1023     1 2012-08-07 EX              3 EXDOSE       0 #>  6 CDISCPILOT01 01-701-1023     2 2012-08-07 EX              3 EXDOSE       0 #>  7 CDISCPILOT01 01-701-1023     4 2012-08-07 EX              3 EXDOSE       0 #>  8 CDISCPILOT01 01-701-1028     1 2013-07-21 NA             NA NA          NA #>  9 CDISCPILOT01 01-701-1028     2 2013-08-08 NA             NA NA          NA #> 10 CDISCPILOT01 01-701-1034     1 2014-08-27 NA             NA NA          NA #> # … with 90 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Last Dose Date-Time — derive_var_last_dose_date","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"Add variable dose date datetime last dose input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"","code":"derive_var_last_dose_date(   dataset,   dataset_ex,   filter_ex = NULL,   by_vars = exprs(STUDYID, USUBJID),   dose_id = exprs(),   dose_date,   analysis_date,   single_dose_condition = (EXDOSFRQ == \"ONCE\"),   new_var,   output_datetime = TRUE,   traceability_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"dataset Input dataset. variables specified by_vars analysis_date parameters expected. dataset_ex Input EX dataset. variables specified by_vars, dose_date, new_vars parameters, source variables traceability_vars parameter expected. filter_ex Filtering condition applied EX dataset. example, can used filter valid dose. Defaults NULL. by_vars Variables join (created rlang::exprs). dose_id Variables identify unique dose (created rlang::exprs). Defaults empty exprs(). dose_date EX dose date variable. date date-time object expected. analysis_date analysis date variable. date date-time object expected. single_dose_condition condition checking dataset_ex single dose. error issued condition true. Defaults (EXDOSFRQ == \"\"). new_var new date datetime variable added dataset. output_datetime Display new_var datetime date . Defaults TRUE. traceability_vars named list returned exprs() listing traceability variables, e.g. exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ). left-hand side (names list elements) gives names traceability variables returned dataset. right-hand side (values list elements) gives values traceability variables returned dataset. can either strings symbols referring existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"Input dataset additional column new_var.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"last dose date derived maximum dose date dose_date lower equal analysis_date per by_vars observation dataset. output_datetime TRUE time missing, last dose date time imputed 00:00:00. However, date missing, imputation done. dose information aggregated (.e. dosing frequency \"\" period defined start end date) function create_single_dose_dataset() can used generate single doses aggregate dose information satisfy single_dose_condition.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Last Dose Date-Time — derive_var_last_dose_date","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(ex_single)  ex_single <- derive_vars_dtm(   head(ex_single, 100),   dtc = EXENDTC,   new_vars_prefix = \"EXEN\",   flag_imputation = \"none\" )  adae <- admiral_ae %>%   head(100) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\"   )  adae %>%   derive_var_last_dose_date(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXENDTM),     dose_date = EXENDTM,     analysis_date = ASTDTM,     new_var = LDOSEDTM,     traceability_vars = exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ, LDOSEVAR = \"EXDOSE\")   ) %>%   select(STUDYID, USUBJID, AESEQ, AESTDTC, LDOSEDOM, LDOSESEQ, LDOSEVAR, LDOSEDTM) #> # A tibble: 100 x 8 #>    STUDYID  USUBJID AESEQ AESTDTC LDOSEDOM LDOSESEQ LDOSEVAR LDOSEDTM            #>    <chr>    <chr>   <dbl> <chr>   <chr>       <int> <chr>    <dttm>              #>  1 CDISCPI… 01-701…     1 2014-0… NA             NA NA       NA                  #>  2 CDISCPI… 01-701…     2 2014-0… NA             NA NA       NA                  #>  3 CDISCPI… 01-701…     3 2014-0… NA             NA NA       NA                  #>  4 CDISCPI… 01-701…     3 2012-0… EX              7 EXDOSE   2012-08-11 00:00:00 #>  5 CDISCPI… 01-701…     1 2012-0… EX              3 EXDOSE   2012-08-07 00:00:00 #>  6 CDISCPI… 01-701…     2 2012-0… EX              3 EXDOSE   2012-08-07 00:00:00 #>  7 CDISCPI… 01-701…     4 2012-0… EX              3 EXDOSE   2012-08-07 00:00:00 #>  8 CDISCPI… 01-701…     1 2013-0… NA             NA NA       NA                  #>  9 CDISCPI… 01-701…     2 2013-0… NA             NA NA       NA                  #> 10 CDISCPI… 01-701…     1 2014-0… NA             NA NA       NA                  #> # … with 90 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"Add variable user-defined dose grouping last dose input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"","code":"derive_var_last_dose_grp(   dataset,   dataset_ex,   filter_ex = NULL,   by_vars = exprs(STUDYID, USUBJID),   dose_id = exprs(),   dose_date,   analysis_date,   single_dose_condition = (EXDOSFRQ == \"ONCE\"),   new_var,   grp_brks,   grp_lbls,   include_lowest = TRUE,   right = TRUE,   dose_var = EXDOSE,   traceability_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"dataset Input dataset. variables specified by_vars analysis_date parameters expected. dataset_ex Input EX dataset. variables specified by_vars, dose_date, new_vars parameters, source variables traceability_vars parameter expected. filter_ex Filtering condition applied EX dataset. example, can used filter valid dose. Defaults NULL. by_vars Variables join (created rlang::exprs). dose_id Variables identify unique dose (created rlang::exprs). Defaults empty exprs(). dose_date EX dose date variable. date date-time object expected. analysis_date analysis date variable. date date-time object expected. single_dose_condition condition checking dataset_ex single dose. error issued condition true. Defaults (EXDOSFRQ == \"\"). new_var output variable defined user. grp_brks User supplied breaks apply groups. Refer breaks parameter cut() details. grp_lbls User supplied labels apply groups. Refer labels parameter cut() details. include_lowest logical, indicating value equal lowest (highest, right = FALSE) ‘breaks’ value included. Refer include.lowest parameter cut() details. right Logical, indicating intervals closed right (open left) vice versa. Refer right parameter cut() details. dose_var source dose amount variable. Defaults EXDOSE. traceability_vars named list returned exprs() listing traceability variables, e.g. exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ). left-hand side (names list elements) gives names traceability variables returned dataset. right-hand side (values list elements) gives values traceability variables returned dataset. can either strings symbols referring existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"Input dataset additional column new_var.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"Last dose dose maximum dose_date lower equal analysis_date per by_vars observation dataset. last dose group derived user-defined grouping, groups dose_var specified grp_brks, returns grp_lbls values new_var. dose information aggregated (.e. dosing frequency \"\" period defined start end date) function create_single_dose_dataset() can used generate single doses aggregate dose information satisfy single_dose_condition.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_last_dose_grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Last Dose with User-Defined Groupings — derive_var_last_dose_grp","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(ex_single)  ex_single <- derive_vars_dtm(   head(ex_single, 100),   dtc = EXSTDTC,   new_vars_prefix = \"EXST\",   flag_imputation = \"none\" )  adae <- admiral_ae %>%   head(100) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\"   )  adae %>%   derive_var_last_dose_grp(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXSTDTM),     by_vars = exprs(STUDYID, USUBJID),     dose_date = EXSTDTM,     new_var = LDGRP,     grp_brks = c(0, 20, 40, 60),     grp_lbls = c(\"Low\", \"Medium\", \"High\"),     include_lowest = TRUE,     right = TRUE,     dose_var = EXDOSE,     analysis_date = ASTDTM,     traceability_vars = exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ, LDOSEVAR = \"EXENDTC\")   ) %>%   select(USUBJID, LDGRP, LDOSEDOM, LDOSESEQ, LDOSEVAR) #> # A tibble: 100 x 5 #>    USUBJID     LDGRP LDOSEDOM LDOSESEQ LDOSEVAR #>    <chr>       <chr> <chr>       <int> <chr>    #>  1 01-701-1015 NA    NA             NA NA       #>  2 01-701-1015 NA    NA             NA NA       #>  3 01-701-1015 NA    NA             NA NA       #>  4 01-701-1023 Low   EX              7 EXENDTC  #>  5 01-701-1023 Low   EX              3 EXENDTC  #>  6 01-701-1023 Low   EX              3 EXENDTC  #>  7 01-701-1023 Low   EX              3 EXENDTC  #>  8 01-701-1028 NA    NA             NA NA       #>  9 01-701-1028 NA    NA             NA NA       #> 10 01-701-1034 NA    NA             NA NA       #> # … with 90 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a Categorization Variable — derive_var_merged_cat","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"Merge categorization variable dataset input dataset. observations merge can selected condition /selecting first last observation group.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"","code":"derive_var_merged_cat(   dataset,   dataset_add,   by_vars,   order = NULL,   new_var,   source_var,   cat_fun,   filter_add = NULL,   mode = NULL,   missing_value = NA_character_ )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars, source_var, order argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL new_var New variable specified variable added additional dataset set categorized values, .e., cat_fun(<source variable>). source_var Source variable cat_fun Categorization function function must specified argument expects values source variable input returns categorized values. filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL missing_value Values used missing information new variable set specified value groups without observations additional dataset. Default: NA_character_","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"output dataset contains observations variables input dataset additionally variable specified new_var derived additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"additional dataset restricted observations matching filter_add condition. categorization variable added additional dataset. order specified, group first last observation (depending mode) selected. categorization variable merged input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge a Categorization Variable — derive_var_merged_cat","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) data(\"admiral_dm\") data(\"admiral_vs\")  wgt_cat <- function(wgt) {   case_when(     wgt < 50 ~ \"low\",     wgt > 90 ~ \"high\",     TRUE ~ \"normal\"   ) }  derive_var_merged_cat(   admiral_dm,   dataset_add = admiral_vs,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(VSDTC, VSSEQ),   filter_add = VSTESTCD == \"WEIGHT\" & substr(VISIT, 1, 9) == \"SCREENING\",   new_var = WGTBLCAT,   source_var = VSSTRESN,   cat_fun = wgt_cat,   mode = \"last\" ) %>%   select(STUDYID, USUBJID, AGE, AGEU, WGTBLCAT) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID       AGE AGEU  WGTBLCAT #>    <chr>        <chr>       <dbl> <chr> <chr>    #>  1 CDISCPILOT01 01-701-1015    63 YEARS normal   #>  2 CDISCPILOT01 01-701-1023    64 YEARS normal   #>  3 CDISCPILOT01 01-701-1028    71 YEARS high     #>  4 CDISCPILOT01 01-701-1033    74 YEARS normal   #>  5 CDISCPILOT01 01-701-1034    77 YEARS normal   #>  6 CDISCPILOT01 01-701-1047    85 YEARS normal   #>  7 CDISCPILOT01 01-701-1057    59 YEARS NA       #>  8 CDISCPILOT01 01-701-1097    68 YEARS normal   #>  9 CDISCPILOT01 01-701-1111    81 YEARS normal   #> 10 CDISCPILOT01 01-701-1115    84 YEARS normal   #> # … with 296 more rows  # defining a value for missing VS data derive_var_merged_cat(   admiral_dm,   dataset_add = admiral_vs,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(VSDTC, VSSEQ),   filter_add = VSTESTCD == \"WEIGHT\" & substr(VISIT, 1, 9) == \"SCREENING\",   new_var = WGTBLCAT,   source_var = VSSTRESN,   cat_fun = wgt_cat,   mode = \"last\",   missing_value = \"MISSING\" ) %>%   select(STUDYID, USUBJID, AGE, AGEU, WGTBLCAT) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID       AGE AGEU  WGTBLCAT #>    <chr>        <chr>       <dbl> <chr> <chr>    #>  1 CDISCPILOT01 01-701-1015    63 YEARS normal   #>  2 CDISCPILOT01 01-701-1023    64 YEARS normal   #>  3 CDISCPILOT01 01-701-1028    71 YEARS high     #>  4 CDISCPILOT01 01-701-1033    74 YEARS normal   #>  5 CDISCPILOT01 01-701-1034    77 YEARS normal   #>  6 CDISCPILOT01 01-701-1047    85 YEARS normal   #>  7 CDISCPILOT01 01-701-1057    59 YEARS MISSING  #>  8 CDISCPILOT01 01-701-1097    68 YEARS normal   #>  9 CDISCPILOT01 01-701-1111    81 YEARS normal   #> 10 CDISCPILOT01 01-701-1115    84 YEARS normal   #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a Character Variable — derive_var_merged_character","title":"Merge a Character Variable — derive_var_merged_character","text":"Merge character variable dataset input dataset. observations merge can selected condition /selecting first last observation group.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a Character Variable — derive_var_merged_character","text":"","code":"derive_var_merged_character(   dataset,   dataset_add,   by_vars,   order = NULL,   new_var,   source_var,   case = NULL,   filter_add = NULL,   mode = NULL,   missing_value = NA_character_ )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a Character Variable — derive_var_merged_character","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars, source_var, order argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL new_var New variable specified variable added additional dataset set transformed value respect case argument. source_var Source variable case Change case Changes case values new variable. Default: NULL Permitted Values: NULL, \"lower\", \"upper\", \"title\" filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL missing_value Values used missing information new variable set specified value groups without observations additional dataset. Default: NA_character_ Permitted Value: character scalar","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a Character Variable — derive_var_merged_character","text":"output dataset contains observations variables input dataset additionally variable specified new_var derived additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge a Character Variable — derive_var_merged_character","text":"additional dataset restricted observations matching filter_add condition. (transformed) character variable added additional dataset. order specified, group first last observation (depending mode) selected. character variable merged input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge a Character Variable — derive_var_merged_character","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) data(\"admiral_dm\") data(\"admiral_ds\")  derive_var_merged_character(   admiral_dm,   dataset_add = admiral_ds,   by_vars = exprs(STUDYID, USUBJID),   new_var = DISPSTAT,   filter_add = DSCAT == \"DISPOSITION EVENT\",   source_var = DSDECOD,   case = \"title\" ) %>%   select(STUDYID, USUBJID, AGE, AGEU, DISPSTAT) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID       AGE AGEU  DISPSTAT                    #>    <chr>        <chr>       <dbl> <chr> <chr>                       #>  1 CDISCPILOT01 01-701-1015    63 YEARS Completed                   #>  2 CDISCPILOT01 01-701-1023    64 YEARS Adverse Event               #>  3 CDISCPILOT01 01-701-1028    71 YEARS Completed                   #>  4 CDISCPILOT01 01-701-1033    74 YEARS Study Terminated By Sponsor #>  5 CDISCPILOT01 01-701-1034    77 YEARS Completed                   #>  6 CDISCPILOT01 01-701-1047    85 YEARS Adverse Event               #>  7 CDISCPILOT01 01-701-1057    59 YEARS Screen Failure              #>  8 CDISCPILOT01 01-701-1097    68 YEARS Completed                   #>  9 CDISCPILOT01 01-701-1111    81 YEARS Adverse Event               #> 10 CDISCPILOT01 01-701-1115    84 YEARS Adverse Event               #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge an Existence Flag — derive_var_merged_exist_flag","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"Adds flag variable input dataset indicates exists least one observation another dataset fulfilling certain condition.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"","code":"derive_var_merged_exist_flag(   dataset,   dataset_add,   by_vars,   new_var,   condition,   true_value = \"Y\",   false_value = NA_character_,   missing_value = NA_character_,   filter_add = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars argument expected. by_vars Grouping variables Permitted Values: list variables new_var New variable specified variable added input dataset. condition Condition condition evaluated additional dataset (dataset_add). groups evaluates TRUE least new variable set true value (true_value). groups evaluates FALSE NA observations new variable set false value (false_value). new variable set missing value (missing_value) groups present additional dataset. true_value True value Default: \"Y\" false_value False value Default: NA_character_ missing_value Values used missing information new variable set specified value groups without observations additional dataset. Default: NA_character_ Permitted Value: character scalar filter_add Filter additional data observations fulfilling specified condition taken account flagging. argument specified, observations considered. Permitted Values: condition","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"output dataset contains observations variables input dataset additionally variable specified new_var derived additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"additional dataset restricted observations matching filter_add condition. new variable added input dataset set true value (true_value) group least one observation exists (restricted) additional dataset condition evaluates TRUE. set false value (false_value) group least one observation exists observations condition evaluates FALSE NA. Otherwise, set missing value (missing_value).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_exist_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge an Existence Flag — derive_var_merged_exist_flag","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) data(\"admiral_dm\") data(\"admiral_ae\") derive_var_merged_exist_flag(   admiral_dm,   dataset_add = admiral_ae,   by_vars = exprs(STUDYID, USUBJID),   new_var = AERELFL,   condition = AEREL == \"PROBABLE\" ) %>%   select(STUDYID, USUBJID, AGE, AGEU, AERELFL) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID       AGE AGEU  AERELFL #>    <chr>        <chr>       <dbl> <chr> <chr>   #>  1 CDISCPILOT01 01-701-1015    63 YEARS Y       #>  2 CDISCPILOT01 01-701-1023    64 YEARS Y       #>  3 CDISCPILOT01 01-701-1028    71 YEARS Y       #>  4 CDISCPILOT01 01-701-1033    74 YEARS NA      #>  5 CDISCPILOT01 01-701-1034    77 YEARS Y       #>  6 CDISCPILOT01 01-701-1047    85 YEARS NA      #>  7 CDISCPILOT01 01-701-1057    59 YEARS NA      #>  8 CDISCPILOT01 01-701-1097    68 YEARS Y       #>  9 CDISCPILOT01 01-701-1111    81 YEARS NA      #> 10 CDISCPILOT01 01-701-1115    84 YEARS Y       #> # … with 296 more rows  data(\"admiral_vs\") derive_var_merged_exist_flag(   admiral_dm,   dataset_add = admiral_vs,   by_vars = exprs(STUDYID, USUBJID),   filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",   new_var = WTBLHIFL,   condition = VSSTRESN > 90,   false_value = \"N\",   missing_value = \"M\" ) %>%   select(STUDYID, USUBJID, AGE, AGEU, WTBLHIFL) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID       AGE AGEU  WTBLHIFL #>    <chr>        <chr>       <dbl> <chr> <chr>    #>  1 CDISCPILOT01 01-701-1015    63 YEARS N        #>  2 CDISCPILOT01 01-701-1023    64 YEARS N        #>  3 CDISCPILOT01 01-701-1028    71 YEARS Y        #>  4 CDISCPILOT01 01-701-1033    74 YEARS N        #>  5 CDISCPILOT01 01-701-1034    77 YEARS N        #>  6 CDISCPILOT01 01-701-1047    85 YEARS N        #>  7 CDISCPILOT01 01-701-1057    59 YEARS M        #>  8 CDISCPILOT01 01-701-1097    68 YEARS N        #>  9 CDISCPILOT01 01-701-1111    81 YEARS N        #> 10 CDISCPILOT01 01-701-1115    84 YEARS N        #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a Summary Variable — derive_var_merged_summary","title":"Merge a Summary Variable — derive_var_merged_summary","text":"Merge summary variable dataset input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a Summary Variable — derive_var_merged_summary","text":"","code":"derive_var_merged_summary(   dataset,   dataset_add,   by_vars,   new_var,   filter_add = NULL,   analysis_var,   summary_fun )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a Summary Variable — derive_var_merged_summary","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars analysis_var arguments expected. by_vars Grouping variables values analysis_var summarized specified variables. summarized values merged input dataset (dataset) specified variables. Permitted Values: list variables created exprs() new_var Variable add specified variable added input dataset (dataset) set summarized values. filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account summarizing. argument specified, observations considered. Permitted Values: condition analysis_var Analysis variable values specified variable summarized function specified summary_fun. summary_fun Summary function specified function takes input analysis_var performs calculation. can include built-functions well user defined functions, example mean function(x) mean(x, na.rm = TRUE).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a Summary Variable — derive_var_merged_summary","text":"output dataset contains observations variables input dataset additionally variable specified new_var.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge a Summary Variable — derive_var_merged_summary","text":"records additional dataset (dataset_add) restricted matching filter_add condition. values analysis variable (analysis_var) summarized summary function (summary_fun) group (by_vars) additional dataset (dataset_add). summarized values merged input dataset new variable (new_var). observations without matching observation additional dataset new variable set NA. Observations additional dataset matching observation input dataset ignored.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_merged_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge a Summary Variable — derive_var_merged_summary","text":"","code":"library(tibble)  # Add a variable for the mean of AVAL within each visit adbds <- tribble(   ~USUBJID, ~AVISIT,  ~ASEQ, ~AVAL,   \"1\",      \"WEEK 1\",     1,    10,   \"1\",      \"WEEK 1\",     2,    NA,   \"1\",      \"WEEK 2\",     3,    NA,   \"1\",      \"WEEK 3\",     4,    42,   \"1\",      \"WEEK 4\",     5,    12,   \"1\",      \"WEEK 4\",     6,    12,   \"1\",      \"WEEK 4\",     7,    15,   \"2\",      \"WEEK 1\",     1,    21,   \"2\",      \"WEEK 4\",     2,    22 )  derive_var_merged_summary(   adbds,   dataset_add = adbds,   by_vars = exprs(USUBJID, AVISIT),   new_var = MEANVIS,   analysis_var = AVAL,   summary_fun = function(x) mean(x, na.rm = TRUE) ) #> # A tibble: 9 x 5 #>   USUBJID AVISIT  ASEQ  AVAL MEANVIS #>   <chr>   <chr>  <dbl> <dbl>   <dbl> #> 1 1       WEEK 1     1    10      10 #> 2 1       WEEK 1     2    NA      10 #> 3 1       WEEK 2     3    NA     NaN #> 4 1       WEEK 3     4    42      42 #> 5 1       WEEK 4     5    12      13 #> 6 1       WEEK 4     6    12      13 #> 7 1       WEEK 4     7    15      13 #> 8 2       WEEK 1     1    21      21 #> 9 2       WEEK 4     2    22      22  # Add a variable listing the lesion ids at baseline adsl <- tribble(   ~USUBJID,   \"1\",   \"2\",   \"3\" )  adtr <- tribble(   ~USUBJID, ~AVISIT,    ~LESIONID,   \"1\",      \"BASELINE\", \"INV-T1\",   \"1\",      \"BASELINE\", \"INV-T2\",   \"1\",      \"BASELINE\", \"INV-T3\",   \"1\",      \"BASELINE\", \"INV-T4\",   \"1\",      \"WEEK 1\",   \"INV-T1\",   \"1\",      \"WEEK 1\",   \"INV-T2\",   \"1\",      \"WEEK 1\",   \"INV-T4\",   \"2\",      \"BASELINE\", \"INV-T1\",   \"2\",      \"BASELINE\", \"INV-T2\",   \"2\",      \"BASELINE\", \"INV-T3\",   \"2\",      \"WEEK 1\",   \"INV-T1\",   \"2\",      \"WEEK 1\",   \"INV-N1\" )  derive_var_merged_summary(   adsl,   dataset_add = adtr,   by_vars = exprs(USUBJID),   filter_add = AVISIT == \"BASELINE\",   new_var = LESIONSBL,   analysis_var = LESIONID,   summary_fun = function(x) paste(x, collapse = \", \") ) #> # A tibble: 3 x 2 #>   USUBJID LESIONSBL                      #>   <chr>   <chr>                          #> 1 1       INV-T1, INV-T2, INV-T3, INV-T4 #> 2 2       INV-T1, INV-T2, INV-T3         #> 3 3       NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"Adds variable numbering observations within group","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"","code":"derive_var_obs_number(   dataset,   by_vars = NULL,   order = NULL,   new_var = ASEQ,   check_type = \"none\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"dataset Input dataset variables specified order by_vars parameter expected. by_vars Grouping variables Permitted Values: list variables order Sort order Within group observations ordered specified order. Permitted Values: list variables functions variables new_var Name variable create new variable set observation number group. numbering starts 1. Default: ASEQ check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"none\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"dataset containing observations variables input dataset additionally variable specified new_var parameter.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"group (respect variables specified by_vars parameter) first last observation (respect order specified order parameter mode specified mode parameter) included output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_obs_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Variable Numbering the Observations Within Each By Group — derive_var_obs_number","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(\"admiral_vs\")  admiral_vs %>%   select(USUBJID, VSTESTCD, VISITNUM, VSTPTNUM) %>%   derive_var_obs_number(     by_vars = exprs(USUBJID, VSTESTCD),     order = exprs(VISITNUM, desc(VSTPTNUM))   ) #> # A tibble: 29,643 x 5 #>    USUBJID     VSTESTCD VISITNUM VSTPTNUM  ASEQ #>    <chr>       <chr>       <dbl>    <dbl> <int> #>  1 01-701-1015 DIABP         1        817     1 #>  2 01-701-1015 DIABP         1        816     2 #>  3 01-701-1015 DIABP         1        815     3 #>  4 01-701-1015 DIABP         2        817     4 #>  5 01-701-1015 DIABP         2        816     5 #>  6 01-701-1015 DIABP         2        815     6 #>  7 01-701-1015 DIABP         3        817     7 #>  8 01-701-1015 DIABP         3        816     8 #>  9 01-701-1015 DIABP         3        815     9 #> 10 01-701-1015 DIABP         3.5      817    10 #> # … with 29,633 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"Derive -treatment flag (ONTRTFL) ADaM dataset single assessment date (e.g ADT) event start end dates (e.g. ASTDT/AENDT).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"","code":"derive_var_ontrtfl(   dataset,   new_var = ONTRTFL,   start_date,   end_date = NULL,   ref_start_date,   ref_end_date = NULL,   ref_end_window = 0,   ignore_time_for_ref_end_date = TRUE,   filter_pre_timepoint = NULL,   span_period = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"dataset Input dataset. Required columns start_date, end_date, ref_start_date ref_end_date. new_var -treatment flag variable name created. Default ONTRTFL. start_date start date (e.g. AESDT) assessment date (e.g. ADT) Required; date date-time object column expected. Refer derive_vars_dt() impute derive date date character vector date object. end_date end date assessment/event (e.g. AENDT) date date-time object column expected. Refer derive_vars_dt() impute derive date date character vector date object. Optional; Default null. used date value missing observation, assumed medication ongoing ONTRTFL set \"Y\". ref_start_date lower bound -treatment period Required; date date-time object column expected. Refer derive_vars_dt() impute derive date date character vector date object. ref_end_date upper bound -treatment period date date-time object column expected. Refer derive_vars_dt() impute derive date date character vector date object. Optional; can null everything ref_start_date considered -treatment. Default NULL. ref_end_window window add upper bound ref_end_date measured days (e.g. 7 7 days added upper bound) Optional; default 0. ignore_time_for_ref_end_date argument set TRUE, time part ignored checking event occurred ref_end_window days reference end date. Permitted Values: TRUE, FALSE filter_pre_timepoint expression filter observations -treatment date = ref_start_date. example, observations VSTPT = PRE considered -treatment date = ref_start_date, filter_pre_timepoint used denote -treatment flag set null. Optional; default NULL. span_period \"Y\" scalar character. \"Y\", events started prior ref_start_dateand ongoing end ref_start_date flagged \"Y\". Optional; default NULL.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"input dataset additional column named ONTRTFL value \"Y\" NA","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"-Treatment calculated determining whether assessment date start/stop dates fall 2 dates. following logic used assign -treatment = \"Y\": start_date missing ref_start_dateis non-missing timepoint filter provided (filter_pre_timepoint) start_date ref_start_date non-missing start_date = ref_start_date timepoint provided (filter_pre_timepoint) start_date ref_start_date non-missing start_date = ref_start_date filter provided filter_pre_timepoint true. ref_end_date provided ref_start_date < start_date ref_end_date provided ref_start_date < start_date <= ref_end_date + ref_end_window. end_date provided end_date < ref_start_date ONTRTFL set NULL.applicable cases start_date missing ONTRTFL assigned \"Y\" . span_period specified \"Y\", allows user assign ONTRTFL \"Y\" cases record started prior ref_start_date ongoing ended ref_start_date. date imputations needed done prior calling function.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_ontrtfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive On-Treatment Flag Variable — derive_var_ontrtfl","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate, warn.conflicts = FALSE)  advs <- tribble(   ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,   \"P01\",    ymd(\"2020-02-24\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P02\",    ymd(\"2020-01-01\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P03\",    ymd(\"2019-12-31\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\") ) derive_var_ontrtfl(   advs,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT ) #> # A tibble: 3 x 5 #>   USUBJID ADT        TRTSDT     TRTEDT     ONTRTFL #>   <chr>   <date>     <date>     <date>     <chr>   #> 1 P01     2020-02-24 2020-01-01 2020-03-01 Y       #> 2 P02     2020-01-01 2020-01-01 2020-03-01 Y       #> 3 P03     2019-12-31 2020-01-01 2020-03-01 NA       advs <- tribble(   ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,   \"P01\",    ymd(\"2020-07-01\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P02\",    ymd(\"2020-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"),   \"P03\",    ymd(\"2020-03-15\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\") ) derive_var_ontrtfl(   advs,   start_date = ADT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT,   ref_end_window = 60 ) #> # A tibble: 3 x 5 #>   USUBJID ADT        TRTSDT     TRTEDT     ONTRTFL #>   <chr>   <date>     <date>     <date>     <chr>   #> 1 P01     2020-07-01 2020-01-01 2020-03-01 NA      #> 2 P02     2020-04-30 2020-01-01 2020-03-01 Y       #> 3 P03     2020-03-15 2020-01-01 2020-03-01 Y        advs <- tribble(   ~USUBJID, ~ADTM,                      ~TRTSDTM,                   ~TRTEDTM,   \"P01\",    ymd_hm(\"2020-01-02T12:00\"), ymd_hm(\"2020-01-01T12:00\"), ymd_hm(\"2020-03-01T12:00\"),   \"P02\",    ymd(\"2020-01-01\"),          ymd_hm(\"2020-01-01T12:00\"), ymd_hm(\"2020-03-01T12:00\"),   \"P03\",    ymd(\"2019-12-31\"),          ymd_hm(\"2020-01-01T12:00\"), ymd_hm(\"2020-03-01T12:00\"), ) %>%   mutate(TPT = c(NA, \"PRE\", NA)) derive_var_ontrtfl(   advs,   start_date = ADTM,   ref_start_date = TRTSDTM,   ref_end_date = TRTEDTM,   filter_pre_timepoint = TPT == \"PRE\" ) #> # A tibble: 3 x 6 #>   USUBJID ADTM                TRTSDTM             TRTEDTM             TPT   #>   <chr>   <dttm>              <dttm>              <dttm>              <chr> #> 1 P01     2020-01-02 12:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 NA    #> 2 P02     2020-01-01 00:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 PRE   #> 3 P03     2019-12-31 00:00:00 2020-01-01 12:00:00 2020-03-01 12:00:00 NA    #> # … with 1 more variable: ONTRTFL <chr>  advs <- tribble(   ~USUBJID, ~ASTDT,            ~TRTSDT,           ~TRTEDT,           ~AENDT,   \"P01\",    ymd(\"2020-03-15\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), ymd(\"2020-12-01\"),   \"P02\",    ymd(\"2019-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), ymd(\"2020-03-15\"),   \"P03\",    ymd(\"2019-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), NA, ) derive_var_ontrtfl(   advs,   start_date = ASTDT,   end_date = AENDT,   ref_start_date = TRTSDT,   ref_end_date = TRTEDT,   ref_end_window = 60,   span_period = \"Y\" ) #> # A tibble: 3 x 6 #>   USUBJID ASTDT      TRTSDT     TRTEDT     AENDT      ONTRTFL #>   <chr>   <date>     <date>     <date>     <date>     <chr>   #> 1 P01     2020-03-15 2020-01-01 2020-03-01 2020-12-01 Y       #> 2 P02     2019-04-30 2020-01-01 2020-03-01 2020-03-15 Y       #> 3 P03     2019-04-30 2020-01-01 2020-03-01 NA         Y        advs <- tribble(   ~USUBJID, ~ASTDT,            ~AP01SDT,          ~AP01EDT,          ~AENDT,   \"P01\",    ymd(\"2020-03-15\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), ymd(\"2020-12-01\"),   \"P02\",    ymd(\"2019-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), ymd(\"2020-03-15\"),   \"P03\",    ymd(\"2019-04-30\"), ymd(\"2020-01-01\"), ymd(\"2020-03-01\"), NA, ) derive_var_ontrtfl(   advs,   new_var = ONTR01FL,   start_date = ASTDT,   end_date = AENDT,   ref_start_date = AP01SDT,   ref_end_date = AP01EDT,   span_period = \"Y\" ) #> # A tibble: 3 x 6 #>   USUBJID ASTDT      AP01SDT    AP01EDT    AENDT      ONTR01FL #>   <chr>   <date>     <date>     <date>     <date>     <chr>    #> 1 P01     2020-03-15 2020-01-01 2020-03-01 2020-12-01 NA       #> 2 P02     2019-04-30 2020-01-01 2020-03-01 2020-03-15 Y        #> 3 P03     2019-04-30 2020-01-01 2020-03-01 NA         Y"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Percent Change from Baseline — derive_var_pchg","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"Derive percent change baseline (PCHG) BDS dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"","code":"derive_var_pchg(dataset)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"dataset input dataset. Required variables AVAL BASE.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"input dataset additional column named PCHG","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"Percent change baseline calculated dividing change baseline absolute value baseline value multiplying result 100.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_pchg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Percent Change from Baseline — derive_var_pchg","text":"","code":"library(tibble)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~ABLFL, ~BASE,   \"P01\",    \"WEIGHT\", 80,    \"Y\",    80,   \"P01\",    \"WEIGHT\", 80.8,  \"\",     80,   \"P01\",    \"WEIGHT\", 81.4,  \"\",     80,   \"P02\",    \"WEIGHT\", 75.3,  \"Y\",    75.3,   \"P02\",    \"WEIGHT\", 76,    \"\",     75.3 ) derive_var_pchg(advs) #> # A tibble: 5 x 6 #>   USUBJID PARAMCD  AVAL ABLFL  BASE  PCHG #>   <chr>   <chr>   <dbl> <chr> <dbl> <dbl> #> 1 P01     WEIGHT   80   \"Y\"    80   0     #> 2 P01     WEIGHT   80.8 \"\"     80   1.00  #> 3 P01     WEIGHT   81.4 \"\"     80   1.75  #> 4 P02     WEIGHT   75.3 \"Y\"    75.3 0     #> 5 P02     WEIGHT   76   \"\"     75.3 0.930"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"Flag observations observation specified condition fulfilled group. example, function called flag subject observations first disease progression flag AEs specific AE.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"","code":"derive_var_relative_flag(   dataset,   by_vars,   order,   new_var,   condition,   mode,   selection,   inclusive,   flag_no_ref_groups = TRUE,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"dataset Input dataset variables specified order by_vars argument expected. by_vars Grouping variables Permitted Values: list variables created exprs() order Sort order Within group observations ordered specified order. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) new_var New variable variable added input dataset set \"Y\" observations condition fulfilled. observations set NA. condition Condition Reference Observation specified condition determines reference observation. output dataset observations (selection argument) reference observation flagged. mode Selection mode (first last) \"first\" specified, group observations (selection argument) observation condition (condition argument) fulfilled first time flagged output dataset. \"last\" specified, group observations (selection argument) observation condition (condition argument) fulfilled last time flagged output dataset. Permitted Values: \"first\", \"last\" selection Flag observations reference observation? Permitted Values: \"\", \"\" inclusive Flag reference observation? Permitted Values: TRUE, FALSE flag_no_ref_groups groups without reference observation flagged? Permitted Values: TRUE, FALSE check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"input dataset new variable (new_var) added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"group (by_vars argument) observations (selection argument) observations condition (condition argument) fulfilled first last time (order argument mode argument) flagged output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_relative_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag Observations Before or After a Condition is Fulfilled — derive_var_relative_flag","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE)  # Flag all AEs after the first COVID AE adae <- tribble(   ~USUBJID, ~ASTDY, ~ACOVFL, ~AESEQ,   \"1\",           2, NA,           1,   \"1\",           5, \"Y\",          2,   \"1\",           5, NA,           3,   \"1\",          17, NA,           4,   \"1\",          27, \"Y\",          5,   \"1\",          32, NA,           6,   \"2\",           8, NA,           1,   \"2\",          11, NA,           2, )  derive_var_relative_flag(   adae,   by_vars = exprs(USUBJID),   order = exprs(ASTDY, AESEQ),   new_var = PSTCOVFL,   condition = ACOVFL == \"Y\",   mode = \"first\",   selection = \"after\",   inclusive = FALSE,   flag_no_ref_groups = FALSE ) #> # A tibble: 8 x 5 #>   USUBJID ASTDY ACOVFL AESEQ PSTCOVFL #>   <chr>   <dbl> <chr>  <dbl> <chr>    #> 1 1           2 NA         1 NA       #> 2 1           5 Y          2 NA       #> 3 1           5 NA         3 Y        #> 4 1          17 NA         4 Y        #> 5 1          27 Y          5 Y        #> 6 1          32 NA         6 Y        #> 7 2           8 NA         1 NA       #> 8 2          11 NA         2 NA        response <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      0,        \"PR\",   \"1\",      1,        \"CR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"SD\",   \"1\",      4,        \"NE\",   \"2\",      0,        \"SD\",   \"2\",      1,        \"PD\",   \"2\",      2,        \"PD\",   \"3\",      0,        \"SD\",   \"4\",      0,        \"SD\",   \"4\",      1,        \"PR\",   \"4\",      2,        \"PD\",   \"4\",      3,        \"SD\",   \"4\",      4,        \"PR\" )  # Flag observations up to first PD for each patient response %>%   derive_var_relative_flag(     by_vars = exprs(USUBJID),     order = exprs(AVISITN),     new_var = ANL02FL,     condition = AVALC == \"PD\",     mode = \"first\",     selection = \"before\",     inclusive = TRUE   ) #> # A tibble: 14 x 4 #>    USUBJID AVISITN AVALC ANL02FL #>    <chr>     <dbl> <chr> <chr>   #>  1 1             0 PR    Y       #>  2 1             1 CR    Y       #>  3 1             2 CR    Y       #>  4 1             3 SD    Y       #>  5 1             4 NE    Y       #>  6 2             0 SD    Y       #>  7 2             1 PD    Y       #>  8 2             2 PD    NA      #>  9 3             0 SD    Y       #> 10 4             0 SD    Y       #> 11 4             1 PR    Y       #> 12 4             2 PD    Y       #> 13 4             3 SD    NA      #> 14 4             4 PR    NA       # Flag observations up to first PD excluding baseline (AVISITN = 0) for each patient response %>%   restrict_derivation(     derivation = derive_var_relative_flag,     args = params(       by_vars = exprs(USUBJID),       order = exprs(AVISITN),       new_var = ANL02FL,       condition = AVALC == \"PD\",       mode = \"first\",       selection = \"before\",       inclusive = TRUE     ),     filter = AVISITN > 0   ) %>%   arrange(USUBJID, AVISITN) #> # A tibble: 14 x 4 #>    USUBJID AVISITN AVALC ANL02FL #>    <chr>     <dbl> <chr> <chr>   #>  1 1             0 PR    NA      #>  2 1             1 CR    Y       #>  3 1             2 CR    Y       #>  4 1             3 SD    Y       #>  5 1             4 NE    Y       #>  6 2             0 SD    NA      #>  7 2             1 PD    Y       #>  8 2             2 PD    NA      #>  9 3             0 SD    NA      #> 10 4             0 SD    NA      #> 11 4             1 PR    Y       #> 12 4             2 PD    Y       #> 13 4             3 SD    NA      #> 14 4             4 PR    NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Shift — derive_var_shift","title":"Derive Shift — derive_var_shift","text":"Derives character shift variable containing concatenated shift values based user-defined pairing, e.g., shift baseline analysis value, shift baseline grade analysis grade, ...","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Shift — derive_var_shift","text":"","code":"derive_var_shift(   dataset,   new_var,   from_var,   to_var,   na_val = \"NULL\",   sep_val = \" to \" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Shift — derive_var_shift","text":"dataset Input dataset columns specified from_var to_var parameters expected. new_var Name character shift variable create. from_var Variable containing value shift . to_var Variable containing value shift . na_val Character string replace missing values from_var to_var. Default: \"NULL\" sep_val Character string concatenate values from_var to_var. Default: \" \"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Shift — derive_var_shift","text":"input dataset character shift variable added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Shift — derive_var_shift","text":"new_var derived concatenating values from_var values to_var (e.g. \"NORMAL HIGH\"). from_var to_var missing value, missing value replaced na_val (e.g. \"NORMAL NULL\").","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Shift — derive_var_shift","text":"","code":"library(tibble)  data <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~ABLFL, ~BNRIND, ~ANRIND,   \"P01\", \"ALB\", 33, \"Y\", \"LOW\", \"LOW\",   \"P01\", \"ALB\", 38, NA, \"LOW\", \"NORMAL\",   \"P01\", \"ALB\", NA, NA, \"LOW\", NA,   \"P02\", \"ALB\", 37, \"Y\", \"NORMAL\", \"NORMAL\",   \"P02\", \"ALB\", 49, NA, \"NORMAL\", \"HIGH\",   \"P02\", \"SODIUM\", 147, \"Y\", \"HIGH\", \"HIGH\" )  data %>%   convert_blanks_to_na() %>%   derive_var_shift(     new_var = SHIFT1,     from_var = BNRIND,     to_var = ANRIND   ) #> # A tibble: 6 x 7 #>   USUBJID PARAMCD  AVAL ABLFL BNRIND ANRIND SHIFT1           #>   <chr>   <chr>   <dbl> <chr> <chr>  <chr>  <chr>            #> 1 P01     ALB        33 Y     LOW    LOW    LOW to LOW       #> 2 P01     ALB        38 NA    LOW    NORMAL LOW to NORMAL    #> 3 P01     ALB        NA NA    LOW    NA     LOW to NULL      #> 4 P02     ALB        37 Y     NORMAL NORMAL NORMAL to NORMAL #> 5 P02     ALB        49 NA    NORMAL HIGH   NORMAL to HIGH   #> 6 P02     SODIUM    147 Y     HIGH   HIGH   HIGH to HIGH      # or only populate post-baseline records data %>%   convert_blanks_to_na() %>%   restrict_derivation(     derivation = derive_var_shift,     args = params(       new_var = SHIFT1,       from_var = BNRIND,       to_var = ANRIND     ),     filter = is.na(ABLFL)   ) #> # A tibble: 6 x 7 #>   USUBJID PARAMCD  AVAL ABLFL BNRIND ANRIND SHIFT1         #>   <chr>   <chr>   <dbl> <chr> <chr>  <chr>  <chr>          #> 1 P01     ALB        38 NA    LOW    NORMAL LOW to NORMAL  #> 2 P01     ALB        NA NA    LOW    NA     LOW to NULL    #> 3 P02     ALB        49 NA    NORMAL HIGH   NORMAL to HIGH #> 4 P01     ALB        33 Y     LOW    LOW    NA             #> 5 P02     ALB        37 Y     NORMAL NORMAL NA             #> 6 P02     SODIUM    147 Y     HIGH   HIGH   NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"Derives total treatment duration (days) (TRTDURD)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"","code":"derive_var_trtdurd(dataset, start_date = TRTSDT, end_date = TRTEDT)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"dataset Input dataset columns specified start_date end_date parameter expected. start_date start date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Default: TRTSDT end_date end date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Default: TRTEDT","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"input dataset TRTDURD added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"total treatment duration derived number days start end date plus one.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtdurd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Total Treatment Duration (Days) — derive_var_trtdurd","text":"","code":"library(tibble) library(lubridate)  data <- tribble(   ~TRTSDT, ~TRTEDT,   ymd(\"2020-01-01\"), ymd(\"2020-02-24\") )  derive_var_trtdurd(data) #> # A tibble: 1 x 3 #>   TRTSDT     TRTEDT     TRTDURD #>   <date>     <date>       <dbl> #> 1 2020-01-01 2020-02-24      55"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Treatment-emergent Flag — derive_var_trtemfl","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"Derive treatment emergent analysis flag (e.g., TRTEMFL).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"","code":"derive_var_trtemfl(   dataset,   new_var = TRTEMFL,   start_date = ASTDTM,   end_date = AENDTM,   trt_start_date = TRTSDTM,   trt_end_date = NULL,   end_window = NULL,   ignore_time_for_trt_end = TRUE,   initial_intensity = NULL,   intensity = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"dataset Input dataset variables specified start_date, end_date, trt_start_date, trt_end_date, initial_intensity, intensity expected. new_var New variable start_date Event start date Permitted Values: symbol referring date datetime variable input dataset end_date Event end date Permitted Values: symbol referring date datetime variable input dataset trt_start_date Treatment start date Permitted Values: symbol referring date datetime variable input dataset trt_end_date Treatment end date Permitted Values: symbol referring date datetime variable input dataset NULL end_window argument specified, events starting specified number days end treatment, flagged. Permitted Values: non-negative integer NULL ignore_time_for_trt_end argument set TRUE, time part ignored checking event occurred end_window days end treatment. Permitted Values: TRUE, FALSE initial_intensity Initial severity/intensity toxicity derivation assumes AE data collection method single record per AE “initial” “extreme” severity/intensity recorded separately. argument specified, events start treatment start end treatment start (ongoing) worsened (.e., intensity greater initial intensity), flagged. values specified variable must comparable usual comparison operators. .e., intensity greater initial intensity initial_intensity < intensity must evaluate TRUE. Permitted Values: symbol referring variable input dataset NULL intensity Severity/intensity toxicity argument specified, events start treatment start end treatment start (ongoing) worsened (.e., intensity greater initial intensity), flagged. values specified variable must comparable usual comparison operators. .e., intensity greater initial intensity initial_intensity < intensity must evaluate TRUE. Permitted Values: symbol referring variable input dataset NULL","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"input dataset variable specified new_var added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"derivation new variable following cases considered order. first case applies, defines value variable. treated: trt_start_date NA, set NA_character_. event treatment: end_date trt_start_date (end_date NA), set NA_character_. event date: start_date NA, set \"Y\" cases usually considered conservative assume event treatment-emergent. event started treatment: end_window specified: start_date trt_start_date, set \"Y\", end_window specified: start_date trt_start_date start_date trt_end_date + end_window days, set \"Y\", event started treatment (possibly) worsened treatment: initial_intensity intensity specified: initial_intensity < intensity start_date trt_start_date end_date trt_start_date end_date NA, set \"Y\". Otherwise set NA_character_.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_trtemfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Treatment-emergent Flag — derive_var_trtemfl","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adae <- expected <- tribble(   ~USUBJID, ~ASTDTM,            ~AENDTM,            ~AEITOXGR, ~AETOXGR,   # before treatment   \"1\",      \"2021-12-13T20:15\", \"2021-12-15T12:45\", \"1\",       \"1\",   \"1\",      \"2021-12-14T20:15\", \"2021-12-14T22:00\", \"1\",       \"3\",   # starting before treatment and ending during treatment   \"1\",      \"2021-12-30T20:00\", \"2022-01-14T11:00\", \"1\",       \"3\",   \"1\",      \"2021-12-31T20:15\", \"2022-01-01T01:23\", \"1\",       \"1\",   # starting during treatment   \"1\",      \"2022-01-01T12:00\", \"2022-01-02T23:25\", \"3\",       \"4\",   # after treatment   \"1\",      \"2022-05-10T11:00\", \"2022-05-10T13:05\", \"2\",       \"2\",   \"1\",      \"2022-05-11T11:00\", \"2022-05-11T13:05\", \"2\",       \"2\",   # missing dates   \"1\",      \"\",                 \"\",                 \"3\",       \"4\",   \"1\",      \"2021-12-30T09:00\", \"\",                 \"3\",       \"4\",   \"1\",      \"2021-12-30T11:00\", \"\",                 \"3\",       \"3\",   \"1\",      \"\",                 \"2022-01-04T09:00\", \"3\",       \"4\",   \"1\",      \"\",                 \"2021-12-24T19:00\", \"3\",       \"4\",   \"1\",      \"\",                 \"2022-06-04T09:00\", \"3\",       \"4\",   # without treatment   \"2\",      \"\",                 \"2021-12-03T12:00\", \"1\",       \"2\",   \"2\",      \"2021-12-01T12:00\", \"2021-12-03T12:00\", \"1\",       \"2\",   \"2\",      \"2021-12-06T18:00\", \"\",                 \"1\",       \"2\" ) %>%   mutate(     ASTDTM = ymd_hm(ASTDTM),     AENDTM = ymd_hm(AENDTM),     TRTSDTM = if_else(USUBJID == \"1\", ymd_hm(\"2022-01-01T01:01\"), ymd_hms(\"\")),     TRTEDTM = if_else(USUBJID == \"1\", ymd_hm(\"2022-04-30T23:59\"), ymd_hms(\"\"))   )  # derive TRTEMFL without considering treatment end and worsening derive_var_trtemfl(adae) %>% select(ASTDTM, AENDTM, TRTSDTM, TRTEMFL) #> # A tibble: 16 x 4 #>    ASTDTM              AENDTM              TRTSDTM             TRTEMFL #>    <dttm>              <dttm>              <dttm>              <chr>   #>  1 2021-12-13 20:15:00 2021-12-15 12:45:00 2022-01-01 01:01:00 NA      #>  2 2021-12-14 20:15:00 2021-12-14 22:00:00 2022-01-01 01:01:00 NA      #>  3 2021-12-30 20:00:00 2022-01-14 11:00:00 2022-01-01 01:01:00 NA      #>  4 2021-12-31 20:15:00 2022-01-01 01:23:00 2022-01-01 01:01:00 NA      #>  5 2022-01-01 12:00:00 2022-01-02 23:25:00 2022-01-01 01:01:00 Y       #>  6 2022-05-10 11:00:00 2022-05-10 13:05:00 2022-01-01 01:01:00 Y       #>  7 2022-05-11 11:00:00 2022-05-11 13:05:00 2022-01-01 01:01:00 Y       #>  8 NA                  NA                  2022-01-01 01:01:00 Y       #>  9 2021-12-30 09:00:00 NA                  2022-01-01 01:01:00 NA      #> 10 2021-12-30 11:00:00 NA                  2022-01-01 01:01:00 NA      #> 11 NA                  2022-01-04 09:00:00 2022-01-01 01:01:00 Y       #> 12 NA                  2021-12-24 19:00:00 2022-01-01 01:01:00 NA      #> 13 NA                  2022-06-04 09:00:00 2022-01-01 01:01:00 Y       #> 14 NA                  2021-12-03 12:00:00 NA                  NA      #> 15 2021-12-01 12:00:00 2021-12-03 12:00:00 NA                  NA      #> 16 2021-12-06 18:00:00 NA                  NA                  NA       # derive TRTEM2FL taking treatment end and worsening into account derive_var_trtemfl(   adae,   new_var = TRTEM2FL,   trt_end_date = TRTEDTM,   end_window = 10,   initial_intensity = AEITOXGR,   intensity = AETOXGR ) %>% select(ASTDTM, AENDTM, AEITOXGR, AETOXGR, TRTEM2FL) #> # A tibble: 16 x 5 #>    ASTDTM              AENDTM              AEITOXGR AETOXGR TRTEM2FL #>    <dttm>              <dttm>              <chr>    <chr>   <chr>    #>  1 2021-12-13 20:15:00 2021-12-15 12:45:00 1        1       NA       #>  2 2021-12-14 20:15:00 2021-12-14 22:00:00 1        3       NA       #>  3 2021-12-30 20:00:00 2022-01-14 11:00:00 1        3       Y        #>  4 2021-12-31 20:15:00 2022-01-01 01:23:00 1        1       NA       #>  5 2022-01-01 12:00:00 2022-01-02 23:25:00 3        4       Y        #>  6 2022-05-10 11:00:00 2022-05-10 13:05:00 2        2       Y        #>  7 2022-05-11 11:00:00 2022-05-11 13:05:00 2        2       NA       #>  8 NA                  NA                  3        4       Y        #>  9 2021-12-30 09:00:00 NA                  3        4       Y        #> 10 2021-12-30 11:00:00 NA                  3        3       NA       #> 11 NA                  2022-01-04 09:00:00 3        4       Y        #> 12 NA                  2021-12-24 19:00:00 3        4       NA       #> 13 NA                  2022-06-04 09:00:00 3        4       Y        #> 14 NA                  2021-12-03 12:00:00 1        2       NA       #> 15 2021-12-01 12:00:00 2021-12-03 12:00:00 1        2       NA       #> 16 2021-12-06 18:00:00 NA                  1        2       NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_worst_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","title":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","text":"function deprecated. Please use slice_derivation() / derive_var_extreme_flag() derive extreme flags adjust order argument.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_worst_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","text":"","code":"derive_var_worst_flag(   dataset,   by_vars,   order,   new_var,   param_var,   analysis_var,   worst_high,   worst_low,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_worst_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","text":"dataset Input dataset. Variables specified by_vars, order, param_var, analysis_var expected. by_vars Grouping variables Permitted Values: list variables order Sort order. Used determine maximal / minimal observation unique, see Details section information. new_var Variable add dataset. set \"Y\" maximal / minimal observation group, see Details section information. param_var Variable parameter values maximal / minimal value calculated. analysis_var Variable measurement values maximal / minimal value calculated. worst_high Character param_var values specifying parameters referring \"high\". Use character(0) required. worst_low Character param_var values specifying parameters referring \"low\". Use character(0) required. check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_worst_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","text":"input dataset new flag variable added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_var_worst_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Variable Flagging the Maximal / Minimal Value Within a Group of Observations — derive_var_worst_flag","text":"group respect variables specified by_vars parameter, maximal / minimal observation analysis_var labeled new_var column \"Y\", param_var worst_high / worst_low. Otherwise, assigned NA. one maximal / minimal observation, first one respect order specified order parameter flagged. direction \"worst\" depends definition worst specified parameters arguments worst_high / worst_low, .e. parameters highest value worst others worst lowest value.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Analysis Age — derive_vars_aage","title":"Derive Analysis Age — derive_vars_aage","text":"Derives analysis age (AAGE) analysis age unit (AAGEU)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Analysis Age — derive_vars_aage","text":"","code":"derive_vars_aage(   dataset,   start_date = BRTHDT,   end_date = RANDDT,   unit = \"years\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Analysis Age — derive_vars_aage","text":"dataset Input dataset columns specified start_date end_date parameter expected. start_date start date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Default: BRTHDT end_date end date date date-time object expected. Refer derive_vars_dt() impute derive date date character vector date object. Default: RANDDT unit Unit age derived specified unit Default: 'years' Permitted Values: 'years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Analysis Age — derive_vars_aage","text":"input dataset AAGE AAGEU added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Analysis Age — derive_vars_aage","text":"age derived integer part duration start end date specified unit. 'years' 'months' specified out_unit parameter, underlying lubridate::time_length() function used , results calculated based actual calendar length months years rather assuming equal days every month (30.4375 days) every year (365.25 days).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_aage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Analysis Age — derive_vars_aage","text":"","code":"library(tibble) library(lubridate)  data <- tribble(   ~BRTHDT, ~RANDDT,   ymd(\"1984-09-06\"), ymd(\"2020-02-24\") )  derive_vars_aage(data) #> # A tibble: 1 x 4 #>   BRTHDT     RANDDT      AAGE AAGEU #>   <date>     <date>     <dbl> <chr> #> 1 1984-09-06 2020-02-24    35 YEARS"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_atc.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive ATC Class Variables — derive_vars_atc","title":"Derive ATC Class Variables — derive_vars_atc","text":"Add Anatomical Therapeutic Chemical class variables FACM ADCM","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_atc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive ATC Class Variables — derive_vars_atc","text":"","code":"derive_vars_atc(   dataset,   dataset_facm,   by_vars = exprs(USUBJID, CMREFID = FAREFID),   value_var = FASTRESC )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_atc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive ATC Class Variables — derive_vars_atc","text":"dataset Input dataset variables specified by_vars parameter required dataset_facm FACM dataset variables specified by_vars value_var parameters, FAGRPID FATESTCD required by_vars Keys used merge dataset_facm dataset Permitted Values: list variables value_var variable dataset_facm containing values transposed variables Default: FASTRESC","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_atc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive ATC Class Variables — derive_vars_atc","text":"input dataset ATC variables added","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_atc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive ATC Class Variables — derive_vars_atc","text":"","code":"library(tibble)  cm <- tribble(   ~USUBJID, ~CMGRPID, ~CMREFID, ~CMDECOD,   \"BP40257-1001\", \"14\", \"1192056\", \"PARACETAMOL\",   \"BP40257-1001\", \"18\", \"2007001\", \"SOLUMEDROL\",   \"BP40257-1002\", \"19\", \"2791596\", \"SPIRONOLACTONE\" ) facm <- tribble(   ~USUBJID, ~FAGRPID, ~FAREFID, ~FATESTCD, ~FASTRESC,   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC1CD\", \"N\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC2CD\", \"N02\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC3CD\", \"N02B\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC4CD\", \"N02BE\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC1CD\", \"D\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC2CD\", \"D10\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC3CD\", \"D10A\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC4CD\", \"D10AA\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC1CD\", \"D\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC2CD\", \"D07\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC3CD\", \"D07A\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC4CD\", \"D07AA\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC1CD\", \"H\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC2CD\", \"H02\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC3CD\", \"H02A\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC4CD\", \"H02AB\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC1CD\", \"C\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC2CD\", \"C03\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC3CD\", \"C03D\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC4CD\", \"C03DA\" )  derive_vars_atc(cm, facm) #> # A tibble: 5 x 8 #>   USUBJID      CMGRPID CMREFID CMDECOD        ATC1CD ATC2CD ATC3CD ATC4CD #>   <chr>        <chr>   <chr>   <chr>          <chr>  <chr>  <chr>  <chr>  #> 1 BP40257-1001 14      1192056 PARACETAMOL    N      N02    N02B   N02BE  #> 2 BP40257-1001 18      2007001 SOLUMEDROL     D      D10    D10A   D10AA  #> 3 BP40257-1001 18      2007001 SOLUMEDROL     D      D07    D07A   D07AA  #> 4 BP40257-1001 18      2007001 SOLUMEDROL     H      H02    H02A   H02AB  #> 5 BP40257-1002 19      2791596 SPIRONOLACTONE C      C03    C03D   C03DA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_disposition_reason.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","title":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","text":"function deprecated. Please use derive_vars_merged() specify filter_add argument derive respective variables. Derive disposition reason relevant records disposition domain.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_disposition_reason.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","text":"","code":"derive_vars_disposition_reason(   dataset,   dataset_ds,   new_var,   reason_var,   new_var_spe = NULL,   reason_var_spe = NULL,   format_new_vars = format_reason_default,   filter_ds,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_disposition_reason.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","text":"dataset Input dataset dataset_ds Dataset containing disposition information (e.g. ds) dataset must contain: STUDYID, USUBJID, variable(s) specified reason_var (reason_var_spe, required) variables used filter_ds. new_var Name disposition reason variable variable name expected (e.g. DCSREAS). reason_var variable used derive disposition reason variable name expected (e.g. DSDECOD). new_var_spe Name disposition reason detail variable variable name expected (e.g. DCSREASP). new_var_spe specified, expected reason_var_spe also specified, otherwise error issued. Default: NULL reason_var_spe variable used derive disposition reason detail variable name expected (e.g. DSTERM). new_var_spe specified, expected reason_var_spe also specified, otherwise error issued. Default: NULL format_new_vars function used derive reason(s) function used derive disposition reason(s) must follow conventions main reason discontinuation needs derived (.e. new_var_spe NULL), function must least one character vector argument, e.g. format_reason <- function(reason) new_var derived new_var = format_reason(reason_var). Typically, content function return reason_var NA depending value (e.g. if_else ( reason != \"COMPLETED\" & !.na(reason), reason, NA_character_)). DCSREAS = format_reason(DSDECOD) returns DCSREAS = DSDECOD DSDECOD 'COMPLETED' NA, NA otherwise. main reason details needs derived (new_var_spe specified) function must two character vectors argument, e.g. format_reason2 <- function(reason, reason_spe) new_var derived new_var = format_reason(reason_var), new_var_spe derived new_var_spe = format_reason(reason_var, reason_var_spe). Typically, content function return reason_var_spe NA depending reason_var value (e.g. if_else ( reason == \"\", reason_spe, NA_character_)). DCSREASP = format_reason(DSDECOD, DSTERM) returns DCSREASP = DSTERM DSDECOD equal ''. Default: format_reason_default, see format_reason_default() details. filter_ds Filter condition disposition data. Filter used select relevant disposition data. expected filter restricts dataset_ds one observation per patient. error issued otherwise. Permitted Values: logical expression. subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_disposition_reason.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","text":"input dataset disposition reason(s) (new_var required new_var_spe) added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_disposition_reason.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive a Disposition Reason at a Specific Timepoint — derive_vars_disposition_reason","text":"functions returns main reason discontinuation (e.g. DCSREAS DCTREAS). reason discontinuation derived based reason_var (e.g. DSDECOD) format_new_vars. new_var_spe NULL, function also return details associated reason discontinuation (e.g. DCSREASP). details associated reason discontinuation derived based reason_var_spe (e.g. DSTERM), reason_var format_new_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"Derive date ('--DT') date character vector ('--DTC'). date can imputed (see date_imputation argument) date imputation flag ('--DTF') can added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"","code":"derive_vars_dt(   dataset,   new_vars_prefix,   dtc,   highest_imputation = \"n\",   date_imputation = \"first\",   flag_imputation = \"auto\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"dataset Input dataset. date character vector (dtc) must present. new_vars_prefix Prefix used output variable(s). character scalar expected. date variable \"DT\" appended specified prefix date imputation flag \"DTF\". .e., new_vars_prefix = \"AST\" variables ASTDT ASTDTF created. dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"n\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\" flag_imputation Whether date imputation flag must also derived. \"auto\" specified, date imputation flag derived date_imputation argument null. Default: \"auto\" Permitted Values: \"auto\", \"date\" \"none\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"MID\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"input dataset date '--DT' (date imputation flag '--DTF' requested) added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"admiral allow users pick single part date/time impute, enable impute highest level, .e. choose say impute months, days. presence '--DTF' variable checked already exists input dataset, warning issued '--DTF' overwritten.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive/Impute a Date from a Date Character Vector — derive_vars_dt","text":"","code":"library(tibble) library(lubridate)  mhdt <- tribble(   ~MHSTDTC,   \"2019-07-18T15:25:40\",   \"2019-07-18T15:25\",   \"2019-07-18\",   \"2019-02\",   \"2019\",   \"2019---07\",   \"\" )  # Create ASTDT and ASTDTF # No imputation for partial date derive_vars_dt(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC ) #> # A tibble: 7 x 2 #>   MHSTDTC               ASTDT      #>   <chr>                 <date>     #> 1 \"2019-07-18T15:25:40\" 2019-07-18 #> 2 \"2019-07-18T15:25\"    2019-07-18 #> 3 \"2019-07-18\"          2019-07-18 #> 4 \"2019-02\"             NA         #> 5 \"2019\"                NA         #> 6 \"2019---07\"           NA         #> 7 \"\"                    NA          # Create ASTDT and ASTDTF # Impute partial dates to first day/month derive_vars_dt(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\" ) #> # A tibble: 7 x 3 #>   MHSTDTC               ASTDT      ASTDTF #>   <chr>                 <date>     <chr>  #> 1 \"2019-07-18T15:25:40\" 2019-07-18 NA     #> 2 \"2019-07-18T15:25\"    2019-07-18 NA     #> 3 \"2019-07-18\"          2019-07-18 NA     #> 4 \"2019-02\"             2019-02-01 D      #> 5 \"2019\"                2019-01-01 M      #> 6 \"2019---07\"           2019-01-01 M      #> 7 \"\"                    NA         NA      # Impute partial dates to 6th of April derive_vars_dt(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\",   date_imputation = \"04-06\" ) #> # A tibble: 7 x 3 #>   MHSTDTC               ASTDT      ASTDTF #>   <chr>                 <date>     <chr>  #> 1 \"2019-07-18T15:25:40\" 2019-07-18 NA     #> 2 \"2019-07-18T15:25\"    2019-07-18 NA     #> 3 \"2019-07-18\"          2019-07-18 NA     #> 4 \"2019-02\"             2019-02-06 D      #> 5 \"2019\"                2019-04-06 M      #> 6 \"2019---07\"           2019-04-06 M      #> 7 \"\"                    NA         NA      # Create AENDT and AENDTF # Impute partial dates to last day/month derive_vars_dt(   mhdt,   new_vars_prefix = \"AEN\",   dtc = MHSTDTC,   highest_imputation = \"M\",   date_imputation = \"last\" ) #> # A tibble: 7 x 3 #>   MHSTDTC               AENDT      AENDTF #>   <chr>                 <date>     <chr>  #> 1 \"2019-07-18T15:25:40\" 2019-07-18 NA     #> 2 \"2019-07-18T15:25\"    2019-07-18 NA     #> 3 \"2019-07-18\"          2019-07-18 NA     #> 4 \"2019-02\"             2019-02-28 D      #> 5 \"2019\"                2019-12-31 M      #> 6 \"2019---07\"           2019-12-31 M      #> 7 \"\"                    NA         NA      # Create BIRTHDT # Impute partial dates to 15th of June. No DTF derive_vars_dt(   mhdt,   new_vars_prefix = \"BIRTH\",   dtc = MHSTDTC,   highest_imputation = \"M\",   date_imputation = \"mid\",   flag_imputation = \"none\" ) #> # A tibble: 7 x 2 #>   MHSTDTC               BIRTHDT    #>   <chr>                 <date>     #> 1 \"2019-07-18T15:25:40\" 2019-07-18 #> 2 \"2019-07-18T15:25\"    2019-07-18 #> 3 \"2019-07-18\"          2019-07-18 #> 4 \"2019-02\"             2019-02-15 #> 5 \"2019\"                2019-06-30 #> 6 \"2019---07\"           2019-06-30 #> 7 \"\"                    NA          # Impute AE start date to the first date and ensure that the imputed date # is not before the treatment start date adae <- tribble(   ~AESTDTC, ~TRTSDTM,   \"2020-12\", ymd_hms(\"2020-12-06T12:12:12\"),   \"2020-11\", ymd_hms(\"2020-12-06T12:12:12\") )  derive_vars_dt(   adae,   dtc = AESTDTC,   new_vars_prefix = \"AST\",   highest_imputation = \"M\",   min_dates = exprs(TRTSDTM) ) #> # A tibble: 2 x 4 #>   AESTDTC TRTSDTM             ASTDT      ASTDTF #>   <chr>   <dttm>              <date>     <chr>  #> 1 2020-12 2020-12-06 12:12:12 2020-12-06 D      #> 2 2020-11 2020-12-06 12:12:12 2020-11-01 D       # A user imputing dates as middle month/day, i.e. date_imputation = \"mid\" can # use preserve argument to \"preserve\" partial dates.  For example, \"2019---07\", # will be displayed as \"2019-06-07\" rather than 2019-06-15 with preserve = TRUE  derive_vars_dt(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\",   date_imputation = \"mid\",   preserve = TRUE ) #> # A tibble: 7 x 3 #>   MHSTDTC               ASTDT      ASTDTF #>   <chr>                 <date>     <chr>  #> 1 \"2019-07-18T15:25:40\" 2019-07-18 NA     #> 2 \"2019-07-18T15:25\"    2019-07-18 NA     #> 3 \"2019-07-18\"          2019-07-18 NA     #> 4 \"2019-02\"             2019-02-15 D      #> 5 \"2019\"                2019-06-30 M      #> 6 \"2019---07\"           2019-06-07 M      #> 7 \"\"                    NA         NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"Derive datetime object ('--DTM') date character vector ('--DTC'). date time can imputed (see date_imputation/time_imputation arguments) date/time imputation flag ('--DTF', '--TMF') can added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"","code":"derive_vars_dtm(   dataset,   new_vars_prefix,   dtc,   highest_imputation = \"h\",   date_imputation = \"first\",   time_imputation = \"first\",   flag_imputation = \"auto\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE,   ignore_seconds_flag = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"dataset Input dataset date character vector (dtc) must present. new_vars_prefix Prefix used output variable(s). character scalar expected. date variable \"DT\" appended specified prefix, date imputation flag \"DTF\", time imputation flag \"TMF\". .e., new_vars_prefix = \"AST\" variables ASTDT, ASTDTF, ASTTMF created. dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified, imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"h\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"h\" (hour), \"m\" (minute), \"s\" (second), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\". time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day. argument ignored highest_imputation = \"n\". Default: \"first\". flag_imputation Whether date/time imputation flag(s) must also derived. \"auto\" specified, date imputation flag derived date_imputation argument null time imputation flag derived time_imputation argument null Default: \"auto\" Permitted Values: \"auto\", \"date\", \"time\", \"\", \"none\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"mid\"). Permitted Values: TRUE, FALSE Default: FALSE ignore_seconds_flag ADaM IG states given SDTM ('--DTC') variable, hours minutes ever collected, seconds imputed ('--DTM') 00, necessary set ('--TMF') 'S'. user can set TRUE 'S' Flag dropped ('--TMF'). logical value Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"input dataset datetime '--DTM' (date/time imputation flag '--DTF', '--TMF') added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"admiral allow users pick single part date/time impute, enable impute highest level, .e. choose say impute months, days. presence '--DTF' variable checked variable derived already exists input dataset. However, '--TMF' already exists input dataset, warning issued '--TMF' overwritten.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive/Impute a Datetime from a Date Character Vector — derive_vars_dtm","text":"","code":"library(tibble) library(lubridate)  mhdt <- tribble(   ~MHSTDTC,   \"2019-07-18T15:25:40\",   \"2019-07-18T15:25\",   \"2019-07-18\",   \"2019-02\",   \"2019\",   \"2019---07\",   \"\" )  derive_vars_dtm(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\" ) #> # A tibble: 7 x 4 #>   MHSTDTC               ASTDTM              ASTDTF ASTTMF #>   <chr>                 <dttm>              <chr>  <chr>  #> 1 \"2019-07-18T15:25:40\" 2019-07-18 15:25:40 NA     NA     #> 2 \"2019-07-18T15:25\"    2019-07-18 15:25:00 NA     S      #> 3 \"2019-07-18\"          2019-07-18 00:00:00 NA     H      #> 4 \"2019-02\"             2019-02-01 00:00:00 D      H      #> 5 \"2019\"                2019-01-01 00:00:00 M      H      #> 6 \"2019---07\"           2019-01-01 00:00:00 M      H      #> 7 \"\"                    NA                  NA     NA      # Impute AE end date to the last date and ensure that the imputed date is not # after the death or data cut off date adae <- tribble(   ~AEENDTC, ~DTHDT, ~DCUTDT,   \"2020-12\", ymd(\"2020-12-06\"), ymd(\"2020-12-24\"),   \"2020-11\", ymd(\"2020-12-06\"), ymd(\"2020-12-24\") )  derive_vars_dtm(   adae,   dtc = AEENDTC,   new_vars_prefix = \"AEN\",   highest_imputation = \"M\",   date_imputation = \"last\",   time_imputation = \"last\",   max_dates = exprs(DTHDT, DCUTDT) ) #> # A tibble: 2 x 6 #>   AEENDTC DTHDT      DCUTDT     AENDTM              AENDTF AENTMF #>   <chr>   <date>     <date>     <dttm>              <chr>  <chr>  #> 1 2020-12 2020-12-06 2020-12-24 2020-12-06 23:59:59 D      H      #> 2 2020-11 2020-12-06 2020-12-24 2020-11-30 23:59:59 D      H       # Seconds has been removed from the input dataset.  Function now uses # ignore_seconds_flag to remove the 'S' from the --TMF variable. mhdt <- tribble(   ~MHSTDTC,   \"2019-07-18T15:25\",   \"2019-07-18T15:25\",   \"2019-07-18\",   \"2019-02\",   \"2019\",   \"2019---07\",   \"\" )  derive_vars_dtm(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\",   ignore_seconds_flag = TRUE ) #> # A tibble: 7 x 4 #>   MHSTDTC            ASTDTM              ASTDTF ASTTMF #>   <chr>              <dttm>              <chr>  <chr>  #> 1 \"2019-07-18T15:25\" 2019-07-18 15:25:00 NA     NA     #> 2 \"2019-07-18T15:25\" 2019-07-18 15:25:00 NA     NA     #> 3 \"2019-07-18\"       2019-07-18 00:00:00 NA     H      #> 4 \"2019-02\"          2019-02-01 00:00:00 D      H      #> 5 \"2019\"             2019-01-01 00:00:00 M      H      #> 6 \"2019---07\"        2019-01-01 00:00:00 M      H      #> 7 \"\"                 NA                  NA     NA      # A user imputing dates as middle month/day, i.e. date_imputation = \"MID\" can # use preserve argument to \"preserve\" partial dates.  For example, \"2019---07\", # will be displayed as \"2019-06-07\" rather than 2019-06-15 with preserve = TRUE  derive_vars_dtm(   mhdt,   new_vars_prefix = \"AST\",   dtc = MHSTDTC,   highest_imputation = \"M\",   date_imputation = \"mid\",   preserve = TRUE ) #> # A tibble: 7 x 4 #>   MHSTDTC            ASTDTM              ASTDTF ASTTMF #>   <chr>              <dttm>              <chr>  <chr>  #> 1 \"2019-07-18T15:25\" 2019-07-18 15:25:00 NA     S      #> 2 \"2019-07-18T15:25\" 2019-07-18 15:25:00 NA     S      #> 3 \"2019-07-18\"       2019-07-18 00:00:00 NA     H      #> 4 \"2019-02\"          2019-02-15 00:00:00 D      H      #> 5 \"2019\"             2019-06-30 00:00:00 M      H      #> 6 \"2019---07\"        2019-06-07 00:00:00 M      H      #> 7 \"\"                 NA                  NA     NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","title":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","text":"function creates date(s) output datetime variable(s)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","text":"","code":"derive_vars_dtm_to_dt(dataset, source_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","text":"dataset Input dataset source_vars list datetime variables created using exprs() dates extracted","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","text":"data frame containing input dataset corresponding date (--DT) variable(s) datetime variables (--DTM) specified source_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Date Variables from Datetime Variables — derive_vars_dtm_to_dt","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adcm <- tribble(   ~USUBJID, ~TRTSDTM,              ~ASTDTM,               ~AENDTM,   \"PAT01\",  \"2012-02-25 23:00:00\", \"2012-02-28 19:00:00\", \"2012-02-25 23:00:00\",   \"PAT01\",  NA,                    \"2012-02-28 19:00:00\", NA,   \"PAT01\",  \"2017-02-25 23:00:00\", \"2013-02-25 19:00:00\", \"2014-02-25 19:00:00\",   \"PAT01\",  \"2017-02-25 16:00:00\", \"2017-02-25 14:00:00\", \"2017-03-25 23:00:00\",   \"PAT01\",  \"2017-02-25 16:00:00\", \"2017-02-25 14:00:00\", \"2017-04-29 14:00:00\", ) %>%   mutate(     TRTSDTM = as_datetime(TRTSDTM),     ASTDTM = as_datetime(ASTDTM),     AENDTM = as_datetime(AENDTM)   )  adcm %>%   derive_vars_dtm_to_dt(exprs(TRTSDTM, ASTDTM, AENDTM)) %>%   select(USUBJID, starts_with(\"TRT\"), starts_with(\"AST\"), starts_with(\"AEN\")) #> # A tibble: 5 x 7 #>   USUBJID TRTSDTM             TRTSDT     ASTDTM              ASTDT      #>   <chr>   <dttm>              <date>     <dttm>              <date>     #> 1 PAT01   2012-02-25 23:00:00 2012-02-25 2012-02-28 19:00:00 2012-02-28 #> 2 PAT01   NA                  NA         2012-02-28 19:00:00 2012-02-28 #> 3 PAT01   2017-02-25 23:00:00 2017-02-25 2013-02-25 19:00:00 2013-02-25 #> 4 PAT01   2017-02-25 16:00:00 2017-02-25 2017-02-25 14:00:00 2017-02-25 #> 5 PAT01   2017-02-25 16:00:00 2017-02-25 2017-02-25 14:00:00 2017-02-25 #> # … with 2 more variables: AENDTM <dttm>, AENDT <date>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"function creates time variable(s) output datetime variable(s)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"","code":"derive_vars_dtm_to_tm(dataset, source_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"dataset Input dataset source_vars list datetime variables created using exprs() time extracted","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"data frame containing input dataset corresponding time (--TM) variable(s) datetime variables (--DTM) specified source_vars correct name.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"names newly added variables automatically set replacing --DTM suffix source_vars --TM. --TM variables created using hms package.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dtm_to_tm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Time Variables from Datetime Variables — derive_vars_dtm_to_tm","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adcm <- tribble(   ~USUBJID, ~TRTSDTM, ~ASTDTM, ~AENDTM,   \"PAT01\", \"2012-02-25 23:41:10\", \"2012-02-28 19:03:00\", \"2013-02-25 23:32:16\",   \"PAT01\", \"\", \"2012-02-28 19:00:00\", \"\",   \"PAT01\", \"2017-02-25 23:00:02\", \"2013-02-25 19:00:15\", \"2014-02-25 19:00:56\",   \"PAT01\", \"2017-02-25 16:00:00\", \"2017-02-25 14:25:00\", \"2017-03-25 23:00:00\",   \"PAT01\", \"2017-02-25 16:05:17\", \"2017-02-25 14:20:00\", \"2018-04-29 14:06:45\", ) %>%   mutate(     TRTSDTM = as_datetime(TRTSDTM),     ASTDTM = as_datetime(ASTDTM),     AENDTM = as_datetime(AENDTM)   )  adcm %>%   derive_vars_dtm_to_tm(exprs(TRTSDTM)) %>%   select(USUBJID, starts_with(\"TRT\"), everything()) #> # A tibble: 5 x 5 #>   USUBJID TRTSDTM             TRTSTM   ASTDTM              AENDTM              #>   <chr>   <dttm>              <time>   <dttm>              <dttm>              #> 1 PAT01   2012-02-25 23:41:10 23:41:10 2012-02-28 19:03:00 2013-02-25 23:32:16 #> 2 PAT01   NA                        NA 2012-02-28 19:00:00 NA                  #> 3 PAT01   2017-02-25 23:00:02 23:00:02 2013-02-25 19:00:15 2014-02-25 19:00:56 #> 4 PAT01   2017-02-25 16:00:00 16:00:00 2017-02-25 14:25:00 2017-03-25 23:00:00 #> 5 PAT01   2017-02-25 16:05:17 16:05:17 2017-02-25 14:20:00 2018-04-29 14:06:45  adcm %>%   derive_vars_dtm_to_tm(exprs(TRTSDTM, ASTDTM, AENDTM)) %>%   select(USUBJID, starts_with(\"TRT\"), starts_with(\"AS\"), starts_with(\"AE\")) #> # A tibble: 5 x 7 #>   USUBJID TRTSDTM             TRTSTM   ASTDTM              ASTTM    #>   <chr>   <dttm>              <time>   <dttm>              <time>   #> 1 PAT01   2012-02-25 23:41:10 23:41:10 2012-02-28 19:03:00 19:03:00 #> 2 PAT01   NA                        NA 2012-02-28 19:00:00 19:00:00 #> 3 PAT01   2017-02-25 23:00:02 23:00:02 2013-02-25 19:00:15 19:00:15 #> 4 PAT01   2017-02-25 16:00:00 16:00:00 2017-02-25 14:25:00 14:25:00 #> 5 PAT01   2017-02-25 16:05:17 16:05:17 2017-02-25 14:20:00 14:20:00 #> # … with 2 more variables: AENDTM <dttm>, AENTM <time>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Duration — derive_vars_duration","title":"Derive Duration — derive_vars_duration","text":"Derives duration two dates, specified variables present input dataset e.g., duration adverse events, relative day, age, ...","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Duration — derive_vars_duration","text":"","code":"derive_vars_duration(   dataset,   new_var,   new_var_unit = NULL,   start_date,   end_date,   in_unit = \"days\",   out_unit = \"days\",   floor_in = TRUE,   add_one = TRUE,   trunc_out = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Duration — derive_vars_duration","text":"dataset Input dataset variables specified start_date end_date parameter expected. new_var Name variable create new_var_unit Name unit variable parameter specified, variable unit created. start_date start date date date-time variable expected. variable must present specified input dataset. Refer derive_vars_dt() impute derive date date character vector date object. end_date end date date date-time variable expected. variable must present specified input dataset. Refer derive_vars_dt() impute derive date date character vector date object. in_unit Input unit See floor_in add_one parameter details. Default: 'days' Permitted Values: 'years', 'months', 'days', 'hours', 'minutes', 'min', 'seconds', 'sec' out_unit Output unit duration derived specified unit Default: 'days' Permitted Values: 'years', 'months', 'days', 'hours', 'minutes', 'min', 'seconds', 'sec' floor_in Round input dates? input dates round respect input unit, e.g., input unit 'days', time input dates ignored. Default: `TRUE`` Permitted Values: TRUE, FALSE add_one Add one input unit? duration non-negative, one input unit added. .e., duration can zero. Default: TRUE Permitted Values: TRUE, FALSE trunc_out Return integer part fractional part duration (output unit) removed, .e., integer part returned. Default: FALSE Permitted Values: TRUE, FALSE","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Duration — derive_vars_duration","text":"input dataset duration unit variable added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Duration — derive_vars_duration","text":"duration derived time start end date specified output unit. end date start date, duration negative. start end date variable must present specified input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Duration — derive_vars_duration","text":"","code":"library(lubridate) library(tibble)  # Derive age in years data <- tribble(   ~USUBJID, ~BRTHDT, ~RANDDT,   \"P01\", ymd(\"1984-09-06\"), ymd(\"2020-02-24\"),   \"P02\", ymd(\"1985-01-01\"), NA,   \"P03\", NA, ymd(\"2021-03-10\"),   \"P04\", NA, NA )  derive_vars_duration(data,   new_var = AAGE,   new_var_unit = AAGEU,   start_date = BRTHDT,   end_date = RANDDT,   out_unit = \"years\",   add_one = FALSE,   trunc_out = TRUE ) #> # A tibble: 4 x 5 #>   USUBJID BRTHDT     RANDDT      AAGE AAGEU #>   <chr>   <date>     <date>     <dbl> <chr> #> 1 P01     1984-09-06 2020-02-24    35 YEARS #> 2 P02     1985-01-01 NA            NA NA    #> 3 P03     NA         2021-03-10    NA NA    #> 4 P04     NA         NA            NA NA     # Derive adverse event duration in days data <- tribble(   ~USUBJID, ~ASTDT, ~AENDT,   \"P01\", ymd(\"2021-03-05\"), ymd(\"2021-03-02\"),   \"P02\", ymd(\"2019-09-18\"), ymd(\"2019-09-18\"),   \"P03\", ymd(\"1985-01-01\"), NA,   \"P04\", NA, NA )  derive_vars_duration(data,   new_var = ADURN,   new_var_unit = ADURU,   start_date = ASTDT,   end_date = AENDT,   out_unit = \"days\" ) #> # A tibble: 4 x 5 #>   USUBJID ASTDT      AENDT      ADURN ADURU #>   <chr>   <date>     <date>     <dbl> <chr> #> 1 P01     2021-03-05 2021-03-02    -3 DAYS  #> 2 P02     2019-09-18 2019-09-18     1 DAYS  #> 3 P03     1985-01-01 NA            NA NA    #> 4 P04     NA         NA            NA NA     # Derive adverse event duration in minutes data <- tribble(   ~USUBJID, ~ADTM, ~TRTSDTM,   \"P01\", ymd_hms(\"2019-08-09T04:30:56\"), ymd_hms(\"2019-08-09T05:00:00\"),   \"P02\", ymd_hms(\"2019-11-11T10:30:00\"), ymd_hms(\"2019-11-11T11:30:00\"),   \"P03\", ymd_hms(\"2019-11-11T00:00:00\"), ymd_hms(\"2019-11-11T04:00:00\"),   \"P04\", NA, ymd_hms(\"2019-11-11T12:34:56\"), )  derive_vars_duration(data,   new_var = ADURN,   new_var_unit = ADURU,   start_date = ADTM,   end_date = TRTSDTM,   in_unit = \"minutes\",   out_unit = \"minutes\",   add_one = FALSE ) #> # A tibble: 4 x 5 #>   USUBJID ADTM                TRTSDTM             ADURN ADURU   #>   <chr>   <dttm>              <dttm>              <dbl> <chr>   #> 1 P01     2019-08-09 04:30:56 2019-08-09 05:00:00    30 MINUTES #> 2 P02     2019-11-11 10:30:00 2019-11-11 11:30:00    60 MINUTES #> 3 P03     2019-11-11 00:00:00 2019-11-11 04:00:00   240 MINUTES #> 4 P04     NA                  2019-11-11 12:34:56    NA NA       # Derive adverse event start time since last dose in hours data <- tribble(   ~USUBJID, ~ASTDTM, ~LDOSEDTM,   \"P01\", ymd_hms(\"2019-08-09T04:30:56\"), ymd_hms(\"2019-08-08T10:05:00\"),   \"P02\", ymd_hms(\"2019-11-11T23:59:59\"), ymd_hms(\"2019-10-11T11:37:00\"),   \"P03\", ymd_hms(\"2019-11-11T00:00:00\"), ymd_hms(\"2019-11-10T23:59:59\"),   \"P04\", ymd_hms(\"2019-11-11T12:34:56\"), NA,   \"P05\", NA, ymd_hms(\"2019-09-28T12:34:56\") ) derive_vars_duration(   data,   new_var = LDRELTM,   new_var_unit = LDRELTMU,   start_date = LDOSEDTM,   end_date = ASTDTM,   in_unit = \"hours\",   out_unit = \"hours\",   add_one = FALSE ) #> # A tibble: 5 x 5 #>   USUBJID ASTDTM              LDOSEDTM            LDRELTM LDRELTMU #>   <chr>   <dttm>              <dttm>                <dbl> <chr>    #> 1 P01     2019-08-09 04:30:56 2019-08-08 10:05:00      18 HOURS    #> 2 P02     2019-11-11 23:59:59 2019-10-11 11:37:00     756 HOURS    #> 3 P03     2019-11-11 00:00:00 2019-11-10 23:59:59       1 HOURS    #> 4 P04     2019-11-11 12:34:56 NA                       NA NA       #> 5 P05     NA                  2019-09-28 12:34:56      NA NA"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Relative Day Variables — derive_vars_dy","title":"Derive Relative Day Variables — derive_vars_dy","text":"Adds relative day variables (--DY) dataset, e.g., ASTDY AENDY.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Relative Day Variables — derive_vars_dy","text":"","code":"derive_vars_dy(dataset, reference_date, source_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Relative Day Variables — derive_vars_dy","text":"dataset Input dataset columns specified reference_date source_vars parameter expected. reference_date start date column, e.g., date first treatment date date-time object column expected. Refer derive_vars_dt() impute derive date date character vector date object. source_vars list datetime date variables created using exprs() dates extracted. can either list date(time) variables named --DY variables corresponding --DT(M) variables e.g. exprs(TRTSDTM, ASTDTM, AENDT) exprs(TRTSDT, ASTDTM, AENDT, DEATHDY = DTHDT). source variable end --DT(M), name resulting --DY variable must provided.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Relative Day Variables — derive_vars_dy","text":"input dataset --DY corresponding --DTM --DT source variable(s) added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Relative Day Variables — derive_vars_dy","text":"relative day derived number days reference date end date. nonnegative, one added. .e., relative day reference date 1. Unless name explicitly specified, name resulting relative day variable generated source variable name replacing DT (DTM appropriate) DY.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Relative Day Variables — derive_vars_dy","text":"","code":"library(tibble) library(lubridate) library(dplyr, warn.conflicts = FALSE)  datain <- tribble(   ~TRTSDTM, ~ASTDTM, ~AENDT,   \"2014-01-17T23:59:59\", \"2014-01-18T13:09:O9\", \"2014-01-20\" ) %>%   mutate(     TRTSDTM = as_datetime(TRTSDTM),     ASTDTM = as_datetime(ASTDTM),     AENDT = ymd(AENDT)   )  derive_vars_dy(   datain,   reference_date = TRTSDTM,   source_vars = exprs(TRTSDTM, ASTDTM, AENDT) ) #> # A tibble: 1 x 6 #>   TRTSDTM             ASTDTM              AENDT      TRTSDY ASTDY AENDY #>   <dttm>              <dttm>              <date>      <dbl> <dbl> <dbl> #> 1 2014-01-17 23:59:59 2014-01-18 13:09:09 2014-01-20      1     2     4  # specifying name of new variables datain <- tribble(   ~TRTSDT, ~DTHDT,   \"2014-01-17\", \"2014-02-01\" ) %>%   mutate(     TRTSDT = ymd(TRTSDT),     DTHDT = ymd(DTHDT)   )  derive_vars_dy(   datain,   reference_date = TRTSDT,   source_vars = exprs(TRTSDT, DEATHDY = DTHDT) ) #> # A tibble: 1 x 4 #>   TRTSDT     DTHDT      TRTSDY DEATHDY #>   <date>     <date>      <dbl>   <dbl> #> 1 2014-01-17 2014-02-01      1      16"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"function adds variables additional dataset input dataset. selection observations additional dataset can depend variables datasets. example, add lowest value (nadir) current observation.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"","code":"derive_vars_joined(   dataset,   dataset_add,   by_vars = NULL,   order = NULL,   new_vars = NULL,   join_vars = NULL,   filter_add = NULL,   filter_join = NULL,   mode = NULL,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"dataset Input dataset variables specified by_vars expected. dataset_add Additional dataset variables specified by_vars, new_vars, join_vars, order argument expected. by_vars Grouping variables two datasets joined specified variables. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>). Permitted Values: list variables created exprs() order Sort order argument set non-null value, observation input dataset first last observation joined dataset selected respect specified order. specified variables expected additional dataset (dataset_add). variable available dataset dataset_add, one dataset_add used sorting. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL new_vars Variables add specified variables additional dataset added output dataset. Variables can renamed naming element, .e., new_vars = exprs(<new name> = <old name>). example new_vars = exprs(var1, var2) adds variables var1 var2 dataset_add input dataset. new_vars = exprs(var1, new_var2 = old_var2) takes var1 old_var2 dataset_add adds input dataset renaming old_var2 new_var2. argument specified set NULL, variables additional dataset (dataset_add) added. Permitted Values: list variables created exprs() join_vars Variables use additional dataset extra variables required additional dataset filter_join specified argument. Variables specified new_vars need repeated join_vars. specified variable exists input dataset additional dataset, suffix \".join\" added variable additional dataset. variables included output dataset. Permitted Values: list variables created exprs() filter_add Filter additional dataset (dataset_add) observations dataset_add fulfilling specified condition joined input dataset. argument specified, observations joined. Permitted Values: condition filter_join Filter joined dataset specified condition applied joined dataset. Therefore variables datasets dataset dataset_add can used. Permitted Values: condition mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Permitted Values: \"first\", \"last\", NULL check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations (restricted) joined dataset unique respect variables order. argument ignored order specified. case error issued independent check_type restricted joined dataset contains one observation observations input dataset. Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"output dataset contains observations variables input dataset additionally variables specified new_vars additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"records additional dataset (dataset_add) restricted matching filter_add condition. input dataset (restricted) additional dataset left joined grouping variables (by_vars). grouping variables specified, full join performed. joined dataset restricted filter_join condition. order specified, observation input dataset first last observation (depending mode) selected. variables specified new_vars renamed (requested) merged input dataset. .e., output dataset contains observations input dataset. observations without matching observation joined dataset new variables set NA. Observations additional dataset matching observation input dataset ignored.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_joined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Variables from an Additional Dataset Based on Conditions from Both Datasets — derive_vars_joined","text":"","code":"library(tibble) library(lubridate) library(dplyr, warn.conflicts = FALSE) library(tidyr)  # Add AVISIT (based on time windows), AWLO, and AWHI adbds <- tribble(   ~USUBJID, ~ADY,   \"1\",       -33,   \"1\",        -2,   \"1\",         3,   \"1\",        24,   \"2\",        NA, )  windows <- tribble(   ~AVISIT,    ~AWLO, ~AWHI,   \"BASELINE\",   -30,     1,   \"WEEK 1\",       2,     7,   \"WEEK 2\",       8,    15,   \"WEEK 3\",      16,    22,   \"WEEK 4\",      23,    30 )  derive_vars_joined(   adbds,   dataset_add = windows,   filter_join = AWLO <= ADY & ADY <= AWHI ) #> # A tibble: 5 x 5 #>   USUBJID   ADY AVISIT    AWLO  AWHI #>   <chr>   <dbl> <chr>    <dbl> <dbl> #> 1 1         -33 NA          NA    NA #> 2 1          -2 BASELINE   -30     1 #> 3 1           3 WEEK 1       2     7 #> 4 1          24 WEEK 4      23    30 #> 5 2          NA NA          NA    NA  # derive the nadir after baseline and before the current observation adbds <- tribble(   ~USUBJID, ~ADY, ~AVAL,   \"1\",        -7,    10,   \"1\",         1,    12,   \"1\",         8,    11,   \"1\",        15,     9,   \"1\",        20,    14,   \"1\",        24,    12,   \"2\",        13,     8 )  derive_vars_joined(   adbds,   dataset_add = adbds,   by_vars = exprs(USUBJID),   order = exprs(AVAL),   new_vars = exprs(NADIR = AVAL),   join_vars = exprs(ADY),   filter_add = ADY > 0,   filter_join = ADY.join < ADY,   mode = \"first\",   check_type = \"none\" ) #> # A tibble: 7 x 4 #>   USUBJID   ADY  AVAL NADIR #>   <chr>   <dbl> <dbl> <dbl> #> 1 1          -7    10    NA #> 2 1           1    12    NA #> 3 1           8    11    12 #> 4 1          15     9    11 #> 5 1          20    14     9 #> 6 1          24    12     9 #> 7 2          13     8    NA  # add highest hemoglobin value within two weeks before AE, # take earliest if more than one adae <- tribble(   ~USUBJID, ~ASTDY,   \"1\",           3,   \"1\",          22,   \"2\",           2 )  adlb <- tribble(   ~USUBJID, ~PARAMCD, ~ADY, ~AVAL,   \"1\",      \"HGB\",       1,   8.5,   \"1\",      \"HGB\",       3,   7.9,   \"1\",      \"HGB\",       5,   8.9,   \"1\",      \"HGB\",       8,   8.0,   \"1\",      \"HGB\",       9,   8.0,   \"1\",      \"HGB\",      16,   7.4,   \"1\",      \"HGB\",      24,   8.1,   \"1\",      \"ALB\",       1,    42, )  derive_vars_joined(   adae,   dataset_add = adlb,   by_vars = exprs(USUBJID),   order = exprs(AVAL, desc(ADY)),   new_vars = exprs(HGB_MAX = AVAL, HGB_DY = ADY),   filter_add = PARAMCD == \"HGB\",   filter_join = ASTDY - 14 <= ADY & ADY <= ASTDY,   mode = \"last\" ) #> # A tibble: 3 x 4 #>   USUBJID ASTDY HGB_MAX HGB_DY #>   <chr>   <dbl>   <dbl>  <dbl> #> 1 1           3     8.5      1 #> 2 1          22     8        8 #> 3 2           2    NA       NA  # Add APERIOD, APERIODC based on ADSL adsl <- tribble(   ~USUBJID, ~AP01SDT,     ~AP01EDT,     ~AP02SDT,     ~AP02EDT,   \"1\",      \"2021-01-04\", \"2021-02-06\", \"2021-02-07\", \"2021-03-07\",   \"2\",      \"2021-02-02\", \"2021-03-02\", \"2021-03-03\", \"2021-04-01\" ) %>%   mutate(across(ends_with(\"DT\"), ymd)) %>%   mutate(STUDYID = \"xyz\")  period_ref <- create_period_dataset(   adsl,   new_vars = exprs(APERSDT = APxxSDT, APEREDT = APxxEDT) )  period_ref #> # A tibble: 4 x 5 #>   STUDYID USUBJID APERIOD APERSDT    APEREDT    #>   <chr>   <chr>     <int> <date>     <date>     #> 1 xyz     1             1 2021-01-04 2021-02-06 #> 2 xyz     1             2 2021-02-07 2021-03-07 #> 3 xyz     2             1 2021-02-02 2021-03-02 #> 4 xyz     2             2 2021-03-03 2021-04-01  adae <- tribble(   ~USUBJID, ~ASTDT,   \"1\",      \"2021-01-01\",   \"1\",      \"2021-01-05\",   \"1\",      \"2021-02-05\",   \"1\",      \"2021-03-05\",   \"1\",      \"2021-04-05\",   \"2\",      \"2021-02-15\", ) %>%   mutate(     ASTDT = ymd(ASTDT),     STUDYID = \"xyz\"   )  derive_vars_joined(   adae,   dataset_add = period_ref,   by_vars = exprs(STUDYID, USUBJID),   join_vars = exprs(APERSDT, APEREDT),   filter_join = APERSDT <= ASTDT & ASTDT <= APEREDT ) #> # A tibble: 6 x 6 #>   USUBJID ASTDT      STUDYID APERIOD APERSDT    APEREDT    #>   <chr>   <date>     <chr>     <int> <date>     <date>     #> 1 1       2021-01-01 xyz          NA NA         NA         #> 2 1       2021-01-05 xyz           1 2021-01-04 2021-02-06 #> 3 1       2021-02-05 xyz           1 2021-01-04 2021-02-06 #> 4 1       2021-03-05 xyz           2 2021-02-07 2021-03-07 #> 5 1       2021-04-05 xyz          NA NA         NA         #> 6 2       2021-02-15 xyz           1 2021-02-02 2021-03-02"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Last Dose — derive_vars_last_dose","title":"Derive Last Dose — derive_vars_last_dose","text":"Add EX source variables last dose input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Last Dose — derive_vars_last_dose","text":"","code":"derive_vars_last_dose(   dataset,   dataset_ex,   filter_ex = NULL,   by_vars = exprs(STUDYID, USUBJID),   dose_id = exprs(),   dose_date,   analysis_date,   single_dose_condition = EXDOSFRQ == \"ONCE\",   new_vars = NULL,   traceability_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Last Dose — derive_vars_last_dose","text":"dataset Input dataset. variables specified by_vars analysis_date parameters expected. dataset_ex Input EX dataset. variables specified by_vars, dose_date, new_vars parameters, source variables traceability_vars parameter expected. filter_ex Filtering condition applied EX dataset. example, can used filter valid dose. Defaults NULL. by_vars Variables join (created rlang::exprs). dose_id Variables identify unique dose (created rlang::exprs). Defaults empty exprs(). dose_date EX dose date variable. date date-time object expected. analysis_date analysis date variable. date date-time object expected. single_dose_condition condition checking dataset_ex single dose. error issued condition true. Defaults (EXDOSFRQ == \"\"). new_vars Variables keep dataset_ex, option rename. Can either variables created rlang::exprs (e.g. exprs(VISIT)), named list returned exprs() (e.g. exprs(LSTEXVIS = VISIT)). set NULL, variables dataset_ex kept without renaming. Defaults NULL. traceability_vars named list returned exprs() listing traceability variables, e.g. exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ). left-hand side (names list elements) gives names traceability variables returned dataset. right-hand side (values list elements) gives values traceability variables returned dataset. can either strings symbols referring existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Last Dose — derive_vars_last_dose","text":"Input dataset EX source variables last dose added.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Last Dose — derive_vars_last_dose","text":"date comparison identify last dose, date-time imputations done follows: dose_date: time imputed 00:00:00 variable date variable analysis_date: time imputed 23:59:59 variable date variable last dose records identified follows: dataset_ex filtered using filter_ex, provided. useful , example, filtering valid dose . datasets dataset dataset_ex joined using by_vars. last dose identified: last dose EX record maximum date dose_date lower equal analysis_date, subject date values non-NA. last dose identified per by_vars. multiple EX records exist dose_date, either dose_id needs supplied (e.g. dose_id = exprs(EXSEQ)) identify unique records, error issued. dose_id supplied, last EX record dose_date sorted dose_id used identify last dose. EX source variables (specified new_vars) last dose appended dataset returned user. function works correctly EX dataset structure single dose per row. study EX dataset multiple doses per row, use create_single_dose_dataset() transform EX dataset single dose per row structure calling derive_vars_last_dose(). variables (specified by_vars) exist dataset dataset_ex, join performed properly error issued. resolve error, use new_vars either keep variables unique dataset_ex, use option rename variables dataset_ex (e.g. new_vars = exprs(LSTEXVIS = VISIT)).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_last_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Last Dose — derive_vars_last_dose","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(ex_single)  # create datetime variables in input datasets ex_single <- derive_vars_dtm(   head(ex_single, 100),   dtc = EXENDTC,   new_vars_prefix = \"EXEN\",   flag_imputation = \"none\" )  adae <- admiral_ae %>%   head(100) %>%   derive_vars_dtm(     dtc = AESTDTC,     new_vars_prefix = \"AST\",     highest_imputation = \"M\"   )  # add last dose vars adae %>%   derive_vars_last_dose(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXENDTM),     new_vars = exprs(EXDOSE, EXTRT, EXSEQ, EXENDTC, VISIT),     dose_date = EXENDTM,     analysis_date = ASTDTM   ) %>%   select(STUDYID, USUBJID, AESEQ, AESTDTC, EXDOSE, EXTRT, EXENDTC, EXSEQ, VISIT) #> # A tibble: 100 x 9 #>    STUDYID     USUBJID    AESEQ AESTDTC    EXDOSE EXTRT  EXENDTC   EXSEQ VISIT   #>    <chr>       <chr>      <dbl> <chr>       <dbl> <chr>  <chr>     <int> <chr>   #>  1 CDISCPILOT… 01-701-10…     1 2014-01-03     NA NA     NA           NA NA      #>  2 CDISCPILOT… 01-701-10…     2 2014-01-03     NA NA     NA           NA NA      #>  3 CDISCPILOT… 01-701-10…     3 2014-01-09     NA NA     NA           NA NA      #>  4 CDISCPILOT… 01-701-10…     3 2012-08-26      0 PLACE… 2012-08-…     7 BASELI… #>  5 CDISCPILOT… 01-701-10…     1 2012-08-07      0 PLACE… 2012-08-…     3 BASELI… #>  6 CDISCPILOT… 01-701-10…     2 2012-08-07      0 PLACE… 2012-08-…     3 BASELI… #>  7 CDISCPILOT… 01-701-10…     4 2012-08-07      0 PLACE… 2012-08-…     3 BASELI… #>  8 CDISCPILOT… 01-701-10…     1 2013-07-21     NA NA     NA           NA NA      #>  9 CDISCPILOT… 01-701-10…     2 2013-08-08     NA NA     NA           NA NA      #> 10 CDISCPILOT… 01-701-10…     1 2014-08-27     NA NA     NA           NA NA      #> # … with 90 more rows  # or with traceability variables adae %>%   derive_vars_last_dose(     dataset_ex = ex_single,     filter_ex = (EXDOSE > 0 | (EXDOSE == 0 & grepl(\"PLACEBO\", EXTRT))) &       !is.na(EXENDTM),     new_vars = exprs(EXDOSE, EXTRT, EXSEQ, EXENDTC, VISIT),     dose_date = EXENDTM,     analysis_date = ASTDTM,     traceability_vars = exprs(LDOSEDOM = \"EX\", LDOSESEQ = EXSEQ, LDOSEVAR = \"EXENDTC\")   ) %>%   select(STUDYID, USUBJID, AESEQ, AESTDTC, EXDOSE, EXTRT, EXENDTC, LDOSEDOM, LDOSESEQ, LDOSEVAR) #> # A tibble: 100 x 10 #>    STUDYID USUBJID AESEQ AESTDTC EXDOSE EXTRT EXENDTC LDOSEDOM LDOSESEQ LDOSEVAR #>    <chr>   <chr>   <dbl> <chr>    <dbl> <chr> <chr>   <chr>       <int> <chr>    #>  1 CDISCP… 01-701…     1 2014-0…     NA NA    NA      NA             NA NA       #>  2 CDISCP… 01-701…     2 2014-0…     NA NA    NA      NA             NA NA       #>  3 CDISCP… 01-701…     3 2014-0…     NA NA    NA      NA             NA NA       #>  4 CDISCP… 01-701…     3 2012-0…      0 PLAC… 2012-0… EX              7 EXENDTC  #>  5 CDISCP… 01-701…     1 2012-0…      0 PLAC… 2012-0… EX              3 EXENDTC  #>  6 CDISCP… 01-701…     2 2012-0…      0 PLAC… 2012-0… EX              3 EXENDTC  #>  7 CDISCP… 01-701…     4 2012-0…      0 PLAC… 2012-0… EX              3 EXENDTC  #>  8 CDISCP… 01-701…     1 2013-0…     NA NA    NA      NA             NA NA       #>  9 CDISCP… 01-701…     2 2013-0…     NA NA    NA      NA             NA NA       #> 10 CDISCP… 01-701…     1 2014-0…     NA NA    NA      NA             NA NA       #> # … with 90 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"Add new variable(s) input dataset based variables another dataset. observations merge can selected condition (filter_add argument) /selecting first last observation group (order mode argument).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"","code":"derive_vars_merged(   dataset,   dataset_add,   by_vars,   order = NULL,   new_vars = NULL,   mode = NULL,   filter_add = NULL,   match_flag = NULL,   check_type = \"warning\",   duplicate_msg = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars, new_vars, order argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL new_vars Variables add specified variables additional dataset added output dataset. Variables can renamed naming element, .e., new_vars = exprs(<new name> = <old name>). example new_vars = exprs(var1, var2) adds variables var1 var2 dataset_add input dataset. new_vars = exprs(var1, new_var2 = old_var2) takes var1 old_var2 dataset_add adds input dataset renaming old_var2 new_var2. argument specified set NULL, variables additional dataset (dataset_add) added. Default: NULL Permitted Values: list variables created exprs() mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition match_flag Match flag argument specified (e.g., match_flag = FLAG), specified variable (e.g., FLAG) added input dataset. variable TRUE selected records dataset_add merged input dataset, NA otherwise. Default: NULL Permitted Values: Variable name check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations (restricted) additional dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" duplicate_msg Message unique check uniqueness check fails, specified message displayed. Default:","code":"paste(\"Dataset `dataset_add` contains duplicate records with respect to\",       enumerate(vars2chr(by_vars)))"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"output dataset contains observations variables input dataset additionally variables specified new_vars additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"records additional dataset (dataset_add) restricted matching filter_add condition. order specified, group first last observation (depending mode) selected. variables specified new_vars renamed (requested) merged input dataset using left_join(). .e., output dataset contains observations input dataset. observations without matching observation additional dataset new variables set NA. Observations additional dataset matching observation input dataset ignored.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add New Variable(s) to the Input Dataset Based on Variables from Another\nDataset — derive_vars_merged","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) data(\"admiral_vs\") data(\"admiral_dm\")  # Merging all dm variables to vs derive_vars_merged(   admiral_vs,   dataset_add = select(admiral_dm, -DOMAIN),   by_vars = exprs(STUDYID, USUBJID) ) %>%   select(STUDYID, USUBJID, VSTESTCD, VISIT, VSTPT, VSSTRESN, AGE, AGEU) #> # A tibble: 29,643 x 8 #>    STUDYID    USUBJID   VSTESTCD VISIT      VSTPT           VSSTRESN   AGE AGEU  #>    <chr>      <chr>     <chr>    <chr>      <chr>              <dbl> <dbl> <chr> #>  1 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER LYING DO…       64    63 YEARS #>  2 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       83    63 YEARS #>  3 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       57    63 YEARS #>  4 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER LYING DO…       68    63 YEARS #>  5 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       59    63 YEARS #>  6 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       71    63 YEARS #>  7 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER LYING DO…       56    63 YEARS #>  8 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER STANDING…       51    63 YEARS #>  9 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER STANDING…       61    63 YEARS #> 10 CDISCPILO… 01-701-1… DIABP    AMBUL ECG… AFTER LYING DO…       67    63 YEARS #> # … with 29,633 more rows  # Merge last weight to adsl data(\"admiral_adsl\") derive_vars_merged(   admiral_adsl,   dataset_add = admiral_vs,   by_vars = exprs(STUDYID, USUBJID),   order = exprs(VSDTC),   mode = \"last\",   new_vars = exprs(LASTWGT = VSSTRESN, LASTWGTU = VSSTRESU),   filter_add = VSTESTCD == \"WEIGHT\",   match_flag = vsdatafl ) %>%   select(STUDYID, USUBJID, AGE, AGEU, LASTWGT, LASTWGTU, vsdatafl) #> # A tibble: 306 x 7 #>    STUDYID      USUBJID       AGE AGEU  LASTWGT LASTWGTU vsdatafl #>    <chr>        <chr>       <dbl> <chr>   <dbl> <chr>    <lgl>    #>  1 CDISCPILOT01 01-701-1015    63 YEARS    53.5 kg       TRUE     #>  2 CDISCPILOT01 01-701-1023    64 YEARS    80.3 kg       TRUE     #>  3 CDISCPILOT01 01-701-1028    71 YEARS    99.8 kg       TRUE     #>  4 CDISCPILOT01 01-701-1033    74 YEARS    88.4 kg       TRUE     #>  5 CDISCPILOT01 01-701-1034    77 YEARS    64.0 kg       TRUE     #>  6 CDISCPILOT01 01-701-1047    85 YEARS    67.1 kg       TRUE     #>  7 CDISCPILOT01 01-701-1057    59 YEARS    NA   NA       NA       #>  8 CDISCPILOT01 01-701-1097    68 YEARS    78.5 kg       TRUE     #>  9 CDISCPILOT01 01-701-1111    81 YEARS    60.8 kg       TRUE     #> 10 CDISCPILOT01 01-701-1115    84 YEARS    78.5 kg       TRUE     #> # … with 296 more rows  # Derive treatment start datetime (TRTSDTM) data(admiral_ex)  ## Impute exposure start date to first date/time ex_ext <- derive_vars_dtm(   admiral_ex,   dtc = EXSTDTC,   new_vars_prefix = \"EXST\",   highest_imputation = \"M\", )  ## Add first exposure datetime and imputation flags to adsl derive_vars_merged(   select(admiral_dm, STUDYID, USUBJID),   dataset_add = ex_ext,   by_vars = exprs(STUDYID, USUBJID),   new_vars = exprs(TRTSDTM = EXSTDTM, TRTSDTF = EXSTDTF, TRTSTMF = EXSTTMF),   order = exprs(EXSTDTM),   mode = \"first\" ) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID     TRTSDTM             TRTSDTF TRTSTMF #>    <chr>        <chr>       <dttm>              <chr>   <chr>   #>  1 CDISCPILOT01 01-701-1015 2014-01-02 00:00:00 NA      H       #>  2 CDISCPILOT01 01-701-1023 2012-08-05 00:00:00 NA      H       #>  3 CDISCPILOT01 01-701-1028 2013-07-19 00:00:00 NA      H       #>  4 CDISCPILOT01 01-701-1033 2014-03-18 00:00:00 NA      H       #>  5 CDISCPILOT01 01-701-1034 2014-07-01 00:00:00 NA      H       #>  6 CDISCPILOT01 01-701-1047 2013-02-12 00:00:00 NA      H       #>  7 CDISCPILOT01 01-701-1057 NA                  NA      NA      #>  8 CDISCPILOT01 01-701-1097 2014-01-01 00:00:00 NA      H       #>  9 CDISCPILOT01 01-701-1111 2012-09-07 00:00:00 NA      H       #> 10 CDISCPILOT01 01-701-1115 2012-11-30 00:00:00 NA      H       #> # … with 296 more rows  # Derive treatment start datetime (TRTSDTM) data(admiral_ex)  ## Impute exposure start date to first date/time ex_ext <- derive_vars_dtm(   admiral_ex,   dtc = EXSTDTC,   new_vars_prefix = \"EXST\",   highest_imputation = \"M\", )  ## Add first exposure datetime and imputation flags to adsl derive_vars_merged(   select(admiral_dm, STUDYID, USUBJID),   dataset_add = ex_ext,   filter_add = !is.na(EXSTDTM),   by_vars = exprs(STUDYID, USUBJID),   new_vars = exprs(TRTSDTM = EXSTDTM, TRTSDTF = EXSTDTF, TRTSTMF = EXSTTMF),   order = exprs(EXSTDTM),   mode = \"first\" ) #> # A tibble: 306 x 5 #>    STUDYID      USUBJID     TRTSDTM             TRTSDTF TRTSTMF #>    <chr>        <chr>       <dttm>              <chr>   <chr>   #>  1 CDISCPILOT01 01-701-1015 2014-01-02 00:00:00 NA      H       #>  2 CDISCPILOT01 01-701-1023 2012-08-05 00:00:00 NA      H       #>  3 CDISCPILOT01 01-701-1028 2013-07-19 00:00:00 NA      H       #>  4 CDISCPILOT01 01-701-1033 2014-03-18 00:00:00 NA      H       #>  5 CDISCPILOT01 01-701-1034 2014-07-01 00:00:00 NA      H       #>  6 CDISCPILOT01 01-701-1047 2013-02-12 00:00:00 NA      H       #>  7 CDISCPILOT01 01-701-1057 NA                  NA      NA      #>  8 CDISCPILOT01 01-701-1097 2014-01-01 00:00:00 NA      H       #>  9 CDISCPILOT01 01-701-1111 2012-09-07 00:00:00 NA      H       #> 10 CDISCPILOT01 01-701-1115 2012-11-30 00:00:00 NA      H       #> # … with 296 more rows  # Derive treatment end datetime (TRTEDTM) ## Impute exposure end datetime to last time, no date imputation ex_ext <- derive_vars_dtm(   admiral_ex,   dtc = EXENDTC,   new_vars_prefix = \"EXEN\",   time_imputation = \"last\", )  ## Add last exposure datetime and imputation flag to adsl derive_vars_merged(   select(admiral_dm, STUDYID, USUBJID),   dataset_add = ex_ext,   filter_add = !is.na(EXENDTM),   by_vars = exprs(STUDYID, USUBJID),   new_vars = exprs(TRTEDTM = EXENDTM, TRTETMF = EXENTMF),   order = exprs(EXENDTM),   mode = \"last\" ) #> # A tibble: 306 x 4 #>    STUDYID      USUBJID     TRTEDTM             TRTETMF #>    <chr>        <chr>       <dttm>              <chr>   #>  1 CDISCPILOT01 01-701-1015 2014-07-02 23:59:59 H       #>  2 CDISCPILOT01 01-701-1023 2012-09-01 23:59:59 H       #>  3 CDISCPILOT01 01-701-1028 2014-01-14 23:59:59 H       #>  4 CDISCPILOT01 01-701-1033 2014-03-31 23:59:59 H       #>  5 CDISCPILOT01 01-701-1034 2014-12-30 23:59:59 H       #>  6 CDISCPILOT01 01-701-1047 2013-03-09 23:59:59 H       #>  7 CDISCPILOT01 01-701-1057 NA                  NA      #>  8 CDISCPILOT01 01-701-1097 2014-07-09 23:59:59 H       #>  9 CDISCPILOT01 01-701-1111 2012-09-16 23:59:59 H       #> 10 CDISCPILOT01 01-701-1115 2013-01-23 23:59:59 H       #> # … with 296 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","title":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","text":"function deprecated, please use derive_vars_dt() derive_vars_merged() instead. Merge imputed date variable date imputation  flag dataset input dataset. observations merge can selected condition /selecting first last observation group.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","text":"","code":"derive_vars_merged_dt(   dataset,   dataset_add,   by_vars,   order = NULL,   new_vars_prefix,   filter_add = NULL,   mode = NULL,   dtc,   date_imputation = NULL,   flag_imputation = \"auto\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE,   check_type = \"warning\",   duplicate_msg = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars, dtc, order argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. imputed date variable can specified well (see examples ). Please note NA considered last value. .e., order variable NA mode = \"last\", observation chosen mode = \"first\" observation chosen observations variable 'NA'. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL) NULL new_vars_prefix Prefix used output variable(s). character scalar expected. date variable \"DT\" appended specified prefix date imputation flag \"DTF\". .e., new_vars_prefix = \"AST\" variables ASTDT ASTDTF created. filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\" flag_imputation Whether date imputation flag must also derived. \"auto\" specified, date imputation flag derived date_imputation argument null. Default: \"auto\" Permitted Values: \"auto\", \"date\" \"none\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"MID\"). Permitted Values: TRUE, FALSE Default: FALSE check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations (restricted) additional dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" duplicate_msg Message unique check uniqueness check fails, specified message displayed. Default:","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" ) paste(\"Dataset `dataset_add` contains duplicate records with respect to\",       enumerate(vars2chr(by_vars)))"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","text":"output dataset contains observations variables input dataset additionally variable <new_vars_prefix>DT optionally variable <new_vars_prefix>DTF derived additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge a (Imputed) Date Variable — derive_vars_merged_dt","text":"additional dataset restricted observations matching filter_add condition. date variable requested, date imputation flag added additional dataset. order specified, group first last observation (depending mode) selected. date flag variables merged input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","title":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","text":"function deprecated, please use derive_vars_dtm() derive_vars_merged() instead. Merge imputed datetime variable, date imputation  flag, time imputation flag dataset input dataset. observations merge can selected condition /selecting first last observation group.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","text":"","code":"derive_vars_merged_dtm(   dataset,   dataset_add,   by_vars,   order = NULL,   new_vars_prefix,   filter_add = NULL,   mode = NULL,   dtc,   date_imputation = NULL,   time_imputation = \"00:00:00\",   flag_imputation = \"auto\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE,   check_type = \"warning\",   duplicate_msg = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Additional dataset variables specified by_vars, dtc, order argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. imputed datetime variable can specified well (see examples ). Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL) NULL new_vars_prefix Prefix used output variable(s). character scalar expected. date variable \"DT\" appended specified prefix, date imputation flag \"DTF\", time imputation flag \"TMF\". .e., new_vars_prefix = \"AST\" variables ASTDT, ASTDTF, ASTTMF created. filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\". time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day. argument ignored highest_imputation = \"n\". Default: \"first\". flag_imputation Whether date/time imputation flag(s) must also derived. \"auto\" specified, date imputation flag derived date_imputation argument null time imputation flag derived time_imputation argument null Default: \"auto\" Permitted Values: \"auto\", \"date\", \"time\", \"\", \"none\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"mid\"). Permitted Values: TRUE, FALSE Default: FALSE check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations (restricted) additional dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" duplicate_msg Message unique check uniqueness check fails, specified message displayed. Default:","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" ) paste(\"Dataset `dataset_add` contains duplicate records with respect to\",       enumerate(vars2chr(by_vars)))"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","text":"output dataset contains observations variables input dataset additionally variable <new_vars_prefix>DT optionally variables <new_vars_prefix>DTF <new_vars_prefix>TMF derived additional dataset (dataset_add).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge a (Imputed) Datetime Variable — derive_vars_merged_dtm","text":"additional dataset restricted observations matching filter_add condition. datetime variable requested, date imputation flag time imputation flag added additional dataset. order specified, group first last observation (depending mode) selected. date flag variables merged input dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","title":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","text":"Merge user-defined lookup table input dataset. Optionally print list records input dataset corresponding mapping lookup table.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","text":"","code":"derive_vars_merged_lookup(   dataset,   dataset_add,   by_vars,   order = NULL,   new_vars = NULL,   mode = NULL,   filter_add = NULL,   check_type = \"warning\",   duplicate_msg = NULL,   print_not_mapped = TRUE )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","text":"dataset Input dataset variables specified by_vars argument expected. dataset_add Lookup table variables specified by_vars argument expected. by_vars Grouping variables input dataset selected observations additional dataset merged specified variables. variables must unique key selected observations. Variables additional dataset can renamed naming element, .e., by_vars = exprs(<name input dataset> = <name additional dataset>), similar dplyr joins. Permitted Values: list variables created exprs() order Sort order argument set non-null value, group first last observation additional dataset selected respect specified order. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL new_vars Variables add specified variables additional dataset added output dataset. Variables can renamed naming element, .e., new_vars = exprs(<new name> = <old name>). example new_vars = exprs(var1, var2) adds variables var1 var2 dataset_add input dataset. new_vars = exprs(var1, new_var2 = old_var2) takes var1 old_var2 dataset_add adds input dataset renaming old_var2 new_var2. argument specified set NULL, variables additional dataset (dataset_add) added. Default: NULL Permitted Values: list variables created exprs() mode Selection mode Determines first last observation selected. order argument specified, mode must non-null. order argument specified, mode argument ignored. Default: NULL Permitted Values: \"first\", \"last\", NULL filter_add Filter additional dataset (dataset_add) observations fulfilling specified condition taken account merging. argument specified, observations considered. Default: NULL Permitted Values: condition check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations (restricted) additional dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\" duplicate_msg Message unique check uniqueness check fails, specified message displayed. Default:   print_not_mapped Print list unique by_vars values corresponding records lookup table? Default: TRUE Permitted Values: TRUE, FALSE","code":"paste(\"Dataset `dataset_add` contains duplicate records with respect to\",       enumerate(vars2chr(by_vars)))"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","text":"output dataset contains observations variables input dataset, add variables specified new_vars lookup table specified dataset_add. Optionally prints list unique by_vars values corresponding records lookup table (specifying print_not_mapped = TRUE).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_merged_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Lookup Table with Source Dataset — derive_vars_merged_lookup","text":"","code":"library(admiral.test) library(tibble) library(dplyr, warn.conflicts = FALSE) data(\"admiral_vs\") param_lookup <- tribble(   ~VSTESTCD, ~VSTEST, ~PARAMCD, ~PARAM,   \"SYSBP\", \"Systolic Blood Pressure\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\",   \"WEIGHT\", \"Weight\", \"WEIGHT\", \"Weight (kg)\",   \"HEIGHT\", \"Height\", \"HEIGHT\", \"Height (cm)\",   \"TEMP\", \"Temperature\", \"TEMP\", \"Temperature (C)\",   \"MAP\", \"Mean Arterial Pressure\", \"MAP\", \"Mean Arterial Pressure (mmHg)\",   \"BMI\", \"Body Mass Index\", \"BMI\", \"Body Mass Index(kg/m^2)\",   \"BSA\", \"Body Surface Area\", \"BSA\", \"Body Surface Area(m^2)\" ) derive_vars_merged_lookup(   dataset = admiral_vs,   dataset_add = param_lookup,   by_vars = exprs(VSTESTCD),   new_vars = exprs(PARAMCD),   print_not_mapped = TRUE ) #> List of `VSTESTCD` not mapped:  #> # A tibble: 2 x 1 #>   VSTESTCD #>   <chr>    #> 1 DIABP    #> 2 PULSE    #> Run `get_not_mapped()` to access the full list #> # A tibble: 29,643 x 25 #>    STUDYID  DOMAIN USUBJID VSSEQ VSTESTCD VSTEST VSPOS VSORRES VSORRESU VSSTRESC #>    <chr>    <chr>  <chr>   <dbl> <chr>    <chr>  <chr> <chr>   <chr>    <chr>    #>  1 CDISCPI… VS     01-701…     1 DIABP    Diast… SUPI… 64      mmHg     64       #>  2 CDISCPI… VS     01-701…     2 DIABP    Diast… STAN… 83      mmHg     83       #>  3 CDISCPI… VS     01-701…     3 DIABP    Diast… STAN… 57      mmHg     57       #>  4 CDISCPI… VS     01-701…     4 DIABP    Diast… SUPI… 68      mmHg     68       #>  5 CDISCPI… VS     01-701…     5 DIABP    Diast… STAN… 59      mmHg     59       #>  6 CDISCPI… VS     01-701…     6 DIABP    Diast… STAN… 71      mmHg     71       #>  7 CDISCPI… VS     01-701…     7 DIABP    Diast… SUPI… 56      mmHg     56       #>  8 CDISCPI… VS     01-701…     8 DIABP    Diast… STAN… 51      mmHg     51       #>  9 CDISCPI… VS     01-701…     9 DIABP    Diast… STAN… 61      mmHg     61       #> 10 CDISCPI… VS     01-701…    10 DIABP    Diast… SUPI… 67      mmHg     67       #> # … with 29,633 more rows, and 15 more variables: VSSTRESN <dbl>, #> #   VSSTRESU <chr>, VSSTAT <chr>, VSLOC <chr>, VSBLFL <chr>, VISITNUM <dbl>, #> #   VISIT <chr>, VISITDY <dbl>, VSDTC <chr>, VSDY <dbl>, VSTPT <chr>, #> #   VSTPTNUM <dbl>, VSELTM <chr>, VSTPTREF <chr>, PARAMCD <chr>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"function adds subperiod, period, phase variables like P01S1SDT, P01S2SDT, AP01SDTM, AP02SDTM, TRT01A, TRT02A, PH1SDT, PH2SDT, ... input dataset. values variables defined period reference dataset one observations per patient subperiod, period, phase.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"","code":"derive_vars_period(   dataset,   dataset_ref,   new_vars,   subject_keys = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"dataset ADSL dataset variables specified subject_keys expected. dataset_ref Period reference dataset variables specified new_vars subject_keys expected. subperiod variables requested, APERIOD ASPER expected. period variables requested. APERIOD expected. phase variables requested, APHASEN expected. new_vars New variables named list variables like exprs(PHwSDT = PHSDT, PHwEDT = PHEDT, APHASEw = APHASE) expected. left hand side elements defines set variables (CDISC notation) added output dataset. right hand side defines source variable period reference dataset. lower case letter \"w\"  used refers phase variable, lower case letters \"xx\" used refers period variable, \"xx\" \"w\" used refers subperiod variable. one type must used, e.g., left hand side values must refer period variables. allowed mix example period subperiod variables. period subperiod variables required, separate calls must used. subject_keys Variables uniquely identify subject list expressions expressions symbols returned exprs() expected.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"input dataset subperiod/period/phase variables added (see \"Details\" section)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"subperiod/period/phase period reference dataset element new_vars variable (LHS value new_vars) added output dataset set value source variable (RHS value new_vars.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Subperiod, Period, or Phase Variables to ADSL — derive_vars_period","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adsl <- tibble(STUDYID = \"xyz\", USUBJID = c(\"1\", \"2\"))  # Add period variables to ADSL period_ref <- tribble(   ~USUBJID, ~APERIOD, ~APERSDT,     ~APEREDT,   \"1\",             1, \"2021-01-04\", \"2021-02-06\",   \"1\",             2, \"2021-02-07\", \"2021-03-07\",   \"2\",             1, \"2021-02-02\", \"2021-03-02\",   \"2\",             2, \"2021-03-03\", \"2021-04-01\" ) %>%   mutate(     STUDYID = \"xyz\",     APERIOD = as.integer(APERIOD),     across(matches(\"APER[ES]DT\"), ymd)   )  derive_vars_period(   adsl,   dataset_ref = period_ref,   new_vars = exprs(APxxSDT = APERSDT, APxxEDT = APEREDT) ) %>%   select(STUDYID, USUBJID, AP01SDT, AP01EDT, AP02SDT, AP02EDT) #> # A tibble: 2 x 6 #>   STUDYID USUBJID AP01SDT    AP01EDT    AP02SDT    AP02EDT    #>   <chr>   <chr>   <date>     <date>     <date>     <date>     #> 1 xyz     1       2021-01-04 2021-02-06 2021-02-07 2021-03-07 #> 2 xyz     2       2021-02-02 2021-03-02 2021-03-03 2021-04-01  # Add phase variables to ADSL phase_ref <- tribble(   ~USUBJID, ~APHASEN, ~PHSDT,       ~PHEDT,       ~APHASE,   \"1\",             1, \"2021-01-04\", \"2021-02-06\", \"TREATMENT\",   \"1\",             2, \"2021-02-07\", \"2021-03-07\", \"FUP\",   \"2\",             1, \"2021-02-02\", \"2021-03-02\", \"TREATMENT\" ) %>%   mutate(     STUDYID = \"xyz\",     APHASEN = as.integer(APHASEN),     across(matches(\"PH[ES]DT\"), ymd)   )  derive_vars_period(   adsl,   dataset_ref = phase_ref,   new_vars = exprs(PHwSDT = PHSDT, PHwEDT = PHEDT, APHASEw = APHASE) ) %>%   select(STUDYID, USUBJID, PH1SDT, PH1EDT, PH2SDT, PH2EDT, APHASE1, APHASE2) #> # A tibble: 2 x 8 #>   STUDYID USUBJID PH1SDT     PH1EDT     PH2SDT     PH2EDT     APHASE1   APHASE2 #>   <chr>   <chr>   <date>     <date>     <date>     <date>     <chr>     <chr>   #> 1 xyz     1       2021-01-04 2021-02-06 2021-02-07 2021-03-07 TREATMENT FUP     #> 2 xyz     2       2021-02-02 2021-03-02 NA         NA         TREATMENT NA       # Add subperiod variables to ADSL subperiod_ref <- tribble(   ~USUBJID, ~APERIOD, ~ASPER, ~ASPRSDT,     ~ASPREDT,   \"1\",             1,      1, \"2021-01-04\", \"2021-01-19\",   \"1\",             1,      2, \"2021-01-20\", \"2021-02-06\",   \"1\",             2,      1, \"2021-02-07\", \"2021-03-07\",   \"2\",             1,      1, \"2021-02-02\", \"2021-03-02\",   \"2\",             2,      1, \"2021-03-03\", \"2021-04-01\" ) %>%   mutate(     STUDYID = \"xyz\",     APERIOD = as.integer(APERIOD),     ASPER = as.integer(ASPER),     across(matches(\"ASPR[ES]DT\"), ymd)   )  derive_vars_period(   adsl,   dataset_ref = subperiod_ref,   new_vars = exprs(PxxSwSDT = ASPRSDT, PxxSwEDT = ASPREDT) ) %>%   select(STUDYID, USUBJID, P01S1SDT, P01S1EDT, P01S2SDT, P01S2EDT, P02S1SDT, P02S1EDT) #> # A tibble: 2 x 8 #>   STUDYID USUBJID P01S1SDT   P01S1EDT   P01S2SDT   P01S2EDT   P02S1SDT   #>   <chr>   <chr>   <date>     <date>     <date>     <date>     <date>     #> 1 xyz     1       2021-01-04 2021-01-19 2021-01-20 2021-02-06 2021-02-07 #> 2 xyz     2       2021-02-02 2021-03-02 NA         NA         2021-03-03 #> # … with 1 more variable: P02S1EDT <date>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Query Variables — derive_vars_query","title":"Derive Query Variables — derive_vars_query","text":"Derive Query Variables","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Query Variables — derive_vars_query","text":"","code":"derive_vars_query(dataset, dataset_queries)"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Query Variables — derive_vars_query","text":"dataset Input dataset. dataset_queries dataset containing required columns VAR_PREFIX, QUERY_NAME, TERM_LEVEL, TERM_NAME, TERM_ID, optional columns QUERY_ID, QUERY_SCOPE, QUERY_SCOPE_NUM. content dataset verified assert_valid_queries(). create_query_data() can used create dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Query Variables — derive_vars_query","text":"input dataset query variables derived.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Query Variables — derive_vars_query","text":"function can used derive CDISC variables SMQzzNAM, SMQzzCD, SMQzzSC, SMQzzSCN, CQzzNAM ADAE ADMH, variables SDGzzNAM, SDGzzCD, SDGzzSC ADCM. example usage function can found OCCDS vignette. query dataset expected input function. See Queries Dataset Documentation vignette descriptions, call data(\"queries\") example query dataset. unique element VAR_PREFIX, corresponding \"NAM\" variable created. unique VAR_PREFIX, QUERY_ID \"\" NA, corresponding \"CD\" variable created; similarly, QUERY_SCOPE \"\" NA, corresponding \"SC\" variable created; QUERY_SCOPE_NUM \"\" NA, corresponding \"SCN\" variable created. record dataset, \"NAM\" variable takes value QUERY_NAME value TERM_NAME TERM_ID dataset_queries matches value respective TERM_LEVEL dataset. Note TERM_NAME dataset_queries dataset may NA TERM_ID non-NA vice versa. \"CD\", \"SC\", \"SCN\" variables derived accordingly based QUERY_ID, QUERY_SCOPE, QUERY_SCOPE_NUM respectively, whenever missing.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Query Variables — derive_vars_query","text":"","code":"library(tibble) data(\"queries\") adae <- tribble(   ~USUBJID, ~ASTDTM, ~AETERM, ~AESEQ, ~AEDECOD, ~AELLT, ~AELLTCD,   \"01\", \"2020-06-02 23:59:59\", \"ALANINE AMINOTRANSFERASE ABNORMAL\",   3, \"Alanine aminotransferase abnormal\", NA_character_, NA_integer_,   \"02\", \"2020-06-05 23:59:59\", \"BASEDOW'S DISEASE\",   5, \"Basedow's disease\", NA_character_, 1L,   \"03\", \"2020-06-07 23:59:59\", \"SOME TERM\",   2, \"Some query\", \"Some term\", NA_integer_,   \"05\", \"2020-06-09 23:59:59\", \"ALVEOLAR PROTEINOSIS\",   7, \"Alveolar proteinosis\", NA_character_, NA_integer_ ) derive_vars_query(adae, queries) #> # A tibble: 4 x 24 #>   USUBJID ASTDTM  AETERM   AESEQ AEDECOD  AELLT AELLTCD SMQ02NAM SMQ02CD SMQ02SC #>   <chr>   <chr>   <chr>    <dbl> <chr>    <chr>   <int> <chr>      <int> <chr>   #> 1 01      2020-0… ALANINE…     3 Alanine… NA         NA NA            NA NA      #> 2 02      2020-0… BASEDOW…     5 Basedow… NA          1 NA            NA NA      #> 3 03      2020-0… SOME TE…     2 Some qu… Some…      NA NA            NA NA      #> 4 05      2020-0… ALVEOLA…     7 Alveola… NA         NA NA            NA NA      #> # … with 14 more variables: SMQ02SCN <dbl>, SMQ03NAM <chr>, SMQ03CD <int>, #> #   SMQ03SC <chr>, SMQ03SCN <dbl>, SMQ05NAM <chr>, SMQ05CD <int>, #> #   SMQ05SC <chr>, SMQ05SCN <dbl>, CQ01NAM <chr>, CQ04NAM <chr>, CQ04CD <int>, #> #   CQ06NAM <chr>, CQ06CD <int>"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"Adds variables vertical dataset transposing wide one.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"","code":"derive_vars_transposed(   dataset,   dataset_merge,   by_vars,   key_var,   value_var,   filter = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"dataset Input dataset variables specified by_vars parameter required dataset_merge Dataset transpose merge variables specified by_vars, key_var value_var parameters expected by_vars Keys used merge dataset_merge dataset key_var variable dataset_merge containing names transposed variables value_var variable dataset_merge containing values transposed variables filter Expression used restrict records dataset_merge prior transposing","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"input dataset transposed variables dataset_merge added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"filtering dataset_merge based upon condition provided filter, dataset transposed subsequently merged onto dataset using by_vars keys.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/derive_vars_transposed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Variables by Transposing and Merging a Second Dataset — derive_vars_transposed","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE)  cm <- tribble(   ~USUBJID, ~CMGRPID, ~CMREFID, ~CMDECOD,   \"BP40257-1001\", \"14\", \"1192056\", \"PARACETAMOL\",   \"BP40257-1001\", \"18\", \"2007001\", \"SOLUMEDROL\",   \"BP40257-1002\", \"19\", \"2791596\", \"SPIRONOLACTONE\" ) facm <- tribble(   ~USUBJID, ~FAGRPID, ~FAREFID, ~FATESTCD, ~FASTRESC,   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC1CD\", \"N\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC2CD\", \"N02\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC3CD\", \"N02B\",   \"BP40257-1001\", \"1\", \"1192056\", \"CMATC4CD\", \"N02BE\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC1CD\", \"D\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC2CD\", \"D10\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC3CD\", \"D10A\",   \"BP40257-1001\", \"1\", \"2007001\", \"CMATC4CD\", \"D10AA\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC1CD\", \"D\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC2CD\", \"D07\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC3CD\", \"D07A\",   \"BP40257-1001\", \"2\", \"2007001\", \"CMATC4CD\", \"D07AA\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC1CD\", \"H\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC2CD\", \"H02\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC3CD\", \"H02A\",   \"BP40257-1001\", \"3\", \"2007001\", \"CMATC4CD\", \"H02AB\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC1CD\", \"C\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC2CD\", \"C03\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC3CD\", \"C03D\",   \"BP40257-1002\", \"1\", \"2791596\", \"CMATC4CD\", \"C03DA\" )  cm %>%   derive_vars_transposed(     facm,     by_vars = exprs(USUBJID, CMREFID = FAREFID),     key_var = FATESTCD,     value_var = FASTRESC   ) %>%   select(USUBJID, CMDECOD, starts_with(\"CMATC\")) #> # A tibble: 5 x 6 #>   USUBJID      CMDECOD        CMATC1CD CMATC2CD CMATC3CD CMATC4CD #>   <chr>        <chr>          <chr>    <chr>    <chr>    <chr>    #> 1 BP40257-1001 PARACETAMOL    N        N02      N02B     N02BE    #> 2 BP40257-1001 SOLUMEDROL     D        D10      D10A     D10AA    #> 3 BP40257-1001 SOLUMEDROL     D        D07      D07A     D07AA    #> 4 BP40257-1001 SOLUMEDROL     H        H02      H02A     H02AB    #> 5 BP40257-1002 SPIRONOLACTONE C        C03      C03D     C03DA"},{"path":"https://pharmaverse.github.io/admiral/reference/dose_freq_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Defined Dose Frequencies — dose_freq_lookup","title":"Pre-Defined Dose Frequencies — dose_freq_lookup","text":"pre-defined dose frequencies sourced CDISC. number rows generate using create_single_dose_dataset() arguments start_date end_date derived DOSE_COUNT, DOSE_WINDOW, CONVERSION_FACTOR appropriate functions lubridate.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dose_freq_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Defined Dose Frequencies — dose_freq_lookup","text":"","code":"dose_freq_lookup"},{"path":"https://pharmaverse.github.io/admiral/reference/dose_freq_lookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-Defined Dose Frequencies — dose_freq_lookup","text":"object class tbl_df (inherits tbl, data.frame) 86 rows 5 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dose_freq_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-Defined Dose Frequencies — dose_freq_lookup","text":"NCI_CODE CDISC_VALUE included CDISC source traceability. DOSE_COUNT represents number doses received one single unit DOSE_WINDOW. example, CDISC_VALUE==\"10 DAYS PER MONTH\", DOSE_WINDOW==\"MONTH\" DOSE_COUNT==10. Similarly, CDISC_VALUE==\"EVERY 2 WEEKS\", DOSE_WINDOW==\"WEEK\" DOSE_COUNT==0.5 (yield one dose every two weeks). CONVERSION_FACTOR used convert DOSE_WINDOW units \"WEEK\", \"MONTH\", \"YEAR\" unit \"DAY\". example, CDISC_VALUE==\"10 DAYS PER MONTH\", CONVERSION_FACTOR 0.0329. One day month assumed 1 / 30.4375 month (one day assumed 1/365.25 year). Given start_date end_date aggregate dataset, CONVERSION_FACTOR used calculate specific dates forstart_date end_date resulting single dose dataset doses occur. cases, doses assumed occur evenly spaced increments interval. see entire table console, run print(dose_freq_lookup).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/dt_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dt_level object — dt_level","title":"Create a dt_level object — dt_level","text":"Create dt_level object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dt_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dt_level object — dt_level","text":"","code":"dt_level(level)"},{"path":"https://pharmaverse.github.io/admiral/reference/dt_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dt_level object — dt_level","text":"level Date level Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"n\" (none, lowest level)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dt_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dt_level object — dt_level","text":"dt_level object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dt_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dt_level object — dt_level","text":"dt_level object ordered factor, .e., two objects can compared.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/dthcaus_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dthcaus_source Object — dthcaus_source","title":"Create a dthcaus_source Object — dthcaus_source","text":"Create dthcaus_source Object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dthcaus_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dthcaus_source Object — dthcaus_source","text":"","code":"dthcaus_source(   dataset_name,   filter,   date,   order = NULL,   mode = \"first\",   dthcaus,   traceability_vars = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/dthcaus_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dthcaus_source Object — dthcaus_source","text":"dataset_name name dataset, .e. string, used search death cause. filter expression used filtering dataset. date date datetime variable used sorting dataset. order Sort order Additional variables used sorting dataset ordered date order. Can used avoid duplicate record warning. Default: NULL Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) NULL mode One \"first\" \"last\". Either \"first\" \"last\" observation preserved dataset ordered date. dthcaus variable name string literal --- variable name, e.g., AEDECOD, variable source dataset used assign values DTHCAUS; string literal, e.g. \"Adverse Event\", fixed value assigned DTHCAUS. traceability_vars named list returned exprs() listing traceability variables, e.g. exprs(DTHDOM = \"DS\", DTHSEQ = DSSEQ). left-hand side (names list elements) gives names traceability variables returned dataset. right-hand side (values list elements) gives values traceability variables returned dataset. can either strings symbols referring existing variables.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dthcaus_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dthcaus_source Object — dthcaus_source","text":"object class \"dthcaus_source\".","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/dthcaus_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dthcaus_source Object — dthcaus_source","text":"","code":"# Deaths sourced from AE src_ae <- dthcaus_source(   dataset_name = \"ae\",   filter = AEOUT == \"FATAL\",   date = AEDTHDT,   mode = \"first\",   dthcaus = AEDECOD )  # Deaths sourced from DS src_ds <- dthcaus_source(   dataset_name = \"ds\",   filter = DSDECOD == \"DEATH\",   date = DSSTDT,   mode = \"first\",   dthcaus = DSTERM )"},{"path":"https://pharmaverse.github.io/admiral/reference/dtm_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dtm_level object — dtm_level","title":"Create a dtm_level object — dtm_level","text":"Create dtm_level object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dtm_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dtm_level object — dtm_level","text":"","code":"dtm_level(level)"},{"path":"https://pharmaverse.github.io/admiral/reference/dtm_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dtm_level object — dtm_level","text":"level Datetime level Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"h\" (hour), \"m\" (minute), \"s\" (second, lowest level), \"n\" (none)","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dtm_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dtm_level object — dtm_level","text":"dtm_level object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/dtm_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dtm_level object — dtm_level","text":"dtm_level object ordered factor, .e., two objects can compared.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/event.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a event Object — event","title":"Create a event Object — event","text":"event object used define events input derive_extreme_event() function.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a event Object — event","text":"","code":"event(condition, set_values_to = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a event Object — event","text":"condition unquoted condition selecting observations, contribute extreme event. set_values_to named list returned exprs() defining variables set extreme answer, e.g. exprs(PARAMCD = \"WSP\", PARAM  = \"Worst Sleeping Problems\". values must symbol, character string, numeric value, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a event Object — event","text":"object class event","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/event_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an event_source Object — event_source","title":"Create an event_source Object — event_source","text":"event_source objects used define events input derive_param_tte() function.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/event_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an event_source Object — event_source","text":"","code":"event_source(dataset_name, filter = NULL, date, set_values_to = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/event_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an event_source Object — event_source","text":"dataset_name name source dataset name refers dataset provided source_datasets parameter derive_param_tte(). filter unquoted condition selecting observations dataset events possible censoring time points. date variable providing date event censoring. date, datetime can specified. unquoted symbol expected. Refer derive_vars_dt() impute derive date date character vector date object. set_values_to named list returned exprs() defining variables set event censoring, e.g. exprs(EVENTDESC = \"DEATH\", SRCDOM = \"ADSL\", SRCVAR = \"DTHDT\"). values must symbol, character string, numeric value, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/event_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an event_source Object — event_source","text":"object class event_source, inheriting class tte_source","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/event_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an event_source Object — event_source","text":"","code":"# Death event  event_source(   dataset_name = \"adsl\",   filter = DTHFL == \"Y\",   date = DTHDT,   set_values_to = exprs(     EVNTDESC = \"DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) ) #> <event_source> object #> dataset_name: \"adsl\" #> filter: DTHFL == \"Y\" #> date: DTHDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"DEATH\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"DTHDT\""},{"path":"https://pharmaverse.github.io/admiral/reference/ex_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Dose Exposure Dataset — ex_single","title":"Single Dose Exposure Dataset — ex_single","text":"derived dataset single dose per date.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/ex_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Dose Exposure Dataset — ex_single","text":"","code":"ex_single"},{"path":"https://pharmaverse.github.io/admiral/reference/ex_single.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single Dose Exposure Dataset — ex_single","text":"object class tbl_df (inherits tbl, data.frame) 22439 rows 17 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/ex_single.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Single Dose Exposure Dataset — ex_single","text":"Derived ex dataset using {admiral} {dplyr} (https://github.com/pharmaverse/admiral/blob/main/inst/example_scripts/derive_single_dose.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/example_qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example QS Dataset — example_qs","title":"Example QS Dataset — example_qs","text":"example QS dataset based examples CDISC ADaM Supplements Generalized Anxiety Disorder 7-Item Version 2 (GAD-7) Geriatric Depression Scale Short Form (GDS-SF).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/example_qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example QS Dataset — example_qs","text":"","code":"example_qs"},{"path":"https://pharmaverse.github.io/admiral/reference/example_qs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example QS Dataset — example_qs","text":"object class tbl_df (inherits tbl, data.frame) 176 rows 11 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/example_qs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example QS Dataset — example_qs","text":"Created (https://github.com/pharmaverse/admiral/blob/main/inst/example_scripts/example_qs.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add By Groups to All Datasets if Necessary — extend_source_datasets","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"function ensures variables contained source datasets.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"","code":"extend_source_datasets(source_datasets, by_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"source_datasets Source datasets named list datasets expected. dataset must contain either variables none variables. by_vars variables","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"list extended source datasets","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"groups determined union groups occurring source datasets. source datasets contain variables source dataset replaced cartesian product source dataset groups.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/extend_source_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add By Groups to All Datasets if Necessary — extend_source_datasets","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adsl <- tribble(   ~USUBJID, ~TRTSDT,           ~EOSDT,   \"01\",     ymd(\"2020-12-06\"), ymd(\"2021-03-06\"),   \"02\",     ymd(\"2021-01-16\"), ymd(\"2021-02-03\") ) %>%   mutate(STUDYID = \"AB42\")  ae <- tribble(   ~USUBJID, ~AESTDTC,           ~AESEQ, ~AEDECOD,   \"01\",     \"2021-01-03T10:56\", 1,      \"Flu\",   \"01\",     \"2021-03-04\",       2,      \"Cough\",   \"01\",     \"2021\",             3,      \"Flu\" ) %>%   mutate(STUDYID = \"AB42\")  extend_source_datasets(   source_datasets = list(adsl = adsl, ae = ae),   by_vars = exprs(AEDECOD) ) #> $adsl #> # A tibble: 4 x 5 #>   AEDECOD USUBJID TRTSDT     EOSDT      STUDYID #>   <chr>   <chr>   <date>     <date>     <chr>   #> 1 Flu     01      2020-12-06 2021-03-06 AB42    #> 2 Flu     02      2021-01-16 2021-02-03 AB42    #> 3 Cough   01      2020-12-06 2021-03-06 AB42    #> 4 Cough   02      2021-01-16 2021-02-03 AB42    #>  #> $ae #> # A tibble: 3 x 5 #>   USUBJID AESTDTC          AESEQ AEDECOD STUDYID #>   <chr>   <chr>            <dbl> <chr>   <chr>   #> 1 01      2021-01-03T10:56     1 Flu     AB42    #> 2 01      2021-03-04           2 Cough   AB42    #> 3 01      2021                 3 Flu     AB42    #>"},{"path":"https://pharmaverse.github.io/admiral/reference/extract_duplicate_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Duplicate Records — extract_duplicate_records","title":"Extract Duplicate Records — extract_duplicate_records","text":"Extract Duplicate Records","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extract_duplicate_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Duplicate Records — extract_duplicate_records","text":"","code":"extract_duplicate_records(dataset, by_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/extract_duplicate_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Duplicate Records — extract_duplicate_records","text":"dataset data frame by_vars list variables created using exprs() identifying groups records look duplicates","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extract_duplicate_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Duplicate Records — extract_duplicate_records","text":"data.frame duplicate records within dataset","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/extract_duplicate_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Duplicate Records — extract_duplicate_records","text":"","code":"data(admiral_adsl)  # Duplicate the first record adsl <- rbind(admiral_adsl[1L, ], admiral_adsl)  extract_duplicate_records(adsl, exprs(USUBJID)) #> # A tibble: 2 x 50 #>   USUBJID  STUDYID  SUBJID RFSTDTC  RFENDTC  RFXSTDTC RFXENDTC RFICDTC RFPENDTC  #>   <chr>    <chr>    <chr>  <chr>    <chr>    <chr>    <chr>    <chr>   <chr>     #> 1 01-701-… CDISCPI… 1015   2014-01… 2014-07… 2014-01… 2014-07… NA      2014-07-… #> 2 01-701-… CDISCPI… 1015   2014-01… 2014-07… 2014-01… 2014-07… NA      2014-07-… #> # … with 41 more variables: DTHDTC <chr>, DTHFL <chr>, SITEID <chr>, AGE <dbl>, #> #   AGEU <chr>, SEX <chr>, RACE <chr>, ETHNIC <chr>, ARMCD <chr>, ARM <chr>, #> #   ACTARMCD <chr>, ACTARM <chr>, COUNTRY <chr>, DMDTC <chr>, DMDY <dbl>, #> #   TRT01P <chr>, TRT01A <chr>, TRTSDTM <dttm>, TRTSTMF <chr>, TRTEDTM <dttm>, #> #   TRTETMF <chr>, TRTSDT <date>, TRTEDT <date>, TRTDURD <dbl>, SCRFDT <date>, #> #   EOSDT <date>, EOSSTT <chr>, FRVDT <date>, RANDDT <date>, DTHDT <date>, #> #   DTHADY <dbl>, LDDTHELD <dbl>, LSTALVDT <date>, AGEGR1 <fct>, SAFFL <chr>, #> #   RACEGR1 <chr>, REGION1 <chr>, LDDTHGR1 <chr>, DTH30FL <chr>, #> #   DTHA30FL <chr>, DTHB30FL <chr>"},{"path":"https://pharmaverse.github.io/admiral/reference/extract_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Unit From Parameter Description — extract_unit","title":"Extract Unit From Parameter Description — extract_unit","text":"Extract unit parameter description like \"Param (unit)\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extract_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Unit From Parameter Description — extract_unit","text":"","code":"extract_unit(x)"},{"path":"https://pharmaverse.github.io/admiral/reference/extract_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Unit From Parameter Description — extract_unit","text":"x parameter description","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/extract_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Unit From Parameter Description — extract_unit","text":"string","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/extract_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Unit From Parameter Description — extract_unit","text":"","code":"extract_unit(\"Height (cm)\") #> [1] \"cm\"  extract_unit(\"Diastolic Blood Pressure (mmHg)\") #> [1] \"mmHg\""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Confirmed Observations — filter_confirmation","title":"Filter Confirmed Observations — filter_confirmation","text":"function deprecated, please use filter_joined() instead.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Confirmed Observations — filter_confirmation","text":"","code":"filter_confirmation(   dataset,   by_vars,   join_vars,   join_type,   first_cond = NULL,   order,   tmp_obs_nr_var = NULL,   filter,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Confirmed Observations — filter_confirmation","text":"dataset Input dataset variables specified by_vars, join_vars, order expected. by_vars variables specified variables used variables joining input dataset . join_vars Variables keep joined dataset variables needed observations specified parameter. specified variables added joined dataset suffix \".join\". example select observations AVALC == \"Y\" AVALC == \"Y\" least one subsequent visit join_vars = exprs(AVALC, AVISITN) filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join specified. *.join variables included output dataset. join_type Observations keep joining argument determines joined observations kept respect original observation. example, join_type = \"\" specified observations original observations kept. Permitted Values: \"\", \"\", \"\" first_cond Condition selecting range data argument specified, observations restricted first observation specified condition fulfilled. condition fulfilled subsequent observations, observations removed. order Order observations ordered specified order. tmp_obs_nr_var Temporary observation number specified variable added input dataset set observation number respect order. group (by_vars) observation number starts 1. variable can used conditions (filter, first_cond). included output dataset. can used select consecutive observations last observation (see last example ). filter Condition selecting observations filter applied joined dataset selecting confirmed observations. condition can include summary functions. joined dataset grouped original observations. .e., summary function applied observations confirmation observation. example oncology setting using function confirmed best overall response,  filter = AVALC == \"CR\" & (AVALC.join %% c(\"CR\", \"NE\")) & count_vals(var = AVALC.join, val = \"NE\") <= 1 selects observations response \"CR\" observations confirmation observation response \"CR\" \"NE\" one \"NE\". check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"none\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Confirmed Observations — filter_confirmation","text":"subset observations input dataset. variables input dataset included output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Confirmed Observations — filter_confirmation","text":"following steps performed produce output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"step-","dir":"Reference","previous_headings":"","what":"Step 1","title":"Filter Confirmed Observations — filter_confirmation","text":"input dataset joined variables specified by_vars. right hand side join variables specified join_vars kept. suffix \".join\" added variables. example, by_vars = USUBJID, join_vars = exprs(AVISITN, AVALC) input dataset   joined dataset ","code":"# A tibble: 2 x 4 USUBJID AVISITN AVALC  AVAL <chr>     <dbl> <chr> <dbl> 1             1 Y         1 1             2 N         0 A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            1 Y 1             1 Y         1            2 N 1             2 N         0            1 Y 1             2 N         0            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"step--1","dir":"Reference","previous_headings":"","what":"Step 2","title":"Filter Confirmed Observations — filter_confirmation","text":"joined dataset restricted observations respect join_type order. dataset example previous step join_type = \"\" order = exprs(AVISITN)` restricted ","code":"A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"step--2","dir":"Reference","previous_headings":"","what":"Step 3","title":"Filter Confirmed Observations — filter_confirmation","text":"first_cond specified, observation input dataset joined dataset restricted observations first observation first_cond fulfilled (observation fulfilling condition included). observation input dataset condition fulfilled, observation removed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"step--3","dir":"Reference","previous_headings":"","what":"Step 4","title":"Filter Confirmed Observations — filter_confirmation","text":"joined dataset grouped observations input dataset restricted observations fulfilling condition specified filter.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_confirmation.html","id":"step--4","dir":"Reference","previous_headings":"","what":"Step 5","title":"Filter Confirmed Observations — filter_confirmation","text":"first observation group selected *.join variables dropped.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the First or Last Date from Several Sources — filter_date_sources","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"Select subject first last observation respect date list sources.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"","code":"filter_date_sources(   sources,   source_datasets,   by_vars,   create_datetime = FALSE,   subject_keys,   mode )"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"sources Sources list tte_source() objects expected. source_datasets Source datasets named list datasets expected. dataset_name field tte_source() refers dataset provided list. by_vars variables parameter specified, group observations selected separately. create_datetime Create datetime variable? set TRUE, variables ADTM created. Otherwise, variables ADT created. subject_keys Variables uniquely identify subject list symbols created using exprs() expected. mode Selection mode (first last) \"first\" specified, subject first observation respect date included output dataset. \"last\" specified, last observation included output dataset. Permitted Values:  \"first\", \"last\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"dataset one observation per subject described \"Details\" section.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"following steps performed create output dataset: source dataset observations specified filter element selected. patient first last observation (respect date) selected. ADT variable set variable specified date element. date variable datetime variable, datepart copied. source variable character variable, converted date. date incomplete, imputed first possible date. CNSR added set value censor element. selected observations source datasets combined single dataset. patient first last observation (respect ADT variable) single dataset selected.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/filter_date_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the First or Last Date from Several Sources — filter_date_sources","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(lubridate)  adsl <- tribble(   ~USUBJID, ~TRTSDT,           ~EOSDT,   \"01\",     ymd(\"2020-12-06\"), ymd(\"2021-03-06\"),   \"02\",     ymd(\"2021-01-16\"), ymd(\"2021-02-03\") ) %>%   mutate(STUDYID = \"AB42\")  ae <- tribble(   ~USUBJID, ~AESTDTC,     ~AESEQ, ~AEDECOD,   \"01\",     \"2021-01-03\", 1,      \"Flu\",   \"01\",     \"2021-03-04\", 2,      \"Cough\",   \"01\",     \"2021-01-01\", 3,      \"Flu\" ) %>%   mutate(     STUDYID = \"AB42\",     AESTDT = ymd(AESTDTC)   )  ttae <- event_source(   dataset_name = \"ae\",   date = AESTDT,   set_values_to = exprs(     EVNTDESC = \"AE\",     SRCDOM = \"AE\",     SRCVAR = \"AESTDTC\",     SRCSEQ = AESEQ   ) )  filter_date_sources(   sources = list(ttae),   source_datasets = list(adsl = adsl, ae = ae),   by_vars = exprs(AEDECOD),   create_datetime = FALSE,   subject_keys = get_admiral_option(\"subject_keys\"),   mode = \"first\" ) #> # A tibble: 2 x 9 #>   AEDECOD STUDYID USUBJID EVNTDESC SRCDOM SRCVAR  SRCSEQ  CNSR ADT        #>   <chr>   <chr>   <chr>   <chr>    <chr>  <chr>    <dbl> <int> <date>     #> 1 Cough   AB42    01      AE       AE     AESTDTC      2     0 2021-03-04 #> 2 Flu     AB42    01      AE       AE     AESTDTC      3     0 2021-01-01"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the First or Last Observation for Each By Group — filter_extreme","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"Filters first last observation group.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"","code":"filter_extreme(dataset, by_vars = NULL, order, mode, check_type = \"warning\")"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"dataset Input dataset variables specified order by_vars parameter expected. by_vars Grouping variables Default: NULL Permitted Values: list variables created exprs() order Sort order Within group observations ordered specified order. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) mode Selection mode (first last) \"first\" specified, first observation group included output dataset. \"last\" specified, last observation group included output dataset. Permitted Values:  \"first\", \"last\" check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"warning\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"dataset containing first last observation group","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"group (respect variables specified by_vars parameter) first last observation (respect order specified order parameter mode specified mode parameter) included output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/filter_extreme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the First or Last Observation for Each By Group — filter_extreme","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(\"admiral_ex\")  # Select first dose for each patient admiral_ex %>%   filter_extreme(     by_vars = exprs(USUBJID),     order = exprs(EXSEQ),     mode = \"first\"   ) %>%   select(USUBJID, EXSEQ) #> # A tibble: 254 x 2 #>    USUBJID     EXSEQ #>    <chr>       <dbl> #>  1 01-701-1015     1 #>  2 01-701-1023     1 #>  3 01-701-1028     1 #>  4 01-701-1033     1 #>  5 01-701-1034     1 #>  6 01-701-1047     1 #>  7 01-701-1097     1 #>  8 01-701-1111     1 #>  9 01-701-1115     1 #> 10 01-701-1118     1 #> # … with 244 more rows  # Select highest dose for each patient on the active drug admiral_ex %>%   filter(EXTRT != \"PLACEBO\") %>%   filter_extreme(     by_vars = exprs(USUBJID),     order = exprs(EXDOSE),     mode = \"last\",     check_type = \"none\"   ) %>%   select(USUBJID, EXTRT, EXDOSE) #> # A tibble: 168 x 3 #>    USUBJID     EXTRT      EXDOSE #>    <chr>       <chr>       <dbl> #>  1 01-701-1028 XANOMELINE     81 #>  2 01-701-1033 XANOMELINE     54 #>  3 01-701-1034 XANOMELINE     81 #>  4 01-701-1097 XANOMELINE     54 #>  5 01-701-1111 XANOMELINE     54 #>  6 01-701-1115 XANOMELINE     54 #>  7 01-701-1133 XANOMELINE     81 #>  8 01-701-1146 XANOMELINE     81 #>  9 01-701-1148 XANOMELINE     81 #> 10 01-701-1180 XANOMELINE     81 #> # … with 158 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Observations Taking Other Observations into Account — filter_joined","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"function filters observation using condition taking observations account. example, select observations AVALC == \"Y\" AVALC == \"Y\" least one subsequent observation. input dataset joined enable conditions taking variables current observation observations account. suffix \".join\" added variables subsequent observations. example usage might checking patient received two required medications within certain timeframe . oncology setting, example, use processing check response value can confirmed subsequent assessment. commonly used endpoints best overall response.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"","code":"filter_joined(   dataset,   by_vars,   join_vars,   join_type,   first_cond = NULL,   order,   tmp_obs_nr_var = NULL,   filter,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"dataset Input dataset variables specified by_vars, join_vars, order expected. by_vars variables specified variables used variables joining input dataset . join_vars Variables keep joined dataset variables needed observations specified parameter. specified variables added joined dataset suffix \".join\". example select observations AVALC == \"Y\" AVALC == \"Y\" least one subsequent visit join_vars = exprs(AVALC, AVISITN) filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join specified. *.join variables included output dataset. join_type Observations keep joining argument determines joined observations kept respect original observation. example, join_type = \"\" specified observations original observations kept. Permitted Values: \"\", \"\", \"\" first_cond Condition selecting range data argument specified, observations restricted first observation specified condition fulfilled. condition fulfilled subsequent observations, observations removed. order Order observations ordered specified order. tmp_obs_nr_var Temporary observation number specified variable added input dataset set observation number respect order. group (by_vars) observation number starts 1. variable can used conditions (filter, first_cond). included output dataset. can used select consecutive observations last observation (see last example ). filter Condition selecting observations filter applied joined dataset selecting confirmed observations. condition can include summary functions. joined dataset grouped original observations. .e., summary function applied observations confirmation observation. example oncology setting using function confirmed best overall response,  filter = AVALC == \"CR\" & (AVALC.join %% c(\"CR\", \"NE\")) & count_vals(var = AVALC.join, val = \"NE\") <= 1 selects observations response \"CR\" observations confirmation observation response \"CR\" \"NE\" one \"NE\". check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Default: \"none\" Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"subset observations input dataset. variables input dataset included output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"following steps performed produce output dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"step-","dir":"Reference","previous_headings":"","what":"Step 1","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"input dataset joined variables specified by_vars. right hand side join variables specified join_vars kept. suffix \".join\" added variables. example, by_vars = USUBJID, join_vars = exprs(AVISITN, AVALC) input dataset   joined dataset ","code":"# A tibble: 2 x 4 USUBJID AVISITN AVALC  AVAL <chr>     <dbl> <chr> <dbl> 1             1 Y         1 1             2 N         0 A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            1 Y 1             1 Y         1            2 N 1             2 N         0            1 Y 1             2 N         0            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"step--1","dir":"Reference","previous_headings":"","what":"Step 2","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"joined dataset restricted observations respect join_type order. dataset example previous step join_type = \"\" order = exprs(AVISITN)` restricted ","code":"A tibble: 4 x 6 USUBJID AVISITN AVALC  AVAL AVISITN.join AVALC.join <chr>     <dbl> <chr> <dbl>        <dbl> <chr> 1             1 Y         1            2 N"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"step--2","dir":"Reference","previous_headings":"","what":"Step 3","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"first_cond specified, observation input dataset joined dataset restricted observations first observation first_cond fulfilled (observation fulfilling condition included). observation input dataset condition fulfilled, observation removed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"step--3","dir":"Reference","previous_headings":"","what":"Step 4","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"joined dataset grouped observations input dataset restricted observations fulfilling condition specified filter.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"step--4","dir":"Reference","previous_headings":"","what":"Step 5","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"first observation group selected *.join variables dropped.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/filter_joined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Observations Taking Other Observations into Account — filter_joined","text":"","code":"library(tibble) library(admiral)  # filter observations with a duration longer than 30 and # on or after 7 days before a COVID AE (ACOVFL == \"Y\") adae <- tribble(   ~USUBJID, ~ADY, ~ACOVFL, ~ADURN,   \"1\",        10, \"N\",          1,   \"1\",        21, \"N\",         50,   \"1\",        23, \"Y\",         14,   \"1\",        32, \"N\",         31,   \"1\",        42, \"N\",         20,   \"2\",        11, \"Y\",         13,   \"2\",        23, \"N\",          2,   \"3\",        13, \"Y\",         12,   \"4\",        14, \"N\",         32,   \"4\",        21, \"N\",         41 )  filter_joined(   adae,   by_vars = exprs(USUBJID),   join_vars = exprs(ACOVFL, ADY),   join_type = \"all\",   order = exprs(ADY),   filter = ADURN > 30 & ACOVFL.join == \"Y\" & ADY >= ADY.join - 7 ) #> # A tibble: 2 x 4 #>   USUBJID   ADY ACOVFL ADURN #>   <chr>   <dbl> <chr>  <dbl> #> 1 1          21 N         50 #> 2 1          32 N         31  # filter observations with AVALC == \"Y\" and AVALC == \"Y\" at a subsequent visit data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"Y\",   \"1\",      2,        \"N\",   \"1\",      3,        \"Y\",   \"1\",      4,        \"N\",   \"2\",      1,        \"Y\",   \"2\",      2,        \"N\",   \"3\",      1,        \"Y\",   \"4\",      1,        \"N\",   \"4\",      2,        \"N\", )  filter_joined(   data,   by_vars = exprs(USUBJID),   join_vars = exprs(AVALC, AVISITN),   join_type = \"after\",   order = exprs(AVISITN),   filter = AVALC == \"Y\" & AVALC.join == \"Y\" & AVISITN < AVISITN.join ) #> # A tibble: 1 x 3 #>   USUBJID AVISITN AVALC #>   <chr>     <dbl> <chr> #> 1 1             1 Y      # select observations with AVALC == \"CR\", AVALC == \"CR\" at a subsequent visit, # only \"CR\" or \"NE\" in between, and at most one \"NE\" in between data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"NE\",   \"1\",      4,        \"CR\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"CR\",   \"2\",      2,        \"PR\",   \"2\",      3,        \"CR\",   \"3\",      1,        \"CR\",   \"4\",      1,        \"CR\",   \"4\",      2,        \"NE\",   \"4\",      3,        \"NE\",   \"4\",      4,        \"CR\",   \"4\",      5,        \"PR\" )  filter_joined(   data,   by_vars = exprs(USUBJID),   join_vars = exprs(AVALC),   join_type = \"after\",   order = exprs(AVISITN),   first_cond = AVALC.join == \"CR\",   filter = AVALC == \"CR\" & all(AVALC.join %in% c(\"CR\", \"NE\")) &     count_vals(var = AVALC.join, val = \"NE\") <= 1 ) #> # A tibble: 1 x 3 #>   USUBJID AVISITN AVALC #>   <chr>     <dbl> <chr> #> 1 1             2 CR     # select observations with AVALC == \"PR\", AVALC == \"CR\" or AVALC == \"PR\" # at a subsequent visit at least 20 days later, only \"CR\", \"PR\", or \"NE\" # in between, at most one \"NE\" in between, and \"CR\" is not followed by \"PR\" data <- tribble(   ~USUBJID, ~ADY, ~AVALC,   \"1\",         6, \"PR\",   \"1\",        12, \"CR\",   \"1\",        24, \"NE\",   \"1\",        32, \"CR\",   \"1\",        48, \"PR\",   \"2\",         3, \"PR\",   \"2\",        21, \"CR\",   \"2\",        33, \"PR\",   \"3\",        11, \"PR\",   \"4\",         7, \"PR\",   \"4\",        12, \"NE\",   \"4\",        24, \"NE\",   \"4\",        32, \"PR\",   \"4\",        55, \"PR\" )  filter_joined(   data,   by_vars = exprs(USUBJID),   join_vars = exprs(AVALC, ADY),   join_type = \"after\",   order = exprs(ADY),   first_cond = AVALC.join %in% c(\"CR\", \"PR\") & ADY.join - ADY >= 20,   filter = AVALC == \"PR\" &     all(AVALC.join %in% c(\"CR\", \"PR\", \"NE\")) &     count_vals(var = AVALC.join, val = \"NE\") <= 1 &     (       min_cond(var = ADY.join, cond = AVALC.join == \"CR\") >         max_cond(var = ADY.join, cond = AVALC.join == \"PR\") |         count_vals(var = AVALC.join, val = \"CR\") == 0     ) ) #> # A tibble: 1 x 3 #>   USUBJID   ADY AVALC #>   <chr>   <dbl> <chr> #> 1 4          32 PR     # select observations with CRIT1FL == \"Y\" at two consecutive visits or at the last visit data <- tribble(   ~USUBJID, ~AVISITN, ~CRIT1FL,   \"1\",      1,        \"Y\",   \"1\",      2,        \"N\",   \"1\",      3,        \"Y\",   \"1\",      5,        \"N\",   \"2\",      1,        \"Y\",   \"2\",      3,        \"Y\",   \"2\",      5,        \"N\",   \"3\",      1,        \"Y\",   \"4\",      1,        \"Y\",   \"4\",      2,        \"N\", )  filter_joined(   data,   by_vars = exprs(USUBJID),   tmp_obs_nr_var = tmp_obs_nr,   join_vars = exprs(CRIT1FL),   join_type = \"all\",   order = exprs(AVISITN),   filter = CRIT1FL == \"Y\" & CRIT1FL.join == \"Y\" &     (tmp_obs_nr + 1 == tmp_obs_nr.join | tmp_obs_nr == max(tmp_obs_nr.join)) ) #> # A tibble: 2 x 3 #>   USUBJID AVISITN CRIT1FL #>   <chr>     <dbl> <chr>   #> 1 2             1 Y       #> 2 3             1 Y"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"Filters observations observation specified condition fulfilled group. example, function called select subject observations first disease progression.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"","code":"filter_relative(   dataset,   by_vars,   order,   condition,   mode,   selection,   inclusive,   keep_no_ref_groups = TRUE,   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"dataset Input dataset variables specified order by_vars parameter expected. by_vars Grouping variables Permitted Values: list variables created exprs() order Sort order Within group observations ordered specified order. Permitted Values: list variables desc(<variable>) function calls created exprs(), e.g., exprs(ADT, desc(AVAL)) condition Condition Reference Observation specified condition determines reference observation. output dataset contains observations (selection parameter) reference observation. mode Selection mode (first last) \"first\" specified, group observations (selection parameter) observation condition (condition parameter) fulfilled first time included output dataset. \"last\" specified, group observations (selection parameter) observation condition (condition parameter) fulfilled last time included output dataset. Permitted Values: \"first\", \"last\" selection Select observations reference observation? Permitted Values: \"\", \"\" inclusive Include reference observation? Permitted Values: TRUE, FALSE keep_no_ref_groups groups without reference observation kept? Permitted Values: TRUE, FALSE check_type Check uniqueness? \"warning\" \"error\" specified, specified message issued observations input dataset unique respect variables order. Permitted Values: \"none\", \"warning\", \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"dataset containing group observations observation condition fulfilled first last time","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"group ( by_vars parameter) observations (selection parameter) observations condition (condition parameter) fulfilled first last time (order parameter mode parameter) included output dataset.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/filter_relative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the Observations Before or After a Condition is Fulfilled — filter_relative","text":"","code":"library(tibble)  response <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"CR\",   \"1\",      4,        \"SD\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"SD\",   \"2\",      2,        \"PD\",   \"2\",      3,        \"PD\",   \"3\",      1,        \"SD\",   \"4\",      1,        \"SD\",   \"4\",      2,        \"PR\",   \"4\",      3,        \"PD\",   \"4\",      4,        \"SD\",   \"4\",      5,        \"PR\" )  # Select observations up to first PD for each patient response %>%   filter_relative(     by_vars = exprs(USUBJID),     order = exprs(AVISITN),     condition = AVALC == \"PD\",     mode = \"first\",     selection = \"before\",     inclusive = TRUE   ) #> # A tibble: 11 x 3 #>    USUBJID AVISITN AVALC #>    <chr>     <dbl> <chr> #>  1 1             1 PR    #>  2 1             2 CR    #>  3 1             3 CR    #>  4 1             4 SD    #>  5 1             5 NE    #>  6 2             1 SD    #>  7 2             2 PD    #>  8 3             1 SD    #>  9 4             1 SD    #> 10 4             2 PR    #> 11 4             3 PD     # Select observations after last CR, PR, or SD for each patient response %>%   filter_relative(     by_vars = exprs(USUBJID),     order = exprs(AVISITN),     condition = AVALC %in% c(\"CR\", \"PR\", \"SD\"),     mode = \"last\",     selection = \"after\",     inclusive = FALSE   ) #> # A tibble: 3 x 3 #>   USUBJID AVISITN AVALC #>   <chr>     <dbl> <chr> #> 1 1             5 NE    #> 2 2             2 PD    #> 3 2             3 PD     # Select observations from first response to first PD response %>%   filter_relative(     by_vars = exprs(USUBJID),     order = exprs(AVISITN),     condition = AVALC %in% c(\"CR\", \"PR\"),     mode = \"first\",     selection = \"after\",     inclusive = TRUE,     keep_no_ref_groups = FALSE   ) %>%   filter_relative(     by_vars = exprs(USUBJID),     order = exprs(AVISITN),     condition = AVALC == \"PD\",     mode = \"first\",     selection = \"before\",     inclusive = TRUE   ) #> # A tibble: 7 x 3 #>   USUBJID AVISITN AVALC #>   <chr>     <dbl> <chr> #> 1 1             1 PR    #> 2 1             2 CR    #> 3 1             3 CR    #> 4 1             4 SD    #> 5 1             5 NE    #> 6 4             2 PR    #> 7 4             3 PD"},{"path":"https://pharmaverse.github.io/admiral/reference/format.basket_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a Character Representation of a basket_select() Object — format.basket_select","title":"Returns a Character Representation of a basket_select() Object — format.basket_select","text":"function returns character representation basket_select() object. can used error messages example.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format.basket_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a Character Representation of a basket_select() Object — format.basket_select","text":"","code":"# S3 method for basket_select format(x, ...)"},{"path":"https://pharmaverse.github.io/admiral/reference/format.basket_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a Character Representation of a basket_select() Object — format.basket_select","text":"x basket_select() object ... used","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format.basket_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a Character Representation of a basket_select() Object — format.basket_select","text":"character representation basket_select() object","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/format.basket_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a Character Representation of a basket_select() Object — format.basket_select","text":"","code":"format(basket_select(id = 42, scope = \"NARROW\", type = \"smq\")) #> [1] \"basket_select(name = NULL, id = 42, scope = \\\"NARROW\\\", type = \\\"smq\\\")\""},{"path":"https://pharmaverse.github.io/admiral/reference/format_eoxxstt_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Format for Disposition Status — format_eoxxstt_default","title":"Default Format for Disposition Status — format_eoxxstt_default","text":"function deprecated. function default derive_var_disposition_status() format_new_var argument. Please define function use input cat_fun argument derive_var_merged_cat() instead. Define function map disposition status. used input derive_var_disposition_status().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_eoxxstt_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Format for Disposition Status — format_eoxxstt_default","text":"","code":"format_eoxxstt_default(status)"},{"path":"https://pharmaverse.github.io/admiral/reference/format_eoxxstt_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Format for Disposition Status — format_eoxxstt_default","text":"status disposition variable used mapping (e.g. DSDECOD).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_eoxxstt_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Format for Disposition Status — format_eoxxstt_default","text":"character vector derived based values given status: \"STARTED\" status \"SCREEN FAILURE\" \"SCREENING COMPLETED\", \"COMPLETED\" status \"COMPLETED\", \"DISCONTINUED\" status (\"COMPLETED\",\"SCREEN FAILURE\", \"SCREENING COMPLETED\") NA, \"ONGOING\" otherwise.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_eoxxstt_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Format for Disposition Status — format_eoxxstt_default","text":"Usually function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/format_reason_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Format for the Disposition Reason — format_reason_default","title":"Default Format for the Disposition Reason — format_reason_default","text":"function deprecated. function default derive_vars_disposition_reason() format_new_vars argument. Please use derive_vars_merged() specify filter_add argument derive respective variables. Define function map disposition reason, used parameter derive_vars_disposition_reason().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_reason_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Format for the Disposition Reason — format_reason_default","text":"","code":"format_reason_default(reason, reason_spe = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/format_reason_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Format for the Disposition Reason — format_reason_default","text":"reason disposition variable used mapping (e.g. DSDECOD). reason_spe disposition variable used mapping details required (e.g. DSTERM).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_reason_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Format for the Disposition Reason — format_reason_default","text":"character vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/format_reason_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Format for the Disposition Reason — format_reason_default","text":"format_reason_default(DSDECOD) returns DSDECOD DSDECOD 'COMPLETED' NA. format_reason_default(DSDECOD, DSTERM) returns DSTERM DSDECOD equal ''.  Usually function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Value of an Admiral Option — get_admiral_option","title":"Get the Value of an Admiral Option — get_admiral_option","text":"Get Value Admiral Option Can Modified Advanced Users.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Value of an Admiral Option — get_admiral_option","text":"","code":"get_admiral_option(option)"},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Value of an Admiral Option — get_admiral_option","text":"option character scalar commonly used admiral function inputs. now, support available \"subject_keys\" \"force_admiral_vars\". See set_admiral_options() description options.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Value of an Admiral Option — get_admiral_option","text":"value specified option.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Value of an Admiral Option — get_admiral_option","text":"function allows flexibility function inputs may need repeated multiple times script, subject_keys.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_admiral_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Value of an Admiral Option — get_admiral_option","text":"","code":"library(admiral.test) library(dplyr, warn.conflicts = FALSE) data(\"admiral_vs\") data(\"admiral_dm\")  # Merging all dm variables to vs derive_vars_merged(   admiral_vs,   dataset_add = select(admiral_dm, -DOMAIN),   by_vars = get_admiral_option(\"subject_keys\") ) %>%   select(STUDYID, USUBJID, VSTESTCD, VISIT, VSTPT, VSSTRESN, AGE, AGEU) #> # A tibble: 29,643 x 8 #>    STUDYID    USUBJID   VSTESTCD VISIT      VSTPT           VSSTRESN   AGE AGEU  #>    <chr>      <chr>     <chr>    <chr>      <chr>              <dbl> <dbl> <chr> #>  1 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER LYING DO…       64    63 YEARS #>  2 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       83    63 YEARS #>  3 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       57    63 YEARS #>  4 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER LYING DO…       68    63 YEARS #>  5 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       59    63 YEARS #>  6 CDISCPILO… 01-701-1… DIABP    SCREENING… AFTER STANDING…       71    63 YEARS #>  7 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER LYING DO…       56    63 YEARS #>  8 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER STANDING…       51    63 YEARS #>  9 CDISCPILO… 01-701-1… DIABP    BASELINE   AFTER STANDING…       61    63 YEARS #> 10 CDISCPILO… 01-701-1… DIABP    AMBUL ECG… AFTER LYING DO…       67    63 YEARS #> # … with 29,633 more rows"},{"path":"https://pharmaverse.github.io/admiral/reference/get_duplicates_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","title":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","text":"Get Duplicate Records Led Prior Error","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_duplicates_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","text":"","code":"get_duplicates_dataset()"},{"path":"https://pharmaverse.github.io/admiral/reference/get_duplicates_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","text":"data.frame NULL","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_duplicates_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","text":"Many admiral function check input dataset contains one record per by_vars group throw error otherwise. get_duplicates_dataset() function allows one retrieve duplicate records lead error. Note function always returns dataset duplicates last error thrown current R session. Thus, restarting R sessions get_duplicates_dataset() return NULL second error thrown, dataset first error can longer accessed (unless saved variable).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_duplicates_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Duplicate Records that Led to a Prior Error — get_duplicates_dataset","text":"","code":"data(admiral_adsl)  # Duplicate the first record adsl <- rbind(admiral_adsl[1L, ], admiral_adsl)  signal_duplicate_records(adsl, exprs(USUBJID), cnd_type = \"warning\") #> Warning: Dataset contains duplicate records with respect to `USUBJID` #> Run `get_duplicates_dataset()` to access the duplicate records  get_duplicates_dataset() #> # A tibble: 2 x 50 #>   USUBJID  STUDYID  SUBJID RFSTDTC  RFENDTC  RFXSTDTC RFXENDTC RFICDTC RFPENDTC  #> * <chr>    <chr>    <chr>  <chr>    <chr>    <chr>    <chr>    <chr>   <chr>     #> 1 01-701-… CDISCPI… 1015   2014-01… 2014-07… 2014-01… 2014-07… NA      2014-07-… #> 2 01-701-… CDISCPI… 1015   2014-01… 2014-07… 2014-01… 2014-07… NA      2014-07-… #> # … with 41 more variables: DTHDTC <chr>, DTHFL <chr>, SITEID <chr>, AGE <dbl>, #> #   AGEU <chr>, SEX <chr>, RACE <chr>, ETHNIC <chr>, ARMCD <chr>, ARM <chr>, #> #   ACTARMCD <chr>, ACTARM <chr>, COUNTRY <chr>, DMDTC <chr>, DMDY <dbl>, #> #   TRT01P <chr>, TRT01A <chr>, TRTSDTM <dttm>, TRTSTMF <chr>, TRTEDTM <dttm>, #> #   TRTETMF <chr>, TRTSDT <date>, TRTEDT <date>, TRTDURD <dbl>, SCRFDT <date>, #> #   EOSDT <date>, EOSSTT <chr>, FRVDT <date>, RANDDT <date>, DTHDT <date>, #> #   DTHADY <dbl>, LDDTHELD <dbl>, LSTALVDT <date>, AGEGR1 <fct>, SAFFL <chr>, #> #   RACEGR1 <chr>, REGION1 <chr>, LDDTHGR1 <chr>, DTH30FL <chr>, #> #   DTHA30FL <chr>, DTHB30FL <chr>"},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Date Imputation Targets — get_imputation_target_date","title":"Get Date Imputation Targets — get_imputation_target_date","text":"Get Date Imputation Targets","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Date Imputation Targets — get_imputation_target_date","text":"","code":"get_imputation_target_date(date_imputation, month)"},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Date Imputation Targets — get_imputation_target_date","text":"date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June, keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. month Month component partial date","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Date Imputation Targets — get_imputation_target_date","text":"list character vectors. elements list named \"year\", \"month\", \"day\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Date Imputation Targets — get_imputation_target_date","text":"date_imputation = \"first\" \"0000\", \"01\", \"01\" returned. date_imputation = \"mid\" \"xxxx\", \"06\", \"30\" month NA \"15\" otherwise returned. date_imputation = \"last\" \"9999\", \"12\", \"31\" returned. date_imputation = \"<mm>-<dd>\" \"xxxx\", \"<mm>\", \"<dd>\" returned. \"xxxx\" indicates component undefined. undefined component occurs imputed DTC value, imputed DTC value set NA_character_ imputation functions.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Imputation Targets — get_imputation_target_time","title":"Get Time Imputation Targets — get_imputation_target_time","text":"Get Time Imputation Targets","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Imputation Targets — get_imputation_target_time","text":"","code":"get_imputation_target_time(time_imputation)"},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Imputation Targets — get_imputation_target_time","text":"time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Imputation Targets — get_imputation_target_time","text":"list character vectors. elements list named \"hour\", \"minute\", \"second\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_imputation_target_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Time Imputation Targets — get_imputation_target_time","text":"time_imputation = \"first\" \"00\", \"00\", \"00\" returned. time_imputation = \"last\" \"23\", \"59\", \"59\" returned. time_imputation = \"<hh>:<mm>:<ss>\" \"<hh>\", \"<mm>\", \"<ss>\" returned.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_many_to_one_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","title":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","text":"Get Many One Values Led Prior Error","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_many_to_one_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","text":"","code":"get_many_to_one_dataset()"},{"path":"https://pharmaverse.github.io/admiral/reference/get_many_to_one_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","text":"data.frame NULL","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_many_to_one_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","text":"assert_one_to_one() detects issue, many one values stored dataset. dataset can retrieved get_many_to_one_dataset(). Note function always returns many one values last error thrown current R session. Thus, restarting R sessions get_many_to_one_dataset() return NULL second error thrown, dataset first error can longer accessed (unless saved variable).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_many_to_one_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Many to One Values that Led to a Prior Error — get_many_to_one_dataset","text":"","code":"library(admiraldev, warn.conflicts = FALSE) data(admiral_adsl)  try(   assert_one_to_one(admiral_adsl, exprs(SITEID), exprs(STUDYID)) ) #> Error in assert_one_to_one(admiral_adsl, exprs(SITEID), exprs(STUDYID)) :  #>   There is more than one value of SITEID for some values of STUDYID. #> Call `get_many_to_one_dataset()` to get all many to one values.  get_many_to_one_dataset() #> # A tibble: 17 x 2 #> # Groups:   STUDYID [1] #>    SITEID STUDYID      #>    <chr>  <chr>        #>  1 701    CDISCPILOT01 #>  2 702    CDISCPILOT01 #>  3 703    CDISCPILOT01 #>  4 704    CDISCPILOT01 #>  5 705    CDISCPILOT01 #>  6 706    CDISCPILOT01 #>  7 707    CDISCPILOT01 #>  8 708    CDISCPILOT01 #>  9 709    CDISCPILOT01 #> 10 710    CDISCPILOT01 #> 11 711    CDISCPILOT01 #> 12 713    CDISCPILOT01 #> 13 714    CDISCPILOT01 #> 14 715    CDISCPILOT01 #> 15 716    CDISCPILOT01 #> 16 717    CDISCPILOT01 #> 17 718    CDISCPILOT01"},{"path":"https://pharmaverse.github.io/admiral/reference/get_not_mapped.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of records not mapped from the lookup table. — get_not_mapped","title":"Get list of records not mapped from the lookup table. — get_not_mapped","text":"Get list records mapped lookup table.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_not_mapped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of records not mapped from the lookup table. — get_not_mapped","text":"","code":"get_not_mapped()"},{"path":"https://pharmaverse.github.io/admiral/reference/get_not_mapped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of records not mapped from the lookup table. — get_not_mapped","text":"data.frame NULL","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_one_to_many_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","title":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","text":"Get One Many Values Led Prior Error","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_one_to_many_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","text":"","code":"get_one_to_many_dataset()"},{"path":"https://pharmaverse.github.io/admiral/reference/get_one_to_many_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","text":"data.frame NULL","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_one_to_many_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","text":"assert_one_to_one() detects issue, one many values stored dataset. dataset can retrieved get_one_to_many_dataset(). Note function always returns one many values last error thrown current R session. Thus, restarting R sessions get_one_to_many_dataset() return NULL second error thrown, dataset first error can longer accessed (unless saved variable).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_one_to_many_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get One to Many Values that Led to a Prior Error — get_one_to_many_dataset","text":"","code":"library(admiraldev, warn.conflicts = FALSE) data(admiral_adsl)  try(   assert_one_to_one(admiral_adsl, exprs(STUDYID), exprs(SITEID)) ) #> Error in assert_one_to_one(admiral_adsl, exprs(STUDYID), exprs(SITEID)) :  #>   For some values of STUDYID there is more than one value of SITEID. #> Call `get_one_to_many_dataset()` to get all one to many values.  get_one_to_many_dataset() #> # A tibble: 17 x 2 #> # Groups:   STUDYID [1] #>    STUDYID      SITEID #>    <chr>        <chr>  #>  1 CDISCPILOT01 701    #>  2 CDISCPILOT01 702    #>  3 CDISCPILOT01 703    #>  4 CDISCPILOT01 704    #>  5 CDISCPILOT01 705    #>  6 CDISCPILOT01 706    #>  7 CDISCPILOT01 707    #>  8 CDISCPILOT01 708    #>  9 CDISCPILOT01 709    #> 10 CDISCPILOT01 710    #> 11 CDISCPILOT01 711    #> 12 CDISCPILOT01 713    #> 13 CDISCPILOT01 714    #> 14 CDISCPILOT01 715    #> 15 CDISCPILOT01 716    #> 16 CDISCPILOT01 717    #> 17 CDISCPILOT01 718"},{"path":"https://pharmaverse.github.io/admiral/reference/get_partialdatetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse DTC variable and Determine Components — get_partialdatetime","title":"Parse DTC variable and Determine Components — get_partialdatetime","text":"Parse DTC variable Determine Components","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_partialdatetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse DTC variable and Determine Components — get_partialdatetime","text":"","code":"get_partialdatetime(dtc)"},{"path":"https://pharmaverse.github.io/admiral/reference/get_partialdatetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse DTC variable and Determine Components — get_partialdatetime","text":"dtc '--DTC' date parse character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid value component.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_partialdatetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse DTC variable and Determine Components — get_partialdatetime","text":"list character vectors. elements list named \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\". Missing components set NA_character_.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_partialdatetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse DTC variable and Determine Components — get_partialdatetime","text":"function can replaced parttime parser available.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Summary Records — get_summary_records","title":"Create Summary Records — get_summary_records","text":"uncommon analysis need whereby one needs derive analysis value (AVAL) multiple records. ADaM basic dataset structure variable DTYPE available indicate new derived records added dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Summary Records — get_summary_records","text":"","code":"get_summary_records(   dataset,   by_vars,   filter = NULL,   analysis_var,   summary_fun,   set_values_to = NULL )"},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Summary Records — get_summary_records","text":"dataset data frame. by_vars Variables consider generation groupwise summary records. Providing names variables exprs() create groupwise summary generate summary records specified groups. filter Filter condition logical expression apply summary calculation. default, filtering expressions computed within by_vars help aggregating, lagging, ranking function involved. example, filter_rows = (AVAL > mean(AVAL, na.rm = TRUE)) filter AVAL values greater mean AVAL by_vars. filter_rows = (dplyr::n() > 2) filter n count by_vars greater 2. analysis_var Analysis variable. summary_fun Function takes input analysis_var performs calculation. can include built-functions well user defined functions, example mean function(x) mean(x, na.rm = TRUE). set_values_to list variable name-value pairs. Use argument need change values newly derived records. Set list variables specified value new observation(s) LHS refer variable. RHS refers values set variable. can string, symbol, numeric value NA. (e.g.  exprs(PARAMCD = \"TDOSE\",PARCAT1 = \"OVERALL\")). general expression allowed.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Summary Records — get_summary_records","text":"data frame derived records.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Summary Records — get_summary_records","text":"function creates derived observations append original dataset observations. like instead, see derive_summary_records() function.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/get_summary_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Summary Records — get_summary_records","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE)  adeg <- tribble(   ~USUBJID, ~EGSEQ, ~PARAM, ~AVISIT, ~EGDTC, ~AVAL, ~TRTA,   \"XYZ-1001\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:50\", 385, \"\",   \"XYZ-1001\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:52\", 399, \"\",   \"XYZ-1001\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:56\", 396, \"\",   \"XYZ-1001\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:45\", 384, \"Placebo\",   \"XYZ-1001\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:48\", 393, \"Placebo\",   \"XYZ-1001\", 6, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:51\", 388, \"Placebo\",   \"XYZ-1001\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:45\", 385, \"Placebo\",   \"XYZ-1001\", 8, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:48\", 394, \"Placebo\",   \"XYZ-1001\", 9, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:51\", 402, \"Placebo\",   \"XYZ-1002\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 399, \"\",   \"XYZ-1002\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 410, \"\",   \"XYZ-1002\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T08:01\", 392, \"\",   \"XYZ-1002\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:50\", 401, \"Active 20mg\",   \"XYZ-1002\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:53\", 407, \"Active 20mg\",   \"XYZ-1002\", 6, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:56\", 400, \"Active 20mg\",   \"XYZ-1002\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:50\", 412, \"Active 20mg\",   \"XYZ-1002\", 8, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:53\", 414, \"Active 20mg\",   \"XYZ-1002\", 9, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:56\", 402, \"Active 20mg\", )  # Summarize the average of the triplicate ECG interval values (AVAL) get_summary_records(   adeg,   by_vars = exprs(USUBJID, PARAM, AVISIT),   analysis_var = AVAL,   summary_fun = function(x) mean(x, na.rm = TRUE),   set_values_to = exprs(DTYPE = \"AVERAGE\") ) #> # A tibble: 6 x 5 #>   USUBJID  PARAM            AVISIT    AVAL DTYPE   #>   <chr>    <chr>            <chr>    <dbl> <chr>   #> 1 XYZ-1001 QTcF Int. (msec) Baseline  393. AVERAGE #> 2 XYZ-1001 QTcF Int. (msec) Visit 2   388. AVERAGE #> 3 XYZ-1001 QTcF Int. (msec) Visit 3   394. AVERAGE #> 4 XYZ-1002 QTcF Int. (msec) Baseline  400. AVERAGE #> 5 XYZ-1002 QTcF Int. (msec) Visit 2   403. AVERAGE #> 6 XYZ-1002 QTcF Int. (msec) Visit 3   409. AVERAGE  advs <- tribble(   ~USUBJID, ~VSSEQ, ~PARAM, ~AVAL, ~VSSTRESU, ~VISIT, ~VSDTC,   \"XYZ-001-001\", 1164, \"Weight\", 99, \"kg\", \"Screening\", \"2018-03-19\",   \"XYZ-001-001\", 1165, \"Weight\", 101, \"kg\", \"Run-In\", \"2018-03-26\",   \"XYZ-001-001\", 1166, \"Weight\", 100, \"kg\", \"Baseline\", \"2018-04-16\",   \"XYZ-001-001\", 1167, \"Weight\", 94, \"kg\", \"Week 24\", \"2018-09-30\",   \"XYZ-001-001\", 1168, \"Weight\", 92, \"kg\", \"Week 48\", \"2019-03-17\",   \"XYZ-001-001\", 1169, \"Weight\", 95, \"kg\", \"Week 52\", \"2019-04-14\", )  # Set new values to any variable. Here, `DTYPE = MAXIMUM` refers to `max()` records # and `DTYPE = AVERAGE` refers to `mean()` records. get_summary_records(   advs,   by_vars = exprs(USUBJID, PARAM),   analysis_var = AVAL,   summary_fun = max,   set_values_to = exprs(DTYPE = \"MAXIMUM\") ) %>%   get_summary_records(     by_vars = exprs(USUBJID, PARAM),     analysis_var = AVAL,     summary_fun = mean,     set_values_to = exprs(DTYPE = \"AVERAGE\")   ) #> # A tibble: 1 x 4 #>   USUBJID     PARAM   AVAL DTYPE   #>   <chr>       <chr>  <dbl> <chr>   #> 1 XYZ-001-001 Weight   101 AVERAGE  # Sample ADEG dataset with triplicate record for only AVISIT = 'Baseline' adeg <- tribble(   ~USUBJID, ~EGSEQ, ~PARAM, ~AVISIT, ~EGDTC, ~AVAL, ~TRTA,   \"XYZ-1001\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:50\", 385, \"\",   \"XYZ-1001\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:52\", 399, \"\",   \"XYZ-1001\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-24T07:56\", 396, \"\",   \"XYZ-1001\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:48\", 393, \"Placebo\",   \"XYZ-1001\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-08T09:51\", 388, \"Placebo\",   \"XYZ-1001\", 6, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:48\", 394, \"Placebo\",   \"XYZ-1001\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-22T10:51\", 402, \"Placebo\",   \"XYZ-1002\", 1, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 399, \"\",   \"XYZ-1002\", 2, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T07:58\", 410, \"\",   \"XYZ-1002\", 3, \"QTcF Int. (msec)\", \"Baseline\", \"2016-02-22T08:01\", 392, \"\",   \"XYZ-1002\", 4, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:53\", 407, \"Active 20mg\",   \"XYZ-1002\", 5, \"QTcF Int. (msec)\", \"Visit 2\", \"2016-03-06T09:56\", 400, \"Active 20mg\",   \"XYZ-1002\", 6, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:53\", 414, \"Active 20mg\",   \"XYZ-1002\", 7, \"QTcF Int. (msec)\", \"Visit 3\", \"2016-03-24T10:56\", 402, \"Active 20mg\", )  # Compute the average of AVAL only if there are more than 2 records within the # by group get_summary_records(   adeg,   by_vars = exprs(USUBJID, PARAM, AVISIT),   filter = n() > 2,   analysis_var = AVAL,   summary_fun = function(x) mean(x, na.rm = TRUE),   set_values_to = exprs(DTYPE = \"AVERAGE\") ) #> # A tibble: 2 x 5 #>   USUBJID  PARAM            AVISIT    AVAL DTYPE   #>   <chr>    <chr>            <chr>    <dbl> <chr>   #> 1 XYZ-1001 QTcF Int. (msec) Baseline  393. AVERAGE #> 2 XYZ-1002 QTcF Int. (msec) Baseline  400. AVERAGE"},{"path":"https://pharmaverse.github.io/admiral/reference/get_terms_from_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Terms from the Queries Database — get_terms_from_db","title":"Get Terms from the Queries Database — get_terms_from_db","text":"function checks requirements access database fulfilled (version access function available, see assert_db_requirements()), reads terms database, checks dataset terms expected format (see assert_terms()).","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_terms_from_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Terms from the Queries Database — get_terms_from_db","text":"","code":"get_terms_from_db(   version,   fun,   queries,   definition,   expect_query_name = FALSE,   expect_query_id = FALSE,   i,   temp_env )"},{"path":"https://pharmaverse.github.io/admiral/reference/get_terms_from_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Terms from the Queries Database — get_terms_from_db","text":"version Version version must non null. Otherwise, error issued. value passed access function (fun). fun Access function access function must non null. Otherwise, error issued. function called retrieve terms. queries Queries List queries passed create_query_data(). used error messages. definition Definition query definition passed access function. defines terms returned. expect_query_name QUERY_NAME expected output dataset? expect_query_id QUERY_ID expected output dataset? Index definition queries value used error messages. temp_env Temporary environment value passed access function.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/get_terms_from_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Terms from the Queries Database — get_terms_from_db","text":"Output dataset access function","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"Imputation partial date portion '--DTC' variable based user input.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"","code":"impute_dtc_dt(   dtc,   highest_imputation = \"n\",   date_imputation = \"first\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"n\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\" min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"MID\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"character vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Partial Date Portion of a '--DTC' Variable — impute_dtc_dt","text":"","code":"library(lubridate)  dates <- c(   \"2019-07-18T15:25:40\",   \"2019-07-18T15:25\",   \"2019-07-18T15\",   \"2019-07-18\",   \"2019-02\",   \"2019\",   \"2019\",   \"2019---07\",   \"\" )  # No date imputation (highest_imputation defaulted to \"n\") impute_dtc_dt(dtc = dates) #> [1] \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" NA           #> [6] NA           NA           NA           NA            # Impute to first day/month if date is partial impute_dtc_dt(   dtc = dates,   highest_imputation = \"M\" ) #> [1] \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-02-01\" #> [6] \"2019-01-01\" \"2019-01-01\" \"2019-01-01\" NA           # Same as above impute_dtc_dtm(   dtc = dates,   highest_imputation = \"M\",   date_imputation = \"01-01\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:00\" \"2019-07-18T15:00:00\" #> [4] \"2019-07-18T00:00:00\" \"2019-02-01T00:00:00\" \"2019-01-01T00:00:00\" #> [7] \"2019-01-01T00:00:00\" \"2019-01-01T00:00:00\" NA                     # Impute to last day/month if date is partial impute_dtc_dt(   dtc = dates,   highest_imputation = \"M\",   date_imputation = \"last\", ) #> [1] \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-02-28\" #> [6] \"2019-12-31\" \"2019-12-31\" \"2019-12-31\" NA            # Impute to mid day/month if date is partial impute_dtc_dt(   dtc = dates,   highest_imputation = \"M\",   date_imputation = \"mid\" ) #> [1] \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-07-18\" \"2019-02-15\" #> [6] \"2019-06-30\" \"2019-06-30\" \"2019-06-30\" NA            # Impute a date and ensure that the imputed date is not before a list of # minimum dates impute_dtc_dt(   \"2020-12\",   min_dates = list(     ymd(\"2020-12-06\"),     ymd(\"2020-11-11\")   ),   highest_imputation = \"M\" ) #> [1] \"2020-12-06\"  # Impute completely missing dates (only possible if min_dates or max_dates is specified) impute_dtc_dt(   c(\"2020-12\", NA_character_),   min_dates = list(     ymd(\"2020-12-06\", \"2020-01-01\"),     ymd(\"2020-11-11\", NA)   ),   highest_imputation = \"Y\" ) #> [1] \"2020-12-06\" \"2020-01-01\""},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"Imputation partial date/time portion '--DTC' variable. based user input.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"","code":"impute_dtc_dtm(   dtc,   highest_imputation = \"h\",   date_imputation = \"first\",   time_imputation = \"first\",   min_dates = NULL,   max_dates = NULL,   preserve = FALSE )"},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. highest_imputation Highest imputation level highest_imputation argument controls components DTC value imputed missing. components specified level imputed. component higher level highest imputation level missing, NA_character_ returned. example, highest_imputation = \"D\" \"2020\" results NA_character_ month missing. \"n\" specified, imputation performed, .e., component missing, NA_character_ returned. \"Y\" specified, date_imputation \"first\" \"last\" min_dates max_dates specified respectively. Otherwise, NA_character_ returned year component missing. Default: \"h\" Permitted Values: \"Y\" (year, highest level), \"M\" (month), \"D\" (day), \"h\" (hour), \"m\" (minute), \"s\" (second), \"n\" (none, lowest level) date_imputation value impute day/month datepart missing. character value expected, either format month day specified \"mm-dd\": e.g. \"06-15\" 15th June (year can specified; imputing year \"first\" \"last\" together min_dates max_dates argument can used (see examples).), keyword: \"first\", \"mid\", \"last\" impute first/mid/last day/month. argument ignored highest_imputation less \"D\". Default: \"first\". time_imputation value impute time timepart missing. character value expected, either format hour, min sec specified \"hh:mm:ss\": e.g. \"00:00:00\" start day, keyword: \"first\",\"last\" impute start/end day. argument ignored highest_imputation = \"n\". Default: \"first\". min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. preserve Preserve day month missing day present example \"2019---07\" return \"2019-06-07 preserve = TRUE (date_imputation = \"mid\"). Permitted Values: TRUE, FALSE Default: FALSE","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"character vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"Usually computation function can used %>%.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Partial Date(-time) Portion of a '--DTC' Variable — impute_dtc_dtm","text":"","code":"library(lubridate)  dates <- c(   \"2019-07-18T15:25:40\",   \"2019-07-18T15:25\",   \"2019-07-18T15\",   \"2019-07-18\",   \"2019-02\",   \"2019\",   \"2019\",   \"2019---07\",   \"\" )  # No date imputation (highest_imputation defaulted to \"h\") # Missing time part imputed with 00:00:00 portion by default impute_dtc_dtm(dtc = dates) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:00\" \"2019-07-18T15:00:00\" #> [4] \"2019-07-18T00:00:00\" NA                    NA                    #> [7] NA                    NA                    NA                     # No date imputation (highest_imputation defaulted to \"h\") # Missing time part imputed with 23:59:59 portion impute_dtc_dtm(   dtc = dates,   time_imputation = \"23:59:59\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:59\" \"2019-07-18T15:59:59\" #> [4] \"2019-07-18T23:59:59\" NA                    NA                    #> [7] NA                    NA                    NA                     # Same as above impute_dtc_dtm(   dtc = dates,   time_imputation = \"last\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:59\" \"2019-07-18T15:59:59\" #> [4] \"2019-07-18T23:59:59\" NA                    NA                    #> [7] NA                    NA                    NA                     # Impute to first day/month if date is partial # Missing time part imputed with 00:00:00 portion by default impute_dtc_dtm(   dtc = dates,   highest_imputation = \"M\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:00\" \"2019-07-18T15:00:00\" #> [4] \"2019-07-18T00:00:00\" \"2019-02-01T00:00:00\" \"2019-01-01T00:00:00\" #> [7] \"2019-01-01T00:00:00\" \"2019-01-01T00:00:00\" NA                    # same as above impute_dtc_dtm(   dtc = dates,   highest_imputation = \"M\",   date_imputation = \"01-01\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:00\" \"2019-07-18T15:00:00\" #> [4] \"2019-07-18T00:00:00\" \"2019-02-01T00:00:00\" \"2019-01-01T00:00:00\" #> [7] \"2019-01-01T00:00:00\" \"2019-01-01T00:00:00\" NA                     # Impute to last day/month if date is partial # Missing time part imputed with 23:59:59 portion impute_dtc_dtm(   dtc = dates,   date_imputation = \"last\",   time_imputation = \"last\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:59\" \"2019-07-18T15:59:59\" #> [4] \"2019-07-18T23:59:59\" NA                    NA                    #> [7] NA                    NA                    NA                     # Impute to mid day/month if date is partial # Missing time part imputed with 00:00:00 portion by default impute_dtc_dtm(   dtc = dates,   highest_imputation = \"M\",   date_imputation = \"mid\" ) #> [1] \"2019-07-18T15:25:40\" \"2019-07-18T15:25:00\" \"2019-07-18T15:00:00\" #> [4] \"2019-07-18T00:00:00\" \"2019-02-15T00:00:00\" \"2019-06-30T00:00:00\" #> [7] \"2019-06-30T00:00:00\" \"2019-06-30T00:00:00\" NA                     # Impute a date and ensure that the imputed date is not before a list of # minimum dates impute_dtc_dtm(   \"2020-12\",   min_dates = list(     ymd_hms(\"2020-12-06T12:12:12\"),     ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" ) #> [1] \"2020-12-06T12:12:12\"  # Impute completely missing dates (only possible if min_dates or max_dates is specified) impute_dtc_dtm(   c(\"2020-12\", NA_character_),   min_dates = list(     ymd_hms(\"2020-12-06T12:12:12\", \"2020-01-01T01:01:01\"),     ymd_hms(\"2020-11-11T11:11:11\", NA)   ),   highest_imputation = \"Y\" ) #> [1] \"2020-12-06T12:12:12\" \"2020-01-01T01:01:01\""},{"path":"https://pharmaverse.github.io/admiral/reference/list_all_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"List All Available ADaM Templates — list_all_templates","title":"List All Available ADaM Templates — list_all_templates","text":"List Available ADaM Templates","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/list_all_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List All Available ADaM Templates — list_all_templates","text":"","code":"list_all_templates(package = \"admiral\")"},{"path":"https://pharmaverse.github.io/admiral/reference/list_all_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List All Available ADaM Templates — list_all_templates","text":"package R package look templates. default \"admiral\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/list_all_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List All Available ADaM Templates — list_all_templates","text":"character vector available templates","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/list_all_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List All Available ADaM Templates — list_all_templates","text":"","code":"list_all_templates() #> Existing ADaM templates in package 'admiral': #> • ADAE #> • ADCM #> • ADEG #> • ADEX #> • ADLB #> • ADLBHY #> • ADMH #> • ADPC #> • ADPP #> • ADSL #> • ADVS"},{"path":"https://pharmaverse.github.io/admiral/reference/list_tte_source_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List all tte_source Objects Available in a Package — list_tte_source_objects","title":"List all tte_source Objects Available in a Package — list_tte_source_objects","text":"List tte_source Objects Available Package","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/list_tte_source_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all tte_source Objects Available in a Package — list_tte_source_objects","text":"","code":"list_tte_source_objects(package = \"admiral\")"},{"path":"https://pharmaverse.github.io/admiral/reference/list_tte_source_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all tte_source Objects Available in a Package — list_tte_source_objects","text":"package name package search tte_source objects","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/list_tte_source_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all tte_source Objects Available in a Package — list_tte_source_objects","text":"data.frame row corresponds one tte_source object NULL package contain tte_source objects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/list_tte_source_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all tte_source Objects Available in a Package — list_tte_source_objects","text":"","code":"list_tte_source_objects() #>              object dataset_name                                        filter #> 1     ae_gr35_event         adae TRTEMFL == \"Y\" & ATOXGR %in% c(\"3\", \"4\", \"5\") #> 2      ae_gr3_event         adae                TRTEMFL == \"Y\" & ATOXGR == \"3\" #> 3      ae_gr5_event         adae                TRTEMFL == \"Y\" & ATOXGR == \"5\" #> 4  lastalive_censor         adsl                                          NULL #> 5          ae_event         adae                                TRTEMFL == \"Y\" #> 6       ae_wd_event         adae    TRTEMFL == \"Y\" & AEACN == \"DRUG WITHDRAWN\" #> 7      ae_gr4_event         adae                TRTEMFL == \"Y\" & ATOXGR == \"4\" #> 8      ae_gr1_event         adae                TRTEMFL == \"Y\" & ATOXGR == \"1\" #> 9      ae_sev_event         adae            TRTEMFL == \"Y\" & AESEV == \"SEVERE\" #> 10     ae_ser_event         adae                 TRTEMFL == \"Y\" & AESER == \"Y\" #> 11     ae_gr2_event         adae                TRTEMFL == \"Y\" & ATOXGR == \"2\" #> 12      death_event         adsl                                  DTHFL == \"Y\" #>        date censor #> 1     ASTDT      0 #> 2     ASTDT      0 #> 3     ASTDT      0 #> 4  LSTALVDT      1 #> 5     ASTDT      0 #> 6     ASTDT      0 #> 7     ASTDT      0 #> 8     ASTDT      0 #> 9     ASTDT      0 #> 10    ASTDT      0 #> 11    ASTDT      0 #> 12    DTHDT      0 #>                                                                                                 set_values_to #> 1                   EVNTDESC: \"GRADE 3-5 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 2                     EVNTDESC: \"GRADE 3 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 3                     EVNTDESC: \"GRADE 5 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 4                                                   EVNTDESC: \"ALIVE\"<br>SRCDOM: \"ADSL\"<br>SRCVAR: \"LSTALVDT\" #> 5                             EVNTDESC: \"ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 6  EVNTDESC: \"ADVERSE EVENT LEADING TO DRUG WITHDRAWAL\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 7                     EVNTDESC: \"GRADE 4 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 8                     EVNTDESC: \"GRADE 1 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 9                      EVNTDESC: \"SEVERE ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 10                    EVNTDESC: \"SERIOUS ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 11                    EVNTDESC: \"GRADE 2 ADVERSE EVENT\"<br>SRCDOM: \"ADAE\"<br>SRCVAR: \"ASTDT\"<br>SRCSEQ: AESEQ #> 12                                                     EVNTDESC: \"DEATH\"<br>SRCDOM: \"ADSL\"<br>SRCVAR: \"DTHDT\""},{"path":"https://pharmaverse.github.io/admiral/reference/max_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Value on a Subset — max_cond","title":"Maximum Value on a Subset — max_cond","text":"function derives maximum value vector/column subset entries/observations.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/max_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Value on a Subset — max_cond","text":"","code":"max_cond(var, cond)"},{"path":"https://pharmaverse.github.io/admiral/reference/max_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Value on a Subset — max_cond","text":"var vector cond condition","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/max_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Value on a Subset — max_cond","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral) data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"NE\",   \"1\",      4,        \"CR\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"CR\",   \"2\",      2,        \"PR\",   \"2\",      3,        \"CR\", )  # In oncology setting, when needing to check the first time a patient had # a Complete Response (CR) to compare to see if any Partial Response (PR) # occurred after this add variable indicating if PR occurred after CR group_by(data, USUBJID) %>% mutate(   first_cr_vis = min_cond(var = AVISITN, cond = AVALC == \"CR\"),   last_pr_vis = max_cond(var = AVISITN, cond = AVALC == \"PR\"),   pr_after_cr = last_pr_vis > first_cr_vis ) #> # A tibble: 8 x 6 #> # Groups:   USUBJID [2] #>   USUBJID AVISITN AVALC first_cr_vis last_pr_vis pr_after_cr #>   <chr>     <dbl> <chr>        <dbl>       <dbl> <lgl>       #> 1 1             1 PR               2           1 FALSE       #> 2 1             2 CR               2           1 FALSE       #> 3 1             3 NE               2           1 FALSE       #> 4 1             4 CR               2           1 FALSE       #> 5 1             5 NE               2           1 FALSE       #> 6 2             1 CR               1           2 TRUE        #> 7 2             2 PR               1           2 TRUE        #> 8 2             3 CR               1           2 TRUE"},{"path":"https://pharmaverse.github.io/admiral/reference/min_cond.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum Value on a Subset — min_cond","title":"Minimum Value on a Subset — min_cond","text":"function derives minimum value vector/column subset entries/observations.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/min_cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum Value on a Subset — min_cond","text":"","code":"min_cond(var, cond)"},{"path":"https://pharmaverse.github.io/admiral/reference/min_cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum Value on a Subset — min_cond","text":"var vector cond condition","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/min_cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum Value on a Subset — min_cond","text":"","code":"library(tibble) library(dplyr, warn.conflicts = FALSE) library(admiral) data <- tribble(   ~USUBJID, ~AVISITN, ~AVALC,   \"1\",      1,        \"PR\",   \"1\",      2,        \"CR\",   \"1\",      3,        \"NE\",   \"1\",      4,        \"CR\",   \"1\",      5,        \"NE\",   \"2\",      1,        \"CR\",   \"2\",      2,        \"PR\",   \"2\",      3,        \"CR\", )  # In oncology setting, when needing to check the first time a patient had # a Complete Response (CR) to compare to see if any Partial Response (PR) # occurred after this add variable indicating if PR occurred after CR group_by(data, USUBJID) %>% mutate(   first_cr_vis = min_cond(var = AVISITN, cond = AVALC == \"CR\"),   last_pr_vis = max_cond(var = AVISITN, cond = AVALC == \"PR\"),   pr_after_cr = last_pr_vis > first_cr_vis ) #> # A tibble: 8 x 6 #> # Groups:   USUBJID [2] #>   USUBJID AVISITN AVALC first_cr_vis last_pr_vis pr_after_cr #>   <chr>     <dbl> <chr>        <dbl>       <dbl> <lgl>       #> 1 1             1 PR               2           1 FALSE       #> 2 1             2 CR               2           1 FALSE       #> 3 1             3 NE               2           1 FALSE       #> 4 1             4 CR               2           1 FALSE       #> 5 1             5 NE               2           1 FALSE       #> 6 2             1 CR               1           2 TRUE        #> 7 2             2 PR               1           2 TRUE        #> 8 2             3 CR               1           2 TRUE"},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Negate List of Variables — negate_vars","title":"Negate List of Variables — negate_vars","text":"function adds minus sign prefix variable.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negate List of Variables — negate_vars","text":"","code":"negate_vars(vars = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negate List of Variables — negate_vars","text":"vars List variables created exprs()","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negate List of Variables — negate_vars","text":"list expressions","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Negate List of Variables — negate_vars","text":"useful list variables removed dataset, e.g., select(!!!negate_vars(by_vars)) removes variables.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/negate_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negate List of Variables — negate_vars","text":"","code":"negate_vars(exprs(USUBJID, STUDYID)) #> [[1]] #> -USUBJID #>  #> [[2]] #> -STUDYID #>"},{"path":"https://pharmaverse.github.io/admiral/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Set of Parameters — params","title":"Create a Set of Parameters — params","text":"Create set variable parameters/function arguments used call_derivation().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Set of Parameters — params","text":"","code":"params(...)"},{"path":"https://pharmaverse.github.io/admiral/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Set of Parameters — params","text":"... One named arguments","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Set of Parameters — params","text":"object class params","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Set of Parameters — params","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(admiral.test) data(admiral_ae) data(admiral_adsl)  adae <- admiral_ae[sample(1:nrow(admiral_ae), 1000), ] %>%   select(USUBJID, AESTDTC, AEENDTC) %>%   derive_vars_merged(     dataset_add = admiral_adsl,     new_vars = exprs(TRTSDT, TRTEDT),     by_vars = exprs(USUBJID)   )  ## In order to derive both `ASTDT` and `AENDT` in `ADAE`, one can use `derive_vars_dt()` adae %>%   derive_vars_dt(     new_vars_prefix = \"AST\",     dtc = AESTDTC,     date_imputation = \"first\",     min_dates = exprs(TRTSDT),     max_dates = exprs(TRTEDT)   ) %>%   derive_vars_dt(     new_vars_prefix = \"AEN\",     dtc = AEENDTC,     date_imputation = \"last\",     min_dates = exprs(TRTSDT),     max_dates = exprs(TRTEDT)   ) #> # A tibble: 1,000 x 7 #>    USUBJID     AESTDTC    AEENDTC    TRTSDT     TRTEDT     ASTDT      AENDT      #>    <chr>       <chr>      <chr>      <date>     <date>     <date>     <date>     #>  1 01-708-1253 2013-05-07 2013-05-10 2013-05-07 2013-11-05 2013-05-07 2013-05-10 #>  2 01-706-1041 2014-03-04 2014-07-29 2013-12-31 2014-07-28 2014-03-04 2014-07-29 #>  3 01-705-1281 2014-01-30 NA         2013-11-28 2014-02-27 2014-01-30 NA         #>  4 01-709-1099 2013-11-12 NA         2013-10-25 2014-04-25 2013-11-12 NA         #>  5 01-701-1211 2013-01-11 NA         2012-11-15 2013-01-12 2013-01-11 NA         #>  6 01-701-1302 2013-10-23 NA         2013-08-29 2013-11-05 2013-10-23 NA         #>  7 01-716-1157 2013-10-17 2013-11-04 2013-10-02 2014-04-04 2013-10-17 2013-11-04 #>  8 01-717-1004 2014-01-15 2014-02-08 2014-01-14 2014-07-16 2014-01-15 2014-02-08 #>  9 01-718-1250 2013-10-09 2013-11-15 2013-09-21 2014-01-31 2013-10-09 2013-11-15 #> 10 01-704-1323 2013-07-30 2013-08-03 2013-07-08 2013-08-05 2013-07-30 2013-08-03 #> # … with 990 more rows  ## While `derive_vars_dt()` can only add one variable at a time, using `call_derivation()` ## one can add multiple variables in one go. ## The function arguments which are different from a variable to another (e.g. `new_vars_prefix`, ## `dtc`, and `date_imputation`) are specified as a list of `params()` in the `variable_params` ## argument of `call_derivation()`. All other arguments which are common to all variables ## (e.g. `min_dates` and `max_dates`) are specified outside of `variable_params` (i.e. in `...`). call_derivation(   dataset = adae,   derivation = derive_vars_dt,   variable_params = list(     params(dtc = AESTDTC, date_imputation = \"first\", new_vars_prefix = \"AST\"),     params(dtc = AEENDTC, date_imputation = \"last\", new_vars_prefix = \"AEN\")   ),   min_dates = exprs(TRTSDT),   max_dates = exprs(TRTEDT) ) #> # A tibble: 1,000 x 7 #>    USUBJID     AESTDTC    AEENDTC    TRTSDT     TRTEDT     ASTDT      AENDT      #>    <chr>       <chr>      <chr>      <date>     <date>     <date>     <date>     #>  1 01-708-1253 2013-05-07 2013-05-10 2013-05-07 2013-11-05 2013-05-07 2013-05-10 #>  2 01-706-1041 2014-03-04 2014-07-29 2013-12-31 2014-07-28 2014-03-04 2014-07-29 #>  3 01-705-1281 2014-01-30 NA         2013-11-28 2014-02-27 2014-01-30 NA         #>  4 01-709-1099 2013-11-12 NA         2013-10-25 2014-04-25 2013-11-12 NA         #>  5 01-701-1211 2013-01-11 NA         2012-11-15 2013-01-12 2013-01-11 NA         #>  6 01-701-1302 2013-10-23 NA         2013-08-29 2013-11-05 2013-10-23 NA         #>  7 01-716-1157 2013-10-17 2013-11-04 2013-10-02 2014-04-04 2013-10-17 2013-11-04 #>  8 01-717-1004 2014-01-15 2014-02-08 2014-01-14 2014-07-16 2014-01-15 2014-02-08 #>  9 01-718-1250 2013-10-09 2013-11-15 2013-09-21 2014-01-31 2013-10-09 2013-11-15 #> 10 01-704-1323 2013-07-30 2013-08-03 2013-07-08 2013-08-05 2013-07-30 2013-08-03 #> # … with 990 more rows  ## The above call using `call_derivation()` is equivalent to the call using `derive_vars_dt()` ## to derive variables `ASTDT` and `AENDT` separately at the beginning."},{"path":"https://pharmaverse.github.io/admiral/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pharmaverse.github.io/admiral/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print.adam_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Print adam_templates Objects — print.adam_templates","title":"Print adam_templates Objects — print.adam_templates","text":"Print adam_templates Objects","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print.adam_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print adam_templates Objects — print.adam_templates","text":"","code":"# S3 method for adam_templates print(x, ...)"},{"path":"https://pharmaverse.github.io/admiral/reference/print.adam_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print adam_templates Objects — print.adam_templates","text":"x adam_templates object ... used","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print.adam_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print adam_templates Objects — print.adam_templates","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/print.adam_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print adam_templates Objects — print.adam_templates","text":"","code":"templates <- list_all_templates() print(templates) #> Existing ADaM templates in package 'admiral': #> • ADAE #> • ADCM #> • ADEG #> • ADEX #> • ADLB #> • ADLBHY #> • ADMH #> • ADPC #> • ADPP #> • ADSL #> • ADVS"},{"path":"https://pharmaverse.github.io/admiral/reference/print.source.html","id":null,"dir":"Reference","previous_headings":"","what":"Print source Objects — print.source","title":"Print source Objects — print.source","text":"Print source Objects","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print.source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print source Objects — print.source","text":"","code":"# S3 method for source print(x, ...)"},{"path":"https://pharmaverse.github.io/admiral/reference/print.source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print source Objects — print.source","text":"x source object ... indent = <numeric value> specified output indented specified number characters.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print.source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print source Objects — print.source","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/print.source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print source Objects — print.source","text":"","code":"print(death_event) #> <event_source> object #> dataset_name: \"adsl\" #> filter: DTHFL == \"Y\" #> date: DTHDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"DEATH\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"DTHDT\""},{"path":"https://pharmaverse.github.io/admiral/reference/print_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Named List — print_named_list","title":"Print Named List — print_named_list","text":"Print Named List","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Named List — print_named_list","text":"","code":"print_named_list(list, indent = 0)"},{"path":"https://pharmaverse.github.io/admiral/reference/print_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Named List — print_named_list","text":"list named list indent Indent output indented specified number characters.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/print_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Named List — print_named_list","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/print_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Named List — print_named_list","text":"","code":"print_named_list(death_event) #> dataset_name: \"adsl\" #> filter: DTHFL == \"Y\" #> date: DTHDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"DEATH\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"DTHDT\""},{"path":"https://pharmaverse.github.io/admiral/reference/queries.html","id":null,"dir":"Reference","previous_headings":"","what":"Queries Dataset — queries","title":"Queries Dataset — queries","text":"Queries Dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/queries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queries Dataset — queries","text":"","code":"queries"},{"path":"https://pharmaverse.github.io/admiral/reference/queries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Queries Dataset — queries","text":"object class tbl_df (inherits tbl, data.frame) 15 rows 8 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/queries.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Queries Dataset — queries","text":"example standard query dataset used deriving variables ADAE ADCM","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/queries_mh.html","id":null,"dir":"Reference","previous_headings":"","what":"Queries MH Dataset — queries_mh","title":"Queries MH Dataset — queries_mh","text":"Queries MH Dataset","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/queries_mh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queries MH Dataset — queries_mh","text":"","code":"queries_mh"},{"path":"https://pharmaverse.github.io/admiral/reference/queries_mh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Queries MH Dataset — queries_mh","text":"object class tbl_df (inherits tbl, data.frame) 14 rows 8 columns.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/queries_mh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Queries MH Dataset — queries_mh","text":"example standard query MH dataset used deriving variables ADMH","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an query object — query","title":"Create an query object — query","text":"query object defines query, e.g., Standard MedDRA Query (SMQ), Standardized Drug Grouping (SDG), customized query (CQ). used input create_query_data().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an query object — query","text":"","code":"query(prefix, name = auto, id = NULL, add_scope_num = FALSE, definition = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an query object — query","text":"prefix value used populate VAR_PREFIX output dataset create_query_data(), e.g., \"SMQ03\" name value used populate QUERY_NAME output dataset create_query_data(). auto keyword specified, variable set name query SMQ/SDG database. Permitted Values: character scalar auto keyword. auto keyword permitted queries defined basket_select() object. id value used populate QUERY_ID output dataset create_query_data(). auto keyword specified, variable set id query SMQ/SDG database. Permitted Values: integer scalar auto keyword. auto keyword permitted queries defined basket_select() object. add_scope_num Determines  QUERY_SCOPE_NUM output dataset create_query_data() populated parameter set TRUE, definition must basket_select() object. Default: FALSE Permitted Values: TRUE, FALSE definition Definition terms belonging query three different ways define terms: basket_select() object specified select query SMQ database. data frame columns TERM_LEVEL TERM_NAME TERM_ID can specified define terms customized query. TERM_LEVEL set name variable used select terms, e.g., \"AEDECOD\" \"AELLTCD\". TERM_LEVEL need constant within query. example query can based AEDECOD AELLT. TERM_LEVEL refers character variable, TERM_NAME set value variable. refers numeric variable, TERM_ID set value variable. character variables numeric variables used, TERM_ID TERM_NAME respectively can omitted. list data frames basket_select() objects can specified define customized query based custom terms SMQs. data frames must structure described previous item. Permitted Values: basket_select() object, data frame, list data frames basket_select() objects.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an query object — query","text":"object class query.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an query object — query","text":"","code":"# create a query for an SMQ library(tibble) library(dplyr, warn.conflicts = FALSE)  # create a query for a SMQ query(   prefix = \"SMQ02\",   id = auto,   definition = basket_select(     name = \"Pregnancy and neonatal topics (SMQ)\",     scope = \"NARROW\",     type = \"smq\"   ) ) #> <query> object #> prefix: \"SMQ02\" #> name: auto #> id: auto #> add_scope_num: FALSE #> definition: #>   <basket_select> object #>   name: \"Pregnancy and neonatal topics (SMQ)\" #>   id: NULL #>   scope: \"NARROW\" #>   type: \"smq\"  # create a query for an SDG query(   prefix = \"SDG01\",   id = auto,   definition = basket_select(     name = \"5-aminosalicylates for ulcerative colitis\",     scope = NA_character_,     type = \"sdg\"   ) ) #> <query> object #> prefix: \"SDG01\" #> name: auto #> id: auto #> add_scope_num: FALSE #> definition: #>   <basket_select> object #>   name: \"5-aminosalicylates for ulcerative colitis\" #>   id: NULL #>   scope: \"NA\" #>   type: \"sdg\"  # creating a query for a customized query cqterms <- tribble(   ~TERM_NAME, ~TERM_ID,   \"APPLICATION SITE ERYTHEMA\", 10003041L,   \"APPLICATION SITE PRURITUS\", 10003053L ) %>%   mutate(TERM_LEVEL = \"AEDECOD\")  query(   prefix = \"CQ01\",   name = \"Application Site Issues\",   definition = cqterms ) #> <query> object #> prefix: \"CQ01\" #> name: \"Application Site Issues\" #> add_scope_num: FALSE #> definition: #> # A tibble: 2 x 3 #>   TERM_NAME                  TERM_ID TERM_LEVEL #>   <chr>                        <int> <chr>      #> 1 APPLICATION SITE ERYTHEMA 10003041 AEDECOD    #> 2 APPLICATION SITE PRURITUS 10003053 AEDECOD     # creating a customized query based on SMQs and additional terms query(   prefix = \"CQ03\",   name = \"Special issues of interest\",   definition = list(     cqterms,     basket_select(       name = \"Pregnancy and neonatal topics (SMQ)\",       scope = \"NARROW\",       type = \"smq\"     ),     basket_select(       id = 8050L,       scope = \"BROAD\",       type = \"smq\"     )   ) ) #> <query> object #> prefix: \"CQ03\" #> name: \"Special issues of interest\" #> add_scope_num: FALSE #> definition: #>   1: #> # A tibble: 2 x 3 #>   TERM_NAME                  TERM_ID TERM_LEVEL #>   <chr>                        <int> <chr>      #> 1 APPLICATION SITE ERYTHEMA 10003041 AEDECOD    #> 2 APPLICATION SITE PRURITUS 10003053 AEDECOD    #>   2: #>     <basket_select> object #>     name: \"Pregnancy and neonatal topics (SMQ)\" #>     id: NULL #>     scope: \"NARROW\" #>     type: \"smq\" #>   3: #>     <basket_select> object #>     name: NULL #>     id: 8050L #>     scope: \"BROAD\" #>     type: \"smq\""},{"path":"https://pharmaverse.github.io/admiral/reference/reexport-desc.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr desc — desc","title":"dplyr desc — desc","text":"See dplyr::desc details.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/reexport-exprs.html","id":null,"dir":"Reference","previous_headings":"","what":"rlang exprs — exprs","title":"rlang exprs — exprs","text":"See rlang::exprs details.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a Derivation on a Subset of the Input Dataset — restrict_derivation","title":"Execute a Derivation on a Subset of the Input Dataset — restrict_derivation","text":"Execute derivation subset input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a Derivation on a Subset of the Input Dataset — restrict_derivation","text":"","code":"restrict_derivation(dataset, derivation, args = NULL, filter)"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a Derivation on a Subset of the Input Dataset — restrict_derivation","text":"dataset Input dataset derivation Derivation function performs specific derivation expected. derivation adds variables observations dataset. first argument derivation must expect dataset derivation must return dataset. function must provide dataset argument arguments specified params() objects passed arg argument. Please note possible specify {dplyr} functions like mutate() summarize(). args Arguments derivation params() object expected. filter Filter condition","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_derivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a Derivation on a Subset of the Input Dataset — restrict_derivation","text":"","code":"library(tibble)  adlb <- tribble(   ~USUBJID, ~AVISITN, ~AVAL, ~ABLFL,   \"1\",            -1,   113, NA_character_,   \"1\",             0,   113, \"Y\",   \"1\",             3,   117, NA_character_,   \"2\",             0,    95, \"Y\",   \"3\",             0,   111, \"Y\",   \"3\",             1,   101, NA_character_,   \"3\",             2,   123, NA_character_ )  # Derive BASE for post-baseline records only (derive_var_base() can not be used in this case # as it requires the baseline observation to be in the input dataset) restrict_derivation(   adlb,   derivation = derive_vars_merged,   args = params(     by_vars = exprs(USUBJID),     dataset_add = adlb,     filter_add = ABLFL == \"Y\",     new_vars = exprs(BASE = AVAL)   ),   filter = AVISITN > 0 ) #> # A tibble: 7 x 5 #>   USUBJID AVISITN  AVAL ABLFL  BASE #>   <chr>     <dbl> <dbl> <chr> <dbl> #> 1 1             3   117 NA      113 #> 2 3             1   101 NA      111 #> 3 3             2   123 NA      111 #> 4 1            -1   113 NA       NA #> 5 1             0   113 Y        NA #> 6 2             0    95 Y        NA #> 7 3             0   111 Y        NA  # Derive BASE for baseline and post-baseline records only restrict_derivation(   adlb,   derivation = derive_var_base,   args = params(     by_vars = exprs(USUBJID)   ),   filter = AVISITN >= 0 ) %>%   # Derive CHG for post-baseline records only   restrict_derivation(     derivation = derive_var_chg,     filter = AVISITN > 0   ) #> # A tibble: 7 x 6 #>   USUBJID AVISITN  AVAL ABLFL  BASE   CHG #>   <chr>     <dbl> <dbl> <chr> <dbl> <dbl> #> 1 1             3   117 NA      113     4 #> 2 3             1   101 NA      111   -10 #> 3 3             2   123 NA      111    12 #> 4 1             0   113 Y       113    NA #> 5 2             0    95 Y        95    NA #> 6 3             0   111 Y       111    NA #> 7 1            -1   113 NA       NA    NA"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dt","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dt","text":"Restrict Imputed DTC date Minimum/Maximum Dates","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dt","text":"","code":"restrict_imputed_dtc_dt(dtc, imputed_dtc, min_dates, max_dates)"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dt","text":"dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. imputed_dtc imputed DTC date min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected.","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dt","text":"last minimum dates (min_dates) range partial DTC date (dtc) first maximum dates (max_dates) range partial DTC date (dtc) imputed_dtc partial DTC date (dtc) range minimum maximum dates.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dtm","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dtm","text":"Restrict Imputed DTC date Minimum/Maximum Dates","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dtm","text":"","code":"restrict_imputed_dtc_dtm(dtc, imputed_dtc, min_dates, max_dates)"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dtm","text":"dtc '--DTC' date impute character date expected format like yyyy-mm-dd yyyy-mm-ddThh:mm:ss. Trailing components can omitted - valid \"missing\" value component. imputed_dtc imputed DTC date min_dates Minimum dates list dates expected. ensured imputed date specified dates, e.g., imputed adverse event start date first treatment date. dates range possible dates dtc value considered. possible dates defined missing parts dtc date (see example ). ensures non-missing parts dtc date changed. date date-time object expected. example   returns \"2020-11-11T11:11:11\" possible dates \"2020-11\" range \"2020-11-01T00:00:00\" \"2020-11-30T23:59:59\". Therefore \"2020-12-06T12:12:12\" ignored. Returning \"2020-12-06T12:12:12\" changed month although missing (dtc date). date variables (datetime) list time imputed \"00:00:00\". Specifying date variables makes sense date imputed. time imputed, date variables affect result. max_dates Maximum dates list dates expected. ensured imputed date specified dates, e.g., imputed date data cut date. dates range possible dates considered. date date-time object expected. date variables (datetime) list time imputed \"23:59:59\". Specifying date variables makes sense date imputed. time imputed, date variables affect result.","code":"impute_dtc_dtm(   \"2020-11\",   min_dates = list(    ymd_hms(\"2020-12-06T12:12:12\"),    ymd_hms(\"2020-11-11T11:11:11\")   ),   highest_imputation = \"M\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/restrict_imputed_dtc_dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict Imputed DTC date to Minimum/Maximum Dates — restrict_imputed_dtc_dtm","text":"last minimum dates (min_dates) range partial DTC date (dtc) first maximum dates (max_dates) range partial DTC date (dtc) imputed_dtc partial DTC date (dtc) range minimum maximum dates.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Value of Admiral Options — set_admiral_options","title":"Set the Value of Admiral Options — set_admiral_options","text":"Set Values Admiral Options Can Modified Advanced Users.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Value of Admiral Options — set_admiral_options","text":"","code":"set_admiral_options(subject_keys, force_admiral_vars)"},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Value of Admiral Options — set_admiral_options","text":"subject_keys Variables uniquely identify subject, defaults exprs(STUDYID, USUBJID). option used default value subject_keys argument admiral functions. force_admiral_vars option set TRUE (default), admiral definition vars() forced. just temporary solution allow running scripts use vars() admiral function calls. removed future release.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Value of Admiral Options — set_admiral_options","text":"return value, called side effects.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the Value of Admiral Options — set_admiral_options","text":"Modify admiral option, e.g subject_keys, automatically affects downstream function inputs get_admiral_option() called derive_param_exist_flag().","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/set_admiral_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Value of Admiral Options — set_admiral_options","text":"","code":"library(lubridate) library(dplyr, warn.conflicts = FALSE) library(tibble) set_admiral_options(subject_keys = exprs(STUDYID, USUBJID2))  # Derive a new parameter for measurable disease at baseline adsl <- tribble(   ~USUBJID2,   \"1\",   \"2\",   \"3\" ) %>%   mutate(STUDYID = \"XX1234\")  tu <- tribble(   ~USUBJID2, ~VISIT,      ~TUSTRESC,   \"1\",       \"SCREENING\", \"TARGET\",   \"1\",       \"WEEK 1\",    \"TARGET\",   \"1\",       \"WEEK 5\",    \"TARGET\",   \"1\",       \"WEEK 9\",    \"NON-TARGET\",   \"2\",       \"SCREENING\", \"NON-TARGET\",   \"2\",       \"SCREENING\", \"NON-TARGET\" ) %>%   mutate(     STUDYID = \"XX1234\",     TUTESTCD = \"TUMIDENT\"   )  derive_param_exist_flag(   dataset_adsl = adsl,   dataset_add = tu,   filter_add = TUTESTCD == \"TUMIDENT\" & VISIT == \"SCREENING\",   condition = TUSTRESC == \"TARGET\",   false_value = \"N\",   missing_value = \"N\",   set_values_to = exprs(     PARAMCD = \"MDIS\",     PARAM = \"Measurable Disease at Baseline\"   ) ) #> # A tibble: 3 x 6 #>   USUBJID2 STUDYID AVALC  AVAL PARAMCD PARAM                          #>   <chr>    <chr>   <chr> <dbl> <chr>   <chr>                          #> 1 1        XX1234  Y         1 MDIS    Measurable Disease at Baseline #> 2 2        XX1234  N         0 MDIS    Measurable Disease at Baseline #> 3 3        XX1234  N         0 MDIS    Measurable Disease at Baseline"},{"path":"https://pharmaverse.github.io/admiral/reference/signal_duplicate_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Duplicate Records — signal_duplicate_records","title":"Signal Duplicate Records — signal_duplicate_records","text":"Signal Duplicate Records","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/signal_duplicate_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Duplicate Records — signal_duplicate_records","text":"","code":"signal_duplicate_records(   dataset,   by_vars,   msg = paste(\"Dataset contains duplicate records with respect to\",     enumerate(vars2chr(by_vars))),   cnd_type = \"error\" )"},{"path":"https://pharmaverse.github.io/admiral/reference/signal_duplicate_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal Duplicate Records — signal_duplicate_records","text":"dataset data frame by_vars list variables created using exprs() identifying groups records look duplicates msg condition message cnd_type Type condition signal detecting duplicate records. One \"message\", \"warning\" \"error\". Default \"error\".","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/signal_duplicate_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal Duplicate Records — signal_duplicate_records","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/signal_duplicate_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal Duplicate Records — signal_duplicate_records","text":"","code":"data(admiral_adsl)  # Duplicate the first record adsl <- rbind(admiral_adsl[1L, ], admiral_adsl)  signal_duplicate_records(adsl, exprs(USUBJID), cnd_type = \"message\") #> Dataset contains duplicate records with respect to `USUBJID` #> Run `get_duplicates_dataset()` to access the duplicate records"},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"input dataset split slices (subsets) slice derivation called separately. arguments derivation may vary depending slice.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"","code":"slice_derivation(dataset, derivation, args = NULL, ...)"},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"dataset Input dataset derivation Derivation function performs specific derivation expected. derivation adds variables observations dataset. first argument derivation must expect dataset derivation must return dataset. function must provide dataset argument arguments specified params() objects passed arg argument. Please note possible specify {dplyr} functions like mutate() summarize(). args Arguments derivation params() object expected. ... derivation_slice() object expected slice defines subset input dataset parameters derivation. derivation called subset parameters specified args parameter args field derivation_slice() object. parameter specified , value derivation_slice() overwrites one args.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"input dataset variables derived derivation added","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"slice derivation called subset defined filter field derivation_slice() object parameters specified args parameter args field derivation_slice() object. parameter specified , value derivation_slice() overwrites one args. Observations match one slice considered first matching slice. Observations match slices included output dataset derivation called .","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/slice_derivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a Derivation with Different Arguments for Subsets of the Input Dataset — slice_derivation","text":"","code":"library(tibble) library(stringr) advs <- tribble(   ~USUBJID, ~VSDTC,       ~VSTPT,   \"1\",      \"2020-04-16\", NA_character_,   \"1\",      \"2020-04-16\", \"BEFORE TREATMENT\" )  # For the second slice filter is set to TRUE. Thus derive_vars_dtm is called # with time_imputation = \"last\" for all observations which do not match for the # first slice. slice_derivation(   advs,   derivation = derive_vars_dtm,   args = params(     dtc = VSDTC,     new_vars_prefix = \"A\"   ),   derivation_slice(     filter = str_detect(VSTPT, \"PRE|BEFORE\"),     args = params(time_imputation = \"first\")   ),   derivation_slice(     filter = TRUE,     args = params(time_imputation = \"last\")   ) ) #> # A tibble: 2 x 5 #>   USUBJID VSDTC      VSTPT            ADTM                ATMF  #>   <chr>   <chr>      <chr>            <dttm>              <chr> #> 1 1       2020-04-16 NA               2020-04-16 23:59:59 H     #> 2 1       2020-04-16 BEFORE TREATMENT 2020-04-16 00:00:00 H"},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tte_source Object — tte_source","title":"Create a tte_source Object — tte_source","text":"tte_source object used define events possible censorings.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tte_source Object — tte_source","text":"","code":"tte_source(dataset_name, filter = NULL, date, censor = 0, set_values_to = NULL)"},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tte_source Object — tte_source","text":"dataset_name name source dataset name refers dataset provided source_datasets parameter derive_param_tte(). filter unquoted condition selecting observations dataset events possible censoring time points. date variable providing date event censoring. date, datetime can specified. unquoted symbol expected. Refer derive_vars_dt() impute derive date date character vector date object. censor Censoring value CDISC strongly recommends using 0 events positive integers censoring. set_values_to named list returned exprs() defining variables set event censoring, e.g. exprs(EVENTDESC = \"DEATH\", SRCDOM = \"ADSL\", SRCVAR = \"DTHDT\"). values must symbol, character string, numeric value, NA.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tte_source Object — tte_source","text":"object class tte_source","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Defined Time-to-Event Source Objects — death_event","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"pre-defined tte_source objects can used input derive_param_tte().","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"","code":"death_event  lastalive_censor  ae_event  ae_ser_event  ae_gr1_event  ae_gr2_event  ae_gr3_event  ae_gr4_event  ae_gr5_event  ae_gr35_event  ae_sev_event  ae_wd_event"},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"see definition various objects simply print object R console, e.g. print(death_event). details use objects please refer derive_param_tte().","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/tte_source_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"","code":"# This shows the definition of all pre-defined `tte_source` objects that ship # with {admiral} for (obj in list_tte_source_objects()$object) {   cat(obj, \"\\n\")   print(get(obj))   cat(\"\\n\") } #> ae_gr35_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR %in% c(\"3\", \"4\", \"5\") #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 3-5 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_gr3_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR == \"3\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 3 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_gr5_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR == \"5\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 5 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> lastalive_censor  #> <censor_source> object #> dataset_name: \"adsl\" #> filter: NULL #> date: LSTALVDT #> censor: 1L #> set_values_to: #>   EVNTDESC: \"ALIVE\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"LSTALVDT\" #>  #> ae_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_wd_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & AEACN == \"DRUG WITHDRAWN\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"ADVERSE EVENT LEADING TO DRUG WITHDRAWAL\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_gr4_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR == \"4\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 4 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_gr1_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR == \"1\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 1 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_sev_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & AESEV == \"SEVERE\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"SEVERE ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_ser_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & AESER == \"Y\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"SERIOUS ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> ae_gr2_event  #> <event_source> object #> dataset_name: \"adae\" #> filter: TRTEMFL == \"Y\" & ATOXGR == \"2\" #> date: ASTDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"GRADE 2 ADVERSE EVENT\" #>   SRCDOM: \"ADAE\" #>   SRCVAR: \"ASTDT\" #>   SRCSEQ: AESEQ #>  #> death_event  #> <event_source> object #> dataset_name: \"adsl\" #> filter: DTHFL == \"Y\" #> date: DTHDT #> censor: 0L #> set_values_to: #>   EVNTDESC: \"DEATH\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"DTHDT\" #>"},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Open an ADaM Template Script — use_ad_template","title":"Open an ADaM Template Script — use_ad_template","text":"Open ADaM Template Script","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open an ADaM Template Script — use_ad_template","text":"","code":"use_ad_template(   adam_name = \"adsl\",   save_path = paste0(\"./\", adam_name, \".R\"),   package = \"admiral\",   overwrite = FALSE,   open = interactive() )"},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open an ADaM Template Script — use_ad_template","text":"adam_name ADaM dataset name. can use available dataset name ADAE, ADCM, ADEG, ADEX, ADLB, ADLBHY, ADMH, ADPC, ADPP, ADSL, ADVS, dataset name case-insensitive. default dataset name ADSL. save_path Path save script. package R package look templates. default \"admiral\". overwrite Whether overwrite existing file named save_path. open Whether open script right away.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open an ADaM Template Script — use_ad_template","text":"return values, called side effects","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open an ADaM Template Script — use_ad_template","text":"Running without arguments use_ad_template() auto-generates adsl.R current path. Use list_all_templates() discover templates available.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/use_ad_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open an ADaM Template Script — use_ad_template","text":"","code":"if (interactive()) {   use_ad_template(\"adsl\") }"},{"path":"https://pharmaverse.github.io/admiral/reference/validate_basket_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an object is indeed a basket_select object — validate_basket_select","title":"Validate an object is indeed a basket_select object — validate_basket_select","text":"Validate object indeed basket_select object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/validate_basket_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an object is indeed a basket_select object — validate_basket_select","text":"","code":"validate_basket_select(obj)"},{"path":"https://pharmaverse.github.io/admiral/reference/validate_basket_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an object is indeed a basket_select object — validate_basket_select","text":"obj object validated.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/validate_basket_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an object is indeed a basket_select object — validate_basket_select","text":"original object.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/validate_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an object is indeed a query object — validate_query","title":"Validate an object is indeed a query object — validate_query","text":"Validate object indeed query object","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/validate_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an object is indeed a query object — validate_query","text":"","code":"validate_query(obj)"},{"path":"https://pharmaverse.github.io/admiral/reference/validate_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an object is indeed a query object — validate_query","text":"obj object validated.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/validate_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an object is indeed a query object — validate_query","text":"original object.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Create List of Quosures — vars","title":"Create List of Quosures — vars","text":"function deprecated, please use exprs() instead.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create List of Quosures — vars","text":"","code":"vars(...)"},{"path":"https://pharmaverse.github.io/admiral/reference/vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create List of Quosures — vars","text":"... List variables","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create List of Quosures — vars","text":"List expressions","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/yn_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map ","title":"Map ","text":"Map \"Y\" \"N\" numeric values.","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/yn_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map ","text":"","code":"yn_to_numeric(arg)"},{"path":"https://pharmaverse.github.io/admiral/reference/yn_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map ","text":"arg Character vector","code":""},{"path":"https://pharmaverse.github.io/admiral/reference/yn_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map ","text":"1 arg equals \"Y\", 0 arg equals \"N\", NA_real_ otherwise","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiral/reference/yn_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map ","text":"","code":"yn_to_numeric(c(\"Y\", \"N\", NA_character_)) #> [1]  1  0 NA"}]
